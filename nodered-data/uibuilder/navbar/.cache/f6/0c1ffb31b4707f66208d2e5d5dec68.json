{"id":"../node_modules/bootstrap-vue/esm/components/button/button.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../vue","loc":{"line":7,"column":31,"index":1121},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../constants/components","loc":{"line":8,"column":28,"index":1162},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/components.js"},{"name":"../../constants/key-codes","loc":{"line":9,"column":39,"index":1231},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/key-codes.js"},{"name":"../../constants/props","loc":{"line":10,"column":52,"index":1312},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../../utils/array","loc":{"line":11,"column":23,"index":1360},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/array.js"},{"name":"../../utils/dom","loc":{"line":12,"column":45,"index":1426},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js"},{"name":"../../utils/events","loc":{"line":13,"column":26,"index":1471},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js"},{"name":"../../utils/inspect","loc":{"line":14,"column":47,"index":1540},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../utils/object","loc":{"line":15,"column":31,"index":1594},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../../utils/props","loc":{"line":16,"column":60,"index":1676},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"../../utils/router","loc":{"line":17,"column":39,"index":1736},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/router.js"},{"name":"../link/link","loc":{"line":18,"column":43,"index":1801},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/link/link.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.BButton = void 0;\n\nvar _vue = require(\"../../vue\");\n\nvar _components = require(\"../../constants/components\");\n\nvar _keyCodes = require(\"../../constants/key-codes\");\n\nvar _props = require(\"../../constants/props\");\n\nvar _array = require(\"../../utils/array\");\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _events = require(\"../../utils/events\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nvar _object = require(\"../../utils/object\");\n\nvar _props2 = require(\"../../utils/props\");\n\nvar _router = require(\"../../utils/router\");\n\nvar _link = require(\"../link/link\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n// --- Props ---\nvar linkProps = (0, _object.omit)(_link.props, ['event', 'routerTag']);\ndelete linkProps.href.default;\ndelete linkProps.to.default;\nvar props = (0, _props2.makePropsConfigurable)((0, _object.sortKeys)(_objectSpread(_objectSpread({}, linkProps), {}, {\n  block: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  disabled: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  pill: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  // Tri-state: `true`, `false` or `null`\n  // => On, off, not a toggle\n  pressed: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, null),\n  size: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  squared: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  tag: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'button'),\n  type: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'button'),\n  variant: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'secondary')\n})), _components.NAME_BUTTON); // --- Helper methods ---\n// Focus handler for toggle buttons\n// Needs class of 'focus' when focused\n\nexports.props = props;\n\nvar handleFocus = function handleFocus(event) {\n  if (event.type === 'focusin') {\n    (0, _dom.addClass)(event.target, 'focus');\n  } else if (event.type === 'focusout') {\n    (0, _dom.removeClass)(event.target, 'focus');\n  }\n}; // Is the requested button a link?\n// If tag prop is set to `a`, we use a <b-link> to get proper disabled handling\n\n\nvar isLink = function isLink(props) {\n  return (0, _router.isLink)(props) || (0, _dom.isTag)(props.tag, 'a');\n}; // Is the button to be a toggle button?\n\n\nvar isToggle = function isToggle(props) {\n  return (0, _inspect.isBoolean)(props.pressed);\n}; // Is the button \"really\" a button?\n\n\nvar isButton = function isButton(props) {\n  return !(isLink(props) || props.tag && !(0, _dom.isTag)(props.tag, 'button'));\n}; // Is the requested tag not a button or link?\n\n\nvar isNonStandardTag = function isNonStandardTag(props) {\n  return !isLink(props) && !isButton(props);\n}; // Compute required classes (non static classes)\n\n\nvar computeClass = function computeClass(props) {\n  var _ref;\n\n  return [\"btn-\".concat(props.variant || 'secondary'), (_ref = {}, _defineProperty(_ref, \"btn-\".concat(props.size), props.size), _defineProperty(_ref, 'btn-block', props.block), _defineProperty(_ref, 'rounded-pill', props.pill), _defineProperty(_ref, 'rounded-0', props.squared && !props.pill), _defineProperty(_ref, \"disabled\", props.disabled), _defineProperty(_ref, \"active\", props.pressed), _ref)];\n}; // Compute the link props to pass to b-link (if required)\n\n\nvar computeLinkProps = function computeLinkProps(props) {\n  return isLink(props) ? (0, _props2.pluckProps)(linkProps, props) : {};\n}; // Compute the attributes for a button\n\n\nvar computeAttrs = function computeAttrs(props, data) {\n  var button = isButton(props);\n  var link = isLink(props);\n  var toggle = isToggle(props);\n  var nonStandardTag = isNonStandardTag(props);\n  var hashLink = link && props.href === '#';\n  var role = data.attrs && data.attrs.role ? data.attrs.role : null;\n  var tabindex = data.attrs ? data.attrs.tabindex : null;\n\n  if (nonStandardTag || hashLink) {\n    tabindex = '0';\n  }\n\n  return {\n    // Type only used for \"real\" buttons\n    type: button && !link ? props.type : null,\n    // Disabled only set on \"real\" buttons\n    disabled: button ? props.disabled : null,\n    // We add a role of button when the tag is not a link or button for ARIA\n    // Don't bork any role provided in `data.attrs` when `isLink` or `isButton`\n    // Except when link has `href` of `#`\n    role: nonStandardTag || hashLink ? 'button' : role,\n    // We set the `aria-disabled` state for non-standard tags\n    'aria-disabled': nonStandardTag ? String(props.disabled) : null,\n    // For toggles, we need to set the pressed state for ARIA\n    'aria-pressed': toggle ? String(props.pressed) : null,\n    // `autocomplete=\"off\"` is needed in toggle mode to prevent some browsers\n    // from remembering the previous setting when using the back button\n    autocomplete: toggle ? 'off' : null,\n    // `tabindex` is used when the component is not a button\n    // Links are tabbable, but don't allow disabled, while non buttons or links\n    // are not tabbable, so we mimic that functionality by disabling tabbing\n    // when disabled, and adding a `tabindex=\"0\"` to non buttons or non links\n    tabindex: props.disabled && !button ? '-1' : tabindex\n  };\n}; // --- Main component ---\n// @vue/component\n\n\nvar BButton = /*#__PURE__*/_vue.Vue.extend({\n  name: _components.NAME_BUTTON,\n  functional: true,\n  props: props,\n  render: function render(h, _ref2) {\n    var props = _ref2.props,\n        data = _ref2.data,\n        listeners = _ref2.listeners,\n        children = _ref2.children;\n    var toggle = isToggle(props);\n    var link = isLink(props);\n    var nonStandardTag = isNonStandardTag(props);\n    var hashLink = link && props.href === '#';\n    var on = {\n      keydown: function keydown(event) {\n        // When the link is a `href=\"#\"` or a non-standard tag (has `role=\"button\"`),\n        // we add a keydown handlers for CODE_SPACE/CODE_ENTER\n\n        /* istanbul ignore next */\n        if (props.disabled || !(nonStandardTag || hashLink)) {\n          return;\n        }\n\n        var keyCode = event.keyCode; // Add CODE_SPACE handler for `href=\"#\"` and CODE_ENTER handler for non-standard tags\n\n        if (keyCode === _keyCodes.CODE_SPACE || keyCode === _keyCodes.CODE_ENTER && nonStandardTag) {\n          var target = event.currentTarget || event.target;\n          (0, _events.stopEvent)(event, {\n            propagation: false\n          });\n          target.click();\n        }\n      },\n      click: function click(event) {\n        /* istanbul ignore if: blink/button disabled should handle this */\n        if (props.disabled && (0, _inspect.isEvent)(event)) {\n          (0, _events.stopEvent)(event);\n        } else if (toggle && listeners && listeners['update:pressed']) {\n          // Send `.sync` updates to any \"pressed\" prop (if `.sync` listeners)\n          // `concat()` will normalize the value to an array without\n          // double wrapping an array value in an array\n          (0, _array.concat)(listeners['update:pressed']).forEach(function (fn) {\n            if ((0, _inspect.isFunction)(fn)) {\n              fn(!props.pressed);\n            }\n          });\n        }\n      }\n    };\n\n    if (toggle) {\n      on.focusin = handleFocus;\n      on.focusout = handleFocus;\n    }\n\n    var componentData = {\n      staticClass: 'btn',\n      class: computeClass(props),\n      props: computeLinkProps(props),\n      attrs: computeAttrs(props, data),\n      on: on\n    };\n    return h(link ? _link.BLink : props.tag, (0, _vue.mergeData)(data, componentData), children);\n  }\n});\n\nexports.BButton = BButton;"},"sourceMaps":null,"error":null,"hash":"4680234db42fd8167e943d5320e5d25d","cacheData":{"env":{}}}