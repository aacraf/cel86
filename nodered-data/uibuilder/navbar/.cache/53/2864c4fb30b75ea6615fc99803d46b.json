{"id":"../node_modules/vue-json-pretty/lib/vue-json-pretty.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/vue-json-pretty/package.json","includedInParent":true,"mtime":1651564048992}],"generated":{"js":"var define;\n!function (e, t) {\n  \"object\" == typeof exports && \"object\" == typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define([], t) : \"object\" == typeof exports ? exports.VueJsonPretty = t() : e.VueJsonPretty = t();\n}(this, function () {\n  return function () {\n    \"use strict\";\n\n    var e = {\n      802: function (e, t, l) {\n        function o(e, t, l, o, n, s, a, i) {\n          var c,\n              r = \"function\" == typeof e ? e.options : e;\n          if (t && (r.render = t, r.staticRenderFns = l, r._compiled = !0), o && (r.functional = !0), s && (r._scopeId = \"data-v-\" + s), a ? (c = function (e) {\n            (e = e || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) || \"undefined\" == typeof __VUE_SSR_CONTEXT__ || (e = __VUE_SSR_CONTEXT__), n && n.call(this, e), e && e._registeredComponents && e._registeredComponents.add(a);\n          }, r._ssrRegister = c) : n && (c = i ? function () {\n            n.call(this, (r.functional ? this.parent : this).$root.$options.shadowRoot);\n          } : n), c) if (r.functional) {\n            r._injectStyles = c;\n            var h = r.render;\n\n            r.render = function (e, t) {\n              return c.call(t), h(e, t);\n            };\n          } else {\n            var d = r.beforeCreate;\n            r.beforeCreate = d ? [].concat(d, c) : [c];\n          }\n          return {\n            exports: e,\n            options: r\n          };\n        }\n\n        l.r(t), l.d(t, {\n          default: function () {\n            return h;\n          }\n        });\n        var n = o({\n          props: {\n            data: {\n              required: !0,\n              type: String\n            },\n            collapsedOnClickBrackets: Boolean\n          },\n          methods: {\n            toggleBrackets(e) {\n              this.collapsedOnClickBrackets && this.$emit(\"click\", e);\n            }\n\n          }\n        }, function () {\n          var e = this,\n              t = e.$createElement;\n          return (e._self._c || t)(\"span\", {\n            staticClass: \"vjs-tree__brackets\",\n            on: {\n              click: function (t) {\n                return t.stopPropagation(), e.toggleBrackets(t);\n              }\n            }\n          }, [e._v(\"\\n  \" + e._s(e.data) + \"\\n\")]);\n        }, [], !1, null, null, null).exports,\n            s = o({\n          props: {\n            checked: {\n              type: Boolean,\n              default: !1\n            },\n            isMultiple: Boolean\n          },\n          data: () => ({\n            focus: !1\n          }),\n          computed: {\n            uiType() {\n              return this.isMultiple ? \"checkbox\" : \"radio\";\n            },\n\n            model: {\n              get() {\n                return this.checked;\n              },\n\n              set(e) {\n                this.$emit(\"input\", e);\n              }\n\n            }\n          }\n        }, function () {\n          var e = this,\n              t = e.$createElement,\n              l = e._self._c || t;\n          return l(\"label\", {\n            class: [\"vjs-check-controller\", e.checked ? \"is-checked\" : \"\"],\n            on: {\n              click: function (e) {\n                e.stopPropagation();\n              }\n            }\n          }, [l(\"span\", {\n            class: \"vjs-check-controller__inner is-\" + e.uiType\n          }), e._v(\" \"), \"checkbox\" === e.uiType ? l(\"input\", {\n            directives: [{\n              name: \"model\",\n              rawName: \"v-model\",\n              value: e.model,\n              expression: \"model\"\n            }],\n            class: \"vjs-check-controller__original is-\" + e.uiType,\n            attrs: {\n              type: \"checkbox\"\n            },\n            domProps: {\n              checked: Array.isArray(e.model) ? e._i(e.model, null) > -1 : e.model\n            },\n            on: {\n              change: [function (t) {\n                var l = e.model,\n                    o = t.target,\n                    n = !!o.checked;\n\n                if (Array.isArray(l)) {\n                  var s = e._i(l, null);\n\n                  o.checked ? s < 0 && (e.model = l.concat([null])) : s > -1 && (e.model = l.slice(0, s).concat(l.slice(s + 1)));\n                } else e.model = n;\n              }, function (t) {\n                return e.$emit(\"change\", e.model);\n              }],\n              focus: function (t) {\n                e.focus = !0;\n              },\n              blur: function (t) {\n                e.focus = !1;\n              }\n            }\n          }) : \"radio\" === e.uiType ? l(\"input\", {\n            directives: [{\n              name: \"model\",\n              rawName: \"v-model\",\n              value: e.model,\n              expression: \"model\"\n            }],\n            class: \"vjs-check-controller__original is-\" + e.uiType,\n            attrs: {\n              type: \"radio\"\n            },\n            domProps: {\n              checked: e._q(e.model, null)\n            },\n            on: {\n              change: [function (t) {\n                e.model = null;\n              }, function (t) {\n                return e.$emit(\"change\", e.model);\n              }],\n              focus: function (t) {\n                e.focus = !0;\n              },\n              blur: function (t) {\n                e.focus = !1;\n              }\n            }\n          }) : l(\"input\", {\n            directives: [{\n              name: \"model\",\n              rawName: \"v-model\",\n              value: e.model,\n              expression: \"model\"\n            }],\n            class: \"vjs-check-controller__original is-\" + e.uiType,\n            attrs: {\n              type: e.uiType\n            },\n            domProps: {\n              value: e.model\n            },\n            on: {\n              change: function (t) {\n                return e.$emit(\"change\", e.model);\n              },\n              focus: function (t) {\n                e.focus = !0;\n              },\n              blur: function (t) {\n                e.focus = !1;\n              },\n              input: function (t) {\n                t.target.composing || (e.model = t.target.value);\n              }\n            }\n          })]);\n        }, [], !1, null, null, null);\n\n        function a(e) {\n          return Object.prototype.toString.call(e).slice(8, -1).toLowerCase();\n        }\n\n        function i(e, t = \"root\", l = 0, {\n          key: o,\n          index: n,\n          type: s = \"content\",\n          showComma: c = !1,\n          length: r = 1\n        } = {}) {\n          const h = a(e);\n\n          if (\"array\" === h) {\n            const n = e.map((e, o, n) => i(e, `${t}[${o}]`, l + 1, {\n              index: o,\n              showComma: o !== n.length - 1,\n              length: r,\n              type: s\n            })).reduce((e, t) => e.concat(t), []);\n            return [i(\"[\", t, l, {\n              key: o,\n              length: e.length,\n              type: \"arrayStart\"\n            })[0]].concat(n, i(\"]\", t, l, {\n              showComma: c,\n              length: e.length,\n              type: \"arrayEnd\"\n            })[0]);\n          }\n\n          if (\"object\" === h) {\n            const a = Object.keys(e),\n                  h = a.map((o, n, a) => i(e[o], o.includes(\".\") ? `${t}[\"${o}\"]` : `${t}.${o}`, l + 1, {\n              key: o,\n              showComma: n !== a.length - 1,\n              length: r,\n              type: s\n            })).reduce((e, t) => e.concat(t), []);\n            return [i(\"{\", t, l, {\n              key: o,\n              index: n,\n              length: a.length,\n              type: \"objectStart\"\n            })[0]].concat(h, i(\"}\", t, l, {\n              showComma: c,\n              length: a.length,\n              type: \"objectEnd\"\n            })[0]);\n          }\n\n          const d = Object.entries({\n            content: e,\n            level: l,\n            key: o,\n            index: n,\n            path: t,\n            showComma: c,\n            length: r,\n            type: s\n          }).reduce((e, [t, l]) => void 0 !== l ? { ...e,\n            [t]: l\n          } : e, {});\n          return \"object\" === a(d) ? [d] : d;\n        }\n\n        var c = o({\n          components: {\n            Brackets: n,\n            CheckController: s.exports\n          },\n          props: {\n            node: {\n              required: !0,\n              type: Object\n            },\n            collapsed: Boolean,\n            collapsedOnClickBrackets: Boolean,\n            showDoubleQuotes: Boolean,\n            showLength: Boolean,\n            checked: Boolean,\n            selectableType: {\n              type: String,\n              default: \"\"\n            },\n            showSelectController: {\n              type: Boolean,\n              default: !1\n            },\n            showLine: {\n              type: Boolean,\n              default: !0\n            },\n            selectOnClickNode: {\n              type: Boolean,\n              default: !0\n            },\n            pathSelectable: {\n              type: Function,\n              default: () => !0\n            },\n            highlightSelectedNode: {\n              type: Boolean,\n              default: !0\n            },\n            customValueFormatter: {\n              type: Function,\n              default: null\n            }\n          },\n          computed: {\n            valueClass() {\n              return \"vjs-value vjs-value__\" + this.dataType;\n            },\n\n            dataType() {\n              return a(this.node.content);\n            },\n\n            prettyKey() {\n              return this.showDoubleQuotes ? `\"${this.node.key}\"` : this.node.key;\n            },\n\n            selectable() {\n              return this.pathSelectable(this.node.path, this.node.content) && (this.isMultiple || this.isSingle);\n            },\n\n            isMultiple() {\n              return \"multiple\" === this.selectableType;\n            },\n\n            isSingle() {\n              return \"single\" === this.selectableType;\n            }\n\n          },\n          methods: {\n            defaultFormatter(e) {\n              let t = e + \"\";\n              return \"string\" === this.dataType && (t = `\"${t}\"`), t;\n            },\n\n            valueFormatter(e) {\n              const t = this.customValueFormatter ? this.customValueFormatter(e, this.node.key, this.node.path, this.defaultFormatter(e)) : this.defaultFormatter(e);\n              return this.node.showComma ? t + \",\" : t;\n            },\n\n            onBracketsClick() {\n              this.$emit(\"brackets-click\", !this.collapsed, this.node.path);\n            },\n\n            onCheckedChange() {\n              this.$emit(\"selected-change\", this.node);\n            },\n\n            onTreeNodeClick() {\n              this.$emit(\"tree-node-click\", this.node), this.selectable && this.selectOnClickNode && this.$emit(\"selected-change\", this.node);\n            }\n\n          }\n        }, function () {\n          var e = this,\n              t = e.$createElement,\n              l = e._self._c || t;\n          return l(\"div\", {\n            class: {\n              \"vjs-tree__node\": !0,\n              \"has-selector\": e.showSelectController,\n              \"is-highlight\": e.highlightSelectedNode && e.checked\n            },\n            on: {\n              click: e.onTreeNodeClick\n            }\n          }, [e.showSelectController && e.selectable && \"objectEnd\" !== e.node.type && \"arrayEnd\" !== e.node.type ? [l(\"check-controller\", {\n            attrs: {\n              \"is-multiple\": e.isMultiple,\n              checked: e.checked\n            },\n            on: {\n              change: e.onCheckedChange\n            }\n          })] : e._e(), e._v(\" \"), e._l(e.node.level, function (t, o) {\n            return l(\"div\", {\n              key: o,\n              class: {\n                \"vjs-tree__indent\": !0,\n                \"has-line\": e.showLine\n              }\n            });\n          }), e._v(\" \"), e.node.key ? l(\"span\", {\n            staticClass: \"vjs-key\"\n          }, [e._v(e._s(e.prettyKey) + \":\")]) : e._e(), e._v(\" \"), l(\"span\", [\"content\" !== e.node.type ? l(\"brackets\", {\n            attrs: {\n              data: e.node.content,\n              \"collapsed-on-click-brackets\": e.collapsedOnClickBrackets\n            },\n            on: {\n              click: e.onBracketsClick\n            }\n          }) : l(\"span\", {\n            class: e.valueClass,\n            domProps: {\n              innerHTML: e._s(e.valueFormatter(e.node.content))\n            }\n          }), e._v(\" \"), e.showLength && e.collapsed ? l(\"span\", {\n            staticClass: \"vjs-comment\"\n          }, [e._v(\" // \" + e._s(e.node.length) + \" items \")]) : e._e()], 1)], 2);\n        }, [], !1, null, null, null),\n            r = o({\n          name: \"VueJsonPretty\",\n          components: {\n            TreeNode: c.exports\n          },\n          props: {\n            data: {\n              type: [String, Number, Boolean, Array, Object],\n              default: null\n            },\n            deep: {\n              type: Number,\n              default: 1 / 0\n            },\n            deepCollapseChildren: {\n              type: Boolean,\n              default: !1\n            },\n            path: {\n              type: String,\n              default: \"root\"\n            },\n            virtual: {\n              type: Boolean,\n              default: !1\n            },\n            itemHeight: {\n              type: Number,\n              default: 20\n            },\n            showLength: {\n              type: Boolean,\n              default: !1\n            },\n            showDoubleQuotes: {\n              type: Boolean,\n              default: !0\n            },\n            selectableType: {\n              type: String,\n              default: \"\"\n            },\n            showSelectController: {\n              type: Boolean,\n              default: !1\n            },\n            showLine: {\n              type: Boolean,\n              default: !0\n            },\n            selectOnClickNode: {\n              type: Boolean,\n              default: !0\n            },\n            value: {\n              type: [Array, String],\n              default: () => \"\"\n            },\n            pathSelectable: {\n              type: Function,\n              default: () => !0\n            },\n            highlightSelectedNode: {\n              type: Boolean,\n              default: !0\n            },\n            collapsedOnClickBrackets: {\n              type: Boolean,\n              default: !0\n            },\n            customValueFormatter: {\n              type: Function,\n              default: null\n            },\n            virtualLines: {\n              type: Number,\n              default: 10\n            }\n          },\n\n          data() {\n            return {\n              translateY: 0,\n              visibleData: null,\n              hiddenPaths: i(this.data, this.path).reduce((e, t) => {\n                const l = this.deepCollapseChildren ? t.level >= this.deep : t.level === this.deep;\n                return \"objectStart\" !== t.type && \"arrayStart\" !== t.type || !l ? e : { ...e,\n                  [t.path]: 1\n                };\n              }, {})\n            };\n          },\n\n          computed: {\n            flatData() {\n              let e = null;\n              return i(this.data, this.path).reduce((t, l, o) => {\n                const n = { ...l,\n                  id: o\n                },\n                      s = this.hiddenPaths[n.path];\n\n                if (e && e.path === n.path) {\n                  const l = \"objectStart\" === e.type,\n                        o = { ...e,\n                    ...n,\n                    content: l ? \"{...}\" : \"[...]\",\n                    type: l ? \"objectCollapsed\" : \"arrayCollapsed\"\n                  };\n                  return e = null, t.concat(o);\n                }\n\n                return s && !e ? (e = n, t) : e ? t : t.concat(n);\n              }, []);\n            },\n\n            selectedPaths: {\n              get() {\n                return this.value && \"single\" === this.selectableType ? [this.value] : this.value || [];\n              },\n\n              set(e) {\n                this.$emit(\"input\", e);\n              }\n\n            },\n\n            propsError() {\n              return !this.selectableType || this.selectOnClickNode || this.showSelectController ? \"\" : \"When selectableType is not null, selectOnClickNode and showSelectController cannot be false at the same time, because this will cause the selection to fail.\";\n            }\n\n          },\n          watch: {\n            propsError: {\n              handler(e) {\n                if (e) throw new Error(\"[VueJsonPretty] \" + e);\n              },\n\n              immediate: !0\n            },\n            flatData: {\n              handler() {\n                this.onTreeScroll();\n              },\n\n              immediate: !0\n            }\n          },\n          methods: {\n            onTreeScroll() {\n              if (this.virtual) {\n                const e = this.virtualLines,\n                      t = this.$refs.tree && this.$refs.tree.scrollTop || 0,\n                      l = Math.floor(t / this.itemHeight);\n                let o = l < 0 ? 0 : l + e > this.flatData.length ? this.flatData.length - e : l;\n                o < 0 && (o = 0);\n                const n = o + e;\n                this.translateY = o * this.itemHeight, this.visibleData = this.flatData.filter((e, t) => t >= o && t < n);\n              } else this.visibleData = this.flatData;\n            },\n\n            onSelectedChange({\n              path: e\n            }) {\n              const t = this.selectableType;\n\n              if (\"multiple\" === t) {\n                const t = this.selectedPaths.findIndex(t => t === e),\n                      l = [...this.selectedPaths];\n                -1 !== t ? this.selectedPaths.splice(t, 1) : this.selectedPaths.push(e), this.$emit(\"change\", this.selectedPaths, l);\n              } else if (\"single\" === t && this.selectedPaths !== e) {\n                const t = this.selectedPaths,\n                      l = e;\n                this.selectedPaths = l, this.$emit(\"change\", l, t);\n              }\n            },\n\n            onTreeNodeClick({\n              content: e,\n              path: t\n            }) {\n              this.$emit(\"click\", t, e);\n            },\n\n            onBracketsClick(e, t) {\n              if (e) this.hiddenPaths = { ...this.hiddenPaths,\n                [t]: 1\n              };else {\n                const e = { ...this.hiddenPaths\n                };\n                delete e[t], this.hiddenPaths = e;\n              }\n            }\n\n          }\n        }, function () {\n          var e = this,\n              t = e.$createElement,\n              l = e._self._c || t;\n          return l(\"div\", {\n            ref: \"tree\",\n            class: {\n              \"vjs-tree\": !0,\n              \"is-virtual\": e.virtual\n            },\n            on: {\n              scroll: e.onTreeScroll\n            }\n          }, [l(\"div\", {\n            style: e.virtual && {\n              height: e.flatData.length * e.itemHeight + \"px\"\n            }\n          }, [l(\"div\", {\n            style: e.virtual && {\n              transform: \"translateY(\" + e.translateY + \"px)\"\n            }\n          }, e._l(e.visibleData, function (t) {\n            return l(\"tree-node\", {\n              key: t.id,\n              attrs: {\n                node: t,\n                collapsed: !!e.hiddenPaths[t.path],\n                \"custom-value-formatter\": e.customValueFormatter,\n                \"show-double-quotes\": e.showDoubleQuotes,\n                \"show-length\": e.showLength,\n                \"collapsed-on-click-brackets\": e.collapsedOnClickBrackets,\n                checked: e.selectedPaths.includes(t.path),\n                \"selectable-type\": e.selectableType,\n                \"show-line\": e.showLine,\n                \"show-select-controller\": e.showSelectController,\n                \"select-on-click-node\": e.selectOnClickNode,\n                \"path-selectable\": e.pathSelectable,\n                \"highlight-selected-node\": e.highlightSelectedNode\n              },\n              on: {\n                \"tree-node-click\": e.onTreeNodeClick,\n                \"brackets-click\": e.onBracketsClick,\n                \"selected-change\": e.onSelectedChange\n              }\n            });\n          }), 1)])]);\n        }, [], !1, null, null, null).exports,\n            h = Object.assign({}, r, {\n          version: \"1.8.2\"\n        });\n      }\n    },\n        t = {};\n\n    function l(o) {\n      if (t[o]) return t[o].exports;\n      var n = t[o] = {\n        exports: {}\n      };\n      return e[o](n, n.exports, l), n.exports;\n    }\n\n    return l.d = function (e, t) {\n      for (var o in t) l.o(t, o) && !l.o(e, o) && Object.defineProperty(e, o, {\n        enumerable: !0,\n        get: t[o]\n      });\n    }, l.o = function (e, t) {\n      return Object.prototype.hasOwnProperty.call(e, t);\n    }, l.r = function (e) {\n      \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n        value: \"Module\"\n      }), Object.defineProperty(e, \"__esModule\", {\n        value: !0\n      });\n    }, l(802);\n  }();\n});"},"sourceMaps":null,"error":null,"hash":"b4945a1c44df6566fc1b8827e3c1a231","cacheData":{"env":{}}}