{"id":"../node_modules/bootstrap-vue/esm/utils/normalize-slot.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"./array","loc":{"line":1,"column":23,"index":23},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/normalize-slot.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/array.js"},{"name":"./identity","loc":{"line":2,"column":25,"index":59},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/normalize-slot.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/identity.js"},{"name":"./inspect","loc":{"line":3,"column":27,"index":100},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/normalize-slot.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeSlot = exports.hasNormalizedSlot = void 0;\n\nvar _array = require(\"./array\");\n\nvar _identity = require(\"./identity\");\n\nvar _inspect = require(\"./inspect\");\n\n// Note for functional components:\n// In functional components, `slots` is a function so it must be called\n// first before passing to the below methods. `scopedSlots` is always an\n// object and may be undefined (for Vue < 2.6.x)\n\n/**\n * Returns true if either scoped or unscoped named slot exists\n *\n * @param {String, Array} name or name[]\n * @param {Object} scopedSlots\n * @param {Object} slots\n * @returns {Array|undefined} VNodes\n */\nvar hasNormalizedSlot = function hasNormalizedSlot(names) {\n  var $scopedSlots = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var $slots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // Ensure names is an array\n\n  names = (0, _array.concat)(names).filter(_identity.identity); // Returns true if the either a $scopedSlot or $slot exists with the specified name\n\n  return names.some(function (name) {\n    return $scopedSlots[name] || $slots[name];\n  });\n};\n/**\n * Returns VNodes for named slot either scoped or unscoped\n *\n * @param {String, Array} name or name[]\n * @param {String} scope\n * @param {Object} scopedSlots\n * @param {Object} slots\n * @returns {Array|undefined} VNodes\n */\n\n\nexports.hasNormalizedSlot = hasNormalizedSlot;\n\nvar normalizeSlot = function normalizeSlot(names) {\n  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var $scopedSlots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var $slots = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {}; // Ensure names is an array\n\n  names = (0, _array.concat)(names).filter(_identity.identity);\n  var slot;\n\n  for (var i = 0; i < names.length && !slot; i++) {\n    var name = names[i];\n    slot = $scopedSlots[name] || $slots[name];\n  } // Note: in Vue 2.6.x, all named slots are also scoped slots\n\n\n  return (0, _inspect.isFunction)(slot) ? slot(scope) : slot;\n};\n\nexports.normalizeSlot = normalizeSlot;"},"sourceMaps":null,"error":null,"hash":"23d605016d00fb91525626b3ca40ceb3","cacheData":{"env":{}}}