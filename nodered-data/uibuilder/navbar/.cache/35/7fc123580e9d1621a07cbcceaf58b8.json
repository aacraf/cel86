{"id":"../node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../../vue","loc":{"line":1,"column":20,"index":20},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../../constants/components","loc":{"line":2,"column":27,"index":63},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/components.js"},{"name":"../../../constants/events","loc":{"line":3,"column":57,"index":153},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/events.js"},{"name":"../../../constants/props","loc":{"line":4,"column":78,"index":260},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../../../utils/events","loc":{"line":5,"column":57,"index":345},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js"},{"name":"../../../utils/inspect","loc":{"line":6,"column":47,"index":417},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../../utils/loose-equal","loc":{"line":7,"column":27,"index":470},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/loose-equal.js"},{"name":"../../../utils/object","loc":{"line":8,"column":22,"index":522},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../../../utils/props","loc":{"line":9,"column":25,"index":572},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"../../../utils/warn","loc":{"line":10,"column":21,"index":617},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/warn.js"},{"name":"../../../mixins/listen-on-root","loc":{"line":11,"column":34,"index":674},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/listen-on-root.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.providerMixin = exports.props = void 0;\n\nvar _vue = require(\"../../../vue\");\n\nvar _components = require(\"../../../constants/components\");\n\nvar _events = require(\"../../../constants/events\");\n\nvar _props = require(\"../../../constants/props\");\n\nvar _events2 = require(\"../../../utils/events\");\n\nvar _inspect = require(\"../../../utils/inspect\");\n\nvar _looseEqual = require(\"../../../utils/loose-equal\");\n\nvar _object = require(\"../../../utils/object\");\n\nvar _props2 = require(\"../../../utils/props\");\n\nvar _warn = require(\"../../../utils/warn\");\n\nvar _listenOnRoot = require(\"../../../mixins/listen-on-root\");\n\n// --- Constants ---\nvar ROOT_EVENT_NAME_REFRESHED = (0, _events2.getRootEventName)(_components.NAME_TABLE, _events.EVENT_NAME_REFRESHED);\nvar ROOT_ACTION_EVENT_NAME_REFRESH = (0, _events2.getRootActionEventName)(_components.NAME_TABLE, _events.EVENT_NAME_REFRESH); // --- Props ---\n\nvar props = {\n  // Passed to the context object\n  // Not used by `<b-table>` directly\n  apiUrl: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  // Adds in 'Function' support\n  items: (0, _props2.makeProp)(_props.PROP_TYPE_ARRAY_FUNCTION, []),\n  noProviderFiltering: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  noProviderPaging: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  noProviderSorting: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false)\n}; // --- Mixin ---\n// @vue/component\n\nexports.props = props;\n\nvar providerMixin = _vue.Vue.extend({\n  mixins: [_listenOnRoot.listenOnRootMixin],\n  props: props,\n  computed: {\n    hasProvider: function hasProvider() {\n      return (0, _inspect.isFunction)(this.items);\n    },\n    providerTriggerContext: function providerTriggerContext() {\n      // Used to trigger the provider function via a watcher. Only the fields that\n      // are needed for triggering a provider update are included. Note that the\n      // regular this.context is sent to the provider during fetches though, as they\n      // may need all the prop info.\n      var ctx = {\n        apiUrl: this.apiUrl,\n        filter: null,\n        sortBy: null,\n        sortDesc: null,\n        perPage: null,\n        currentPage: null\n      };\n\n      if (!this.noProviderFiltering) {\n        // Either a string, or could be an object or array.\n        ctx.filter = this.localFilter;\n      }\n\n      if (!this.noProviderSorting) {\n        ctx.sortBy = this.localSortBy;\n        ctx.sortDesc = this.localSortDesc;\n      }\n\n      if (!this.noProviderPaging) {\n        ctx.perPage = this.perPage;\n        ctx.currentPage = this.currentPage;\n      }\n\n      return (0, _object.clone)(ctx);\n    }\n  },\n  watch: {\n    // Provider update triggering\n    items: function items(newValue) {\n      // If a new provider has been specified, trigger an update\n      if (this.hasProvider || (0, _inspect.isFunction)(newValue)) {\n        this.$nextTick(this._providerUpdate);\n      }\n    },\n    providerTriggerContext: function providerTriggerContext(newValue, oldValue) {\n      // Trigger the provider to update as the relevant context values have changed.\n      if (!(0, _looseEqual.looseEqual)(newValue, oldValue)) {\n        this.$nextTick(this._providerUpdate);\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this = this; // Call the items provider if necessary\n\n\n    if (this.hasProvider && (!this.localItems || this.localItems.length === 0)) {\n      // Fetch on mount if localItems is empty\n      this._providerUpdate();\n    } // Listen for global messages to tell us to force refresh the table\n\n\n    this.listenOnRoot(ROOT_ACTION_EVENT_NAME_REFRESH, function (id) {\n      if (id === _this.id || id === _this) {\n        _this.refresh();\n      }\n    });\n  },\n  methods: {\n    refresh: function refresh() {\n      var items = this.items,\n          refresh = this.refresh; // Public Method: Force a refresh of the provider function\n\n      this.$off(_events.EVENT_NAME_REFRESHED, refresh);\n\n      if (this.computedBusy) {\n        // Can't force an update when forced busy by user (busy prop === true)\n        if (this.localBusy && this.hasProvider) {\n          // But if provider running (localBusy), re-schedule refresh once `refreshed` emitted\n          this.$on(_events.EVENT_NAME_REFRESHED, refresh);\n        }\n      } else {\n        this.clearSelected();\n\n        if (this.hasProvider) {\n          this.$nextTick(this._providerUpdate);\n        } else {\n          /* istanbul ignore next */\n          this.localItems = (0, _inspect.isArray)(items) ? items.slice() : [];\n        }\n      }\n    },\n    // Provider related methods\n    _providerSetLocal: function _providerSetLocal(items) {\n      this.localItems = (0, _inspect.isArray)(items) ? items.slice() : [];\n      this.localBusy = false;\n      this.$emit(_events.EVENT_NAME_REFRESHED); // New root emit\n\n      if (this.id) {\n        this.emitOnRoot(ROOT_EVENT_NAME_REFRESHED, this.id);\n      }\n    },\n    _providerUpdate: function _providerUpdate() {\n      var _this2 = this; // Refresh the provider function items.\n\n\n      if (!this.hasProvider) {\n        // Do nothing if no provider\n        return;\n      } // If table is busy, wait until refreshed before calling again\n\n\n      if (this.computedBusy) {\n        // Schedule a new refresh once `refreshed` is emitted\n        this.$nextTick(this.refresh);\n        return;\n      } // Set internal busy state\n\n\n      this.localBusy = true; // Call provider function with context and optional callback after DOM is fully updated\n\n      this.$nextTick(function () {\n        try {\n          // Call provider function passing it the context and optional callback\n          var data = _this2.items(_this2.context, _this2._providerSetLocal);\n\n          if ((0, _inspect.isPromise)(data)) {\n            // Provider returned Promise\n            data.then(function (items) {\n              // Provider resolved with items\n              _this2._providerSetLocal(items);\n            });\n          } else if ((0, _inspect.isArray)(data)) {\n            // Provider returned Array data\n            _this2._providerSetLocal(data);\n          } else {\n            /* istanbul ignore if */\n            if (_this2.items.length !== 2) {\n              // Check number of arguments provider function requested\n              // Provider not using callback (didn't request second argument), so we clear\n              // busy state as most likely there was an error in the provider function\n\n              /* istanbul ignore next */\n              (0, _warn.warn)(\"Provider function didn't request callback and did not return a promise or data.\", _components.NAME_TABLE);\n              _this2.localBusy = false;\n            }\n          }\n        } catch (e)\n        /* istanbul ignore next */\n        {\n          // Provider function borked on us, so we spew out a warning\n          // and clear the busy state\n          (0, _warn.warn)(\"Provider function error [\".concat(e.name, \"] \").concat(e.message, \".\"), _components.NAME_TABLE);\n          _this2.localBusy = false;\n\n          _this2.$off(_events.EVENT_NAME_REFRESHED, _this2.refresh);\n        }\n      });\n    }\n  }\n});\n\nexports.providerMixin = providerMixin;"},"sourceMaps":null,"error":null,"hash":"bbfb87e9390b770d675a1dad10d04117","cacheData":{"env":{}}}