{"id":"../node_modules/bootstrap-vue/esm/components/table/helpers/sanitize-row.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../../utils/array","loc":{"line":1,"column":30,"index":30},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/sanitize-row.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/array.js"},{"name":"../../../utils/inspect","loc":{"line":2,"column":36,"index":90},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/sanitize-row.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../../utils/object","loc":{"line":3,"column":34,"index":150},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/sanitize-row.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"./constants","loc":{"line":4,"column":35,"index":210},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/sanitize-row.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/constants.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sanitizeRow = void 0;\n\nvar _array = require(\"../../../utils/array\");\n\nvar _inspect = require(\"../../../utils/inspect\");\n\nvar _object = require(\"../../../utils/object\");\n\nvar _constants = require(\"./constants\");\n\n// Return a copy of a row after all reserved fields have been filtered out\nvar sanitizeRow = function sanitizeRow(row, ignoreFields, includeFields) {\n  var fieldsObj = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {}; // We first need to format the row based on the field configurations\n  // This ensures that we add formatted values for keys that may not\n  // exist in the row itself\n\n  var formattedRow = (0, _object.keys)(fieldsObj).reduce(function (result, key) {\n    var field = fieldsObj[key];\n    var filterByFormatted = field.filterByFormatted;\n    var formatter = (0, _inspect.isFunction)(filterByFormatted) ?\n    /* istanbul ignore next */\n    filterByFormatted : filterByFormatted ?\n    /* istanbul ignore next */\n    field.formatter : null;\n\n    if ((0, _inspect.isFunction)(formatter)) {\n      result[key] = formatter(row[key], key, row);\n    }\n\n    return result;\n  }, (0, _object.clone)(row)); // Determine the allowed keys:\n  //   - Ignore special fields that start with `_`\n  //   - Ignore fields in the `ignoreFields` array\n  //   - Include only fields in the `includeFields` array\n\n  var allowedKeys = (0, _object.keys)(formattedRow).filter(function (key) {\n    return !_constants.IGNORED_FIELD_KEYS[key] && !((0, _inspect.isArray)(ignoreFields) && ignoreFields.length > 0 && (0, _array.arrayIncludes)(ignoreFields, key)) && !((0, _inspect.isArray)(includeFields) && includeFields.length > 0 && !(0, _array.arrayIncludes)(includeFields, key));\n  });\n  return (0, _object.pick)(formattedRow, allowedKeys);\n};\n\nexports.sanitizeRow = sanitizeRow;"},"sourceMaps":null,"error":null,"hash":"7a20ff5fd0311ded1ea324b08c5e181a","cacheData":{"env":{}}}