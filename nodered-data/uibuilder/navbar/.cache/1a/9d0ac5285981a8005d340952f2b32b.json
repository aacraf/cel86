{"id":"../node_modules/bootstrap-vue/esm/components/table/helpers/filter-event.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../../utils/dom","loc":{"line":1,"column":59,"index":59},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/filter-event.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js"},{"name":"./constants","loc":{"line":2,"column":29,"index":110},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/filter-event.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/constants.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filterEvent = void 0;\n\nvar _dom = require(\"../../../utils/dom\");\n\nvar _constants = require(\"./constants\");\n\nvar TABLE_TAG_NAMES = ['TD', 'TH', 'TR']; // Returns `true` if we should ignore the click/double-click/keypress event\n// Avoids having the user need to use `@click.stop` on the form control\n\nvar filterEvent = function filterEvent(event) {\n  // Exit early when we don't have a target element\n  if (!event || !event.target) {\n    /* istanbul ignore next */\n    return false;\n  }\n\n  var el = event.target; // Exit early when element is disabled or a table element\n\n  if (el.disabled || TABLE_TAG_NAMES.indexOf(el.tagName) !== -1) {\n    return false;\n  } // Ignore the click when it was inside a dropdown menu\n\n\n  if ((0, _dom.closest)('.dropdown-menu', el)) {\n    return true;\n  }\n\n  var label = el.tagName === 'LABEL' ? el : (0, _dom.closest)('label', el); // If the label's form control is not disabled then we don't propagate event\n  // Modern browsers have `label.control` that references the associated input, but IE 11\n  // does not have this property on the label element, so we resort to DOM lookups\n\n  if (label) {\n    var labelFor = (0, _dom.getAttr)(label, 'for');\n    var input = labelFor ? (0, _dom.getById)(labelFor) : (0, _dom.select)('input, select, textarea', label);\n\n    if (input && !input.disabled) {\n      return true;\n    }\n  } // Otherwise check if the event target matches one of the selectors in the\n  // event filter (i.e. anchors, non disabled inputs, etc.)\n  // Return `true` if we should ignore the event\n\n\n  return (0, _dom.matches)(el, _constants.EVENT_FILTER);\n};\n\nexports.filterEvent = filterEvent;"},"sourceMaps":null,"error":null,"hash":"992ba21f830e15b996879d7506e7fdae","cacheData":{"env":{}}}