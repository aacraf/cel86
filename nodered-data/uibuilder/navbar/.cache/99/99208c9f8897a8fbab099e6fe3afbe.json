{"id":"../node_modules/bootstrap-vue/esm/mixins/listen-on-window.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../vue","loc":{"line":1,"column":20,"index":20},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/listen-on-window.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../constants/env","loc":{"line":2,"column":27,"index":57},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/listen-on-window.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/env.js"},{"name":"../constants/events","loc":{"line":3,"column":41,"index":118},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/listen-on-window.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/events.js"},{"name":"../utils/array","loc":{"line":4,"column":30,"index":171},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/listen-on-window.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/array.js"},{"name":"../utils/events","loc":{"line":5,"column":34,"index":223},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/listen-on-window.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js"},{"name":"../utils/inspect","loc":{"line":6,"column":37,"index":279},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/listen-on-window.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../utils/object","loc":{"line":7,"column":21,"index":320},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/listen-on-window.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.listenOnWindowMixin = void 0;\n\nvar _vue = require(\"../vue\");\n\nvar _env = require(\"../constants/env\");\n\nvar _events = require(\"../constants/events\");\n\nvar _array = require(\"../utils/array\");\n\nvar _events2 = require(\"../utils/events\");\n\nvar _inspect = require(\"../utils/inspect\");\n\nvar _object = require(\"../utils/object\");\n\n// --- Constants ---\nvar PROP = '$_bv_windowHandlers_'; // --- Mixin ---\n// @vue/component\n\nvar listenOnWindowMixin = _vue.Vue.extend({\n  beforeCreate: function beforeCreate() {\n    // Declare non-reactive property\n    // Object of arrays, keyed by event name,\n    // where value is an array of handlers\n    this[PROP] = {};\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (_env.IS_BROWSER) {\n      var items = this[PROP]; // Immediately delete this[PROP] to prevent the\n      // listenOn/Off methods from running (which may occur\n      // due to requestAnimationFrame delays)\n\n      delete this[PROP]; // Remove all registered event handlers\n\n      (0, _object.keys)(items).forEach(function (eventName) {\n        var handlers = items[eventName] || [];\n        handlers.forEach(function (handler) {\n          return (0, _events2.eventOff)(window, eventName, handler, _events.EVENT_OPTIONS_NO_CAPTURE);\n        });\n      });\n    }\n  },\n  methods: {\n    listenWindow: function listenWindow(on, eventName, handler) {\n      on ? this.listenOnWindow(eventName, handler) : this.listenOffWindow(eventName, handler);\n    },\n    listenOnWindow: function listenOnWindow(eventName, handler) {\n      if (_env.IS_BROWSER && this[PROP] && (0, _inspect.isString)(eventName) && (0, _inspect.isFunction)(handler)) {\n        this[PROP][eventName] = this[PROP][eventName] || [];\n\n        if (!(0, _array.arrayIncludes)(this[PROP][eventName], handler)) {\n          this[PROP][eventName].push(handler);\n          (0, _events2.eventOn)(window, eventName, handler, _events.EVENT_OPTIONS_NO_CAPTURE);\n        }\n      }\n    },\n    listenOffWindow: function listenOffWindow(eventName, handler) {\n      if (_env.IS_BROWSER && this[PROP] && (0, _inspect.isString)(eventName) && (0, _inspect.isFunction)(handler)) {\n        (0, _events2.eventOff)(window, eventName, handler, _events.EVENT_OPTIONS_NO_CAPTURE);\n        this[PROP][eventName] = (this[PROP][eventName] || []).filter(function (h) {\n          return h !== handler;\n        });\n      }\n    }\n  }\n});\n\nexports.listenOnWindowMixin = listenOnWindowMixin;"},"sourceMaps":null,"error":null,"hash":"98387124e712ec5cf8a788f4f71dbc69","cacheData":{"env":{}}}