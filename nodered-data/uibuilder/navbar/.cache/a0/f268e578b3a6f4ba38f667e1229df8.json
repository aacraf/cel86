{"id":"../node_modules/bootstrap-vue/esm/components/form-checkbox/form-checkbox.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../vue","loc":{"line":9,"column":20,"index":1131},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-checkbox/form-checkbox.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../constants/components","loc":{"line":10,"column":35,"index":1179},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-checkbox/form-checkbox.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/components.js"},{"name":"../../constants/events","loc":{"line":11,"column":59,"index":1268},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-checkbox/form-checkbox.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/events.js"},{"name":"../../constants/props","loc":{"line":12,"column":49,"index":1343},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-checkbox/form-checkbox.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../../utils/inspect","loc":{"line":13,"column":24,"index":1392},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-checkbox/form-checkbox.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../utils/loose-equal","loc":{"line":14,"column":27,"index":1442},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-checkbox/form-checkbox.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/loose-equal.js"},{"name":"../../utils/loose-index-of","loc":{"line":15,"column":29,"index":1498},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-checkbox/form-checkbox.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/loose-index-of.js"},{"name":"../../utils/object","loc":{"line":16,"column":25,"index":1553},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-checkbox/form-checkbox.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../../utils/props","loc":{"line":17,"column":48,"index":1623},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-checkbox/form-checkbox.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"../../mixins/form-radio-check","loc":{"line":18,"column":84,"index":1728},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-checkbox/form-checkbox.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.BFormCheckbox = void 0;\n\nvar _vue = require(\"../../vue\");\n\nvar _components = require(\"../../constants/components\");\n\nvar _events = require(\"../../constants/events\");\n\nvar _props = require(\"../../constants/props\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nvar _looseEqual = require(\"../../utils/loose-equal\");\n\nvar _looseIndexOf = require(\"../../utils/loose-index-of\");\n\nvar _object = require(\"../../utils/object\");\n\nvar _props2 = require(\"../../utils/props\");\n\nvar _formRadioCheck = require(\"../../mixins/form-radio-check\");\n\nvar _objectSpread2;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n// --- Constants ---\nvar MODEL_PROP_NAME_INDETERMINATE = 'indeterminate';\nvar MODEL_EVENT_NAME_INDETERMINATE = _events.MODEL_EVENT_NAME_PREFIX + MODEL_PROP_NAME_INDETERMINATE; // --- Props ---\n\nvar props = (0, _props2.makePropsConfigurable)((0, _object.sortKeys)(_objectSpread(_objectSpread({}, _formRadioCheck.props), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, MODEL_PROP_NAME_INDETERMINATE, (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false)), _defineProperty(_objectSpread2, \"switch\", (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false)), _defineProperty(_objectSpread2, \"uncheckedValue\", (0, _props2.makeProp)(_props.PROP_TYPE_ANY, false)), _defineProperty(_objectSpread2, \"value\", (0, _props2.makeProp)(_props.PROP_TYPE_ANY, true)), _objectSpread2))), _components.NAME_FORM_CHECKBOX); // --- Main component ---\n// @vue/component\n\nexports.props = props;\n\nvar BFormCheckbox = /*#__PURE__*/_vue.Vue.extend({\n  name: _components.NAME_FORM_CHECKBOX,\n  mixins: [_formRadioCheck.formRadioCheckMixin],\n  inject: {\n    bvGroup: {\n      from: 'bvCheckGroup',\n      default: null\n    }\n  },\n  props: props,\n  computed: {\n    isChecked: function isChecked() {\n      var value = this.value,\n          checked = this.computedLocalChecked;\n      return (0, _inspect.isArray)(checked) ? (0, _looseIndexOf.looseIndexOf)(checked, value) > -1 : (0, _looseEqual.looseEqual)(checked, value);\n    },\n    isRadio: function isRadio() {\n      return false;\n    }\n  },\n  watch: _defineProperty({}, MODEL_PROP_NAME_INDETERMINATE, function (newValue, oldValue) {\n    if (!(0, _looseEqual.looseEqual)(newValue, oldValue)) {\n      this.setIndeterminate(newValue);\n    }\n  }),\n  mounted: function mounted() {\n    // Set initial indeterminate state\n    this.setIndeterminate(this[MODEL_PROP_NAME_INDETERMINATE]);\n  },\n  methods: {\n    computedLocalCheckedWatcher: function computedLocalCheckedWatcher(newValue, oldValue) {\n      if (!(0, _looseEqual.looseEqual)(newValue, oldValue)) {\n        this.$emit(_formRadioCheck.MODEL_EVENT_NAME, newValue);\n        var $input = this.$refs.input;\n\n        if ($input) {\n          this.$emit(MODEL_EVENT_NAME_INDETERMINATE, $input.indeterminate);\n        }\n      }\n    },\n    handleChange: function handleChange(_ref) {\n      var _this = this;\n\n      var _ref$target = _ref.target,\n          checked = _ref$target.checked,\n          indeterminate = _ref$target.indeterminate;\n      var value = this.value,\n          uncheckedValue = this.uncheckedValue; // Update `computedLocalChecked`\n\n      var localChecked = this.computedLocalChecked;\n\n      if ((0, _inspect.isArray)(localChecked)) {\n        var index = (0, _looseIndexOf.looseIndexOf)(localChecked, value);\n\n        if (checked && index < 0) {\n          // Add value to array\n          localChecked = localChecked.concat(value);\n        } else if (!checked && index > -1) {\n          // Remove value from array\n          localChecked = localChecked.slice(0, index).concat(localChecked.slice(index + 1));\n        }\n      } else {\n        localChecked = checked ? value : uncheckedValue;\n      }\n\n      this.computedLocalChecked = localChecked; // Fire events in a `$nextTick()` to ensure the `v-model` is updated\n\n      this.$nextTick(function () {\n        // Change is only emitted on user interaction\n        _this.$emit(_events.EVENT_NAME_CHANGE, localChecked); // If this is a child of a group, we emit a change event on it as well\n\n\n        if (_this.isGroup) {\n          _this.bvGroup.$emit(_events.EVENT_NAME_CHANGE, localChecked);\n        }\n\n        _this.$emit(MODEL_EVENT_NAME_INDETERMINATE, indeterminate);\n      });\n    },\n    setIndeterminate: function setIndeterminate(state) {\n      // Indeterminate only supported in single checkbox mode\n      if ((0, _inspect.isArray)(this.computedLocalChecked)) {\n        state = false;\n      }\n\n      var $input = this.$refs.input;\n\n      if ($input) {\n        $input.indeterminate = state; // Emit update event to prop\n\n        this.$emit(MODEL_EVENT_NAME_INDETERMINATE, state);\n      }\n    }\n  }\n});\n\nexports.BFormCheckbox = BFormCheckbox;"},"sourceMaps":null,"error":null,"hash":"c11a3032c1b65e3df61ef0b02c8742eb","cacheData":{"env":{}}}