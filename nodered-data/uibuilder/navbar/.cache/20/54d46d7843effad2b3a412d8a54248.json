{"id":"../node_modules/bootstrap-vue/esm/components/table/helpers/normalize-fields.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../../utils/identity","loc":{"line":1,"column":25,"index":25},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/normalize-fields.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/identity.js"},{"name":"../../../utils/inspect","loc":{"line":2,"column":56,"index":108},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/normalize-fields.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../../utils/object","loc":{"line":3,"column":28,"index":162},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/normalize-fields.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../../../utils/string","loc":{"line":4,"column":26,"index":213},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/normalize-fields.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/string.js"},{"name":"./constants","loc":{"line":5,"column":35,"index":273},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/normalize-fields.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/constants.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeFields = void 0;\n\nvar _identity = require(\"../../../utils/identity\");\n\nvar _inspect = require(\"../../../utils/inspect\");\n\nvar _object = require(\"../../../utils/object\");\n\nvar _string = require(\"../../../utils/string\");\n\nvar _constants = require(\"./constants\");\n\n// Private function to massage field entry into common object format\nvar processField = function processField(key, value) {\n  var field = null;\n\n  if ((0, _inspect.isString)(value)) {\n    // Label shortcut\n    field = {\n      key: key,\n      label: value\n    };\n  } else if ((0, _inspect.isFunction)(value)) {\n    // Formatter shortcut\n    field = {\n      key: key,\n      formatter: value\n    };\n  } else if ((0, _inspect.isObject)(value)) {\n    field = (0, _object.clone)(value);\n    field.key = field.key || key;\n  } else if (value !== false) {\n    // Fallback to just key\n\n    /* istanbul ignore next */\n    field = {\n      key: key\n    };\n  }\n\n  return field;\n}; // We normalize fields into an array of objects\n// [ { key:..., label:..., ...}, {...}, ..., {..}]\n\n\nvar normalizeFields = function normalizeFields(origFields, items) {\n  var fields = [];\n\n  if ((0, _inspect.isArray)(origFields)) {\n    // Normalize array Form\n    origFields.filter(_identity.identity).forEach(function (f) {\n      if ((0, _inspect.isString)(f)) {\n        fields.push({\n          key: f,\n          label: (0, _string.startCase)(f)\n        });\n      } else if ((0, _inspect.isObject)(f) && f.key && (0, _inspect.isString)(f.key)) {\n        // Full object definition. We use assign so that we don't mutate the original\n        fields.push((0, _object.clone)(f));\n      } else if ((0, _inspect.isObject)(f) && (0, _object.keys)(f).length === 1) {\n        // Shortcut object (i.e. { 'foo_bar': 'This is Foo Bar' }\n        var key = (0, _object.keys)(f)[0];\n        var field = processField(key, f[key]);\n\n        if (field) {\n          fields.push(field);\n        }\n      }\n    });\n  } // If no field provided, take a sample from first record (if exits)\n\n\n  if (fields.length === 0 && (0, _inspect.isArray)(items) && items.length > 0) {\n    var sample = items[0];\n    (0, _object.keys)(sample).forEach(function (k) {\n      if (!_constants.IGNORED_FIELD_KEYS[k]) {\n        fields.push({\n          key: k,\n          label: (0, _string.startCase)(k)\n        });\n      }\n    });\n  } // Ensure we have a unique array of fields and that they have String labels\n\n\n  var memo = {};\n  return fields.filter(function (f) {\n    if (!memo[f.key]) {\n      memo[f.key] = true;\n      f.label = (0, _inspect.isString)(f.label) ? f.label : (0, _string.startCase)(f.key);\n      return true;\n    }\n\n    return false;\n  });\n};\n\nexports.normalizeFields = normalizeFields;"},"sourceMaps":null,"error":null,"hash":"1d7f570644cccc942e183d5a4f78de1d","cacheData":{"env":{}}}