{"id":"../node_modules/bootstrap-vue/esm/components/transporter/transporter.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../vue","loc":{"line":1,"column":20,"index":20},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/transporter/transporter.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../constants/components","loc":{"line":2,"column":58,"index":91},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/transporter/transporter.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/components.js"},{"name":"../../constants/env","loc":{"line":3,"column":27,"index":148},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/transporter/transporter.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/env.js"},{"name":"../../constants/props","loc":{"line":4,"column":78,"index":249},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/transporter/transporter.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../../constants/safe-types","loc":{"line":5,"column":28,"index":302},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/transporter/transporter.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/safe-types.js"},{"name":"../../utils/array","loc":{"line":6,"column":23,"index":355},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/transporter/transporter.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/array.js"},{"name":"../../utils/dom","loc":{"line":7,"column":35,"index":411},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/transporter/transporter.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js"},{"name":"../../utils/identity","loc":{"line":8,"column":25,"index":455},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/transporter/transporter.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/identity.js"},{"name":"../../utils/inspect","loc":{"line":9,"column":37,"index":516},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/transporter/transporter.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../mixins/normalize-slot","loc":{"line":10,"column":35,"index":574},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/transporter/transporter.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/normalize-slot.js"},{"name":"../../utils/props","loc":{"line":11,"column":25,"index":630},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/transporter/transporter.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.BVTransporter = void 0;\n\nvar _vue = require(\"../../vue\");\n\nvar _components = require(\"../../constants/components\");\n\nvar _env = require(\"../../constants/env\");\n\nvar _props = require(\"../../constants/props\");\n\nvar _safeTypes = require(\"../../constants/safe-types\");\n\nvar _array = require(\"../../utils/array\");\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _identity = require(\"../../utils/identity\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nvar _normalizeSlot = require(\"../../mixins/normalize-slot\");\n\nvar _props2 = require(\"../../utils/props\");\n\n// --- Helper components ---\n// BVTransporter/BVTransporterTarget:\n//\n// Single root node portaling of content, which retains parent/child hierarchy\n// Unlike Portal-Vue where portaled content is no longer a descendent of its\n// intended parent components\n//\n// Private components for use by Tooltips, Popovers and Modals\n//\n// Based on vue-simple-portal\n// https://github.com/LinusBorg/vue-simple-portal\n// Transporter target used by BVTransporter\n// Supports only a single root element\n// @vue/component\nvar BVTransporterTarget = /*#__PURE__*/_vue.Vue.extend({\n  // As an abstract component, it doesn't appear in the $parent chain of\n  // components, which means the next parent of any component rendered inside\n  // of this one will be the parent from which is was portal'd\n  abstract: true,\n  name: _components.NAME_TRANSPORTER_TARGET,\n  props: {\n    // Even though we only support a single root element,\n    // VNodes are always passed as an array\n    nodes: (0, _props2.makeProp)(_props.PROP_TYPE_ARRAY_FUNCTION)\n  },\n  data: function data(vm) {\n    return {\n      updatedNodes: vm.nodes\n    };\n  },\n  destroyed: function destroyed() {\n    (0, _dom.removeNode)(this.$el);\n  },\n  render: function render(h) {\n    var updatedNodes = this.updatedNodes;\n    var $nodes = (0, _inspect.isFunction)(updatedNodes) ? updatedNodes({}) : updatedNodes;\n    $nodes = (0, _array.concat)($nodes).filter(_identity.identity);\n\n    if ($nodes && $nodes.length > 0 && !$nodes[0].text) {\n      return $nodes[0];\n    }\n    /* istanbul ignore next */\n\n\n    return h();\n  }\n}); // --- Props ---\n\n\nvar props = {\n  // String: CSS selector,\n  // HTMLElement: Element reference\n  // Mainly needed for tooltips/popovers inside modals\n  container: (0, _props2.makeProp)([_safeTypes.HTMLElement, _props.PROP_TYPE_STRING], 'body'),\n  disabled: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  // This should be set to match the root element type\n  tag: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'div')\n}; // --- Main component ---\n// @vue/component\n\nexports.props = props;\n\nvar BVTransporter = /*#__PURE__*/_vue.Vue.extend({\n  name: _components.NAME_TRANSPORTER,\n  mixins: [_normalizeSlot.normalizeSlotMixin],\n  props: props,\n  watch: {\n    disabled: {\n      immediate: true,\n      handler: function handler(disabled) {\n        disabled ? this.unmountTarget() : this.$nextTick(this.mountTarget);\n      }\n    }\n  },\n  created: function created() {\n    // Create private non-reactive props\n    this.$_defaultFn = null;\n    this.$_target = null;\n  },\n  beforeMount: function beforeMount() {\n    this.mountTarget();\n  },\n  updated: function updated() {\n    // We need to make sure that all children have completed updating\n    // before rendering in the target\n    // `vue-simple-portal` has the this in a `$nextTick()`,\n    // while `portal-vue` doesn't\n    // Just trying to see if the `$nextTick()` delay is required or not\n    // Since all slots in Vue 2.6.x are always functions\n    this.updateTarget();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.unmountTarget();\n    this.$_defaultFn = null;\n  },\n  methods: {\n    // Get the element which the target should be appended to\n    getContainer: function getContainer() {\n      /* istanbul ignore else */\n      if (_env.IS_BROWSER) {\n        var container = this.container;\n        return (0, _inspect.isString)(container) ? (0, _dom.select)(container) : container;\n      } else {\n        return null;\n      }\n    },\n    // Mount the target\n    mountTarget: function mountTarget() {\n      if (!this.$_target) {\n        var $container = this.getContainer();\n\n        if ($container) {\n          var $el = document.createElement('div');\n          $container.appendChild($el);\n          this.$_target = new BVTransporterTarget({\n            el: $el,\n            parent: this,\n            propsData: {\n              // Initial nodes to be rendered\n              nodes: (0, _array.concat)(this.normalizeSlot())\n            }\n          });\n        }\n      }\n    },\n    // Update the content of the target\n    updateTarget: function updateTarget() {\n      if (_env.IS_BROWSER && this.$_target) {\n        var defaultFn = this.$scopedSlots.default;\n\n        if (!this.disabled) {\n          /* istanbul ignore else: only applicable in Vue 2.5.x */\n          if (defaultFn && this.$_defaultFn !== defaultFn) {\n            // We only update the target component if the scoped slot\n            // function is a fresh one. The new slot syntax (since Vue 2.6)\n            // can cache unchanged slot functions and we want to respect that here\n            this.$_target.updatedNodes = defaultFn;\n          } else if (!defaultFn) {\n            // We also need to be back compatible with non-scoped default slot (i.e. 2.5.x)\n            this.$_target.updatedNodes = this.$slots.default;\n          }\n        } // Update the scoped slot function cache\n\n\n        this.$_defaultFn = defaultFn;\n      }\n    },\n    // Unmount the target\n    unmountTarget: function unmountTarget() {\n      this.$_target && this.$_target.$destroy();\n      this.$_target = null;\n    }\n  },\n  render: function render(h) {\n    // This component has no root element, so only a single VNode is allowed\n    if (this.disabled) {\n      var $nodes = (0, _array.concat)(this.normalizeSlot()).filter(_identity.identity);\n\n      if ($nodes.length > 0 && !$nodes[0].text) {\n        return $nodes[0];\n      }\n    }\n\n    return h();\n  }\n});\n\nexports.BVTransporter = BVTransporter;"},"sourceMaps":null,"error":null,"hash":"2b024be0a2e25e3f6563fa5f6297ab39","cacheData":{"env":{}}}