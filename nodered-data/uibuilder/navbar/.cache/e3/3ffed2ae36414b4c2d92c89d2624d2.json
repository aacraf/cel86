{"id":"../node_modules/bootstrap-vue/esm/utils/dom.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../constants/env","loc":{"line":1,"column":33,"index":33},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/env.js"},{"name":"../constants/safe-types","loc":{"line":2,"column":24,"index":77},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/safe-types.js"},{"name":"./array","loc":{"line":3,"column":34,"index":138},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/array.js"},{"name":"./inspect","loc":{"line":4,"column":35,"index":184},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"./number","loc":{"line":5,"column":24,"index":221},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/number.js"},{"name":"./string","loc":{"line":6,"column":25,"index":258},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/string.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setStyle = exports.setAttr = exports.selectAll = exports.select = exports.requestAF = exports.removeStyle = exports.removeNode = exports.removeClass = exports.removeAttr = exports.reflow = exports.position = exports.offset = exports.matchesEl = exports.matches = exports.isVisible = exports.isTag = exports.isElement = exports.isDisabled = exports.isActiveElement = exports.hasClass = exports.hasAttr = exports.getTabables = exports.getStyle = exports.getSel = exports.getCS = exports.getById = exports.getBCR = exports.getAttr = exports.getActiveElement = exports.contains = exports.closestEl = exports.closest = exports.attemptFocus = exports.attemptBlur = exports.addClass = exports.MutationObs = void 0;\n\nvar _env = require(\"../constants/env\");\n\nvar _safeTypes = require(\"../constants/safe-types\");\n\nvar _array = require(\"./array\");\n\nvar _inspect = require(\"./inspect\");\n\nvar _number = require(\"./number\");\n\nvar _string = require(\"./string\");\n\n// --- Constants ---\nvar ELEMENT_PROTO = _safeTypes.Element.prototype;\nvar TABABLE_SELECTOR = ['button', '[href]:not(.disabled)', 'input', 'select', 'textarea', '[tabindex]', '[contenteditable]'].map(function (s) {\n  return \"\".concat(s, \":not(:disabled):not([disabled])\");\n}).join(', '); // --- Normalization utils ---\n// See: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\n/* istanbul ignore next */\n\nvar matchesEl = ELEMENT_PROTO.matches || ELEMENT_PROTO.msMatchesSelector || ELEMENT_PROTO.webkitMatchesSelector; // See: https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n\n/* istanbul ignore next */\n\nexports.matchesEl = matchesEl;\n\nvar closestEl = ELEMENT_PROTO.closest || function (sel) {\n  var el = this;\n\n  do {\n    // Use our \"patched\" matches function\n    if (matches(el, sel)) {\n      return el;\n    }\n\n    el = el.parentElement || el.parentNode;\n  } while (!(0, _inspect.isNull)(el) && el.nodeType === Node.ELEMENT_NODE);\n\n  return null;\n}; // `requestAnimationFrame()` convenience method\n\n/* istanbul ignore next: JSDOM always returns the first option */\n\n\nexports.closestEl = closestEl;\n\nvar requestAF = _env.WINDOW.requestAnimationFrame || _env.WINDOW.webkitRequestAnimationFrame || _env.WINDOW.mozRequestAnimationFrame || _env.WINDOW.msRequestAnimationFrame || _env.WINDOW.oRequestAnimationFrame || // Fallback, but not a true polyfill\n// Only needed for Opera Mini\n\n/* istanbul ignore next */\nfunction (cb) {\n  return setTimeout(cb, 16);\n};\n\nexports.requestAF = requestAF;\nvar MutationObs = _env.WINDOW.MutationObserver || _env.WINDOW.WebKitMutationObserver || _env.WINDOW.MozMutationObserver || null; // --- Utils ---\n// Remove a node from DOM\n\nexports.MutationObs = MutationObs;\n\nvar removeNode = function removeNode(el) {\n  return el && el.parentNode && el.parentNode.removeChild(el);\n}; // Determine if an element is an HTML element\n\n\nexports.removeNode = removeNode;\n\nvar isElement = function isElement(el) {\n  return !!(el && el.nodeType === Node.ELEMENT_NODE);\n}; // Get the currently active HTML element\n\n\nexports.isElement = isElement;\n\nvar getActiveElement = function getActiveElement() {\n  var excludes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var activeElement = _env.DOCUMENT.activeElement;\n  return activeElement && !excludes.some(function (el) {\n    return el === activeElement;\n  }) ? activeElement : null;\n}; // Returns `true` if a tag's name equals `name`\n\n\nexports.getActiveElement = getActiveElement;\n\nvar isTag = function isTag(tag, name) {\n  return (0, _string.toString)(tag).toLowerCase() === (0, _string.toString)(name).toLowerCase();\n}; // Determine if an HTML element is the currently active element\n\n\nexports.isTag = isTag;\n\nvar isActiveElement = function isActiveElement(el) {\n  return isElement(el) && el === getActiveElement();\n}; // Determine if an HTML element is visible - Faster than CSS check\n\n\nexports.isActiveElement = isActiveElement;\n\nvar isVisible = function isVisible(el) {\n  if (!isElement(el) || !el.parentNode || !contains(_env.DOCUMENT.body, el)) {\n    // Note this can fail for shadow dom elements since they\n    // are not a direct descendant of document.body\n    return false;\n  }\n\n  if (getStyle(el, 'display') === 'none') {\n    // We do this check to help with vue-test-utils when using v-show\n\n    /* istanbul ignore next */\n    return false;\n  } // All browsers support getBoundingClientRect(), except JSDOM as it returns all 0's for values :(\n  // So any tests that need isVisible will fail in JSDOM\n  // Except when we override the getBCR prototype in some tests\n\n\n  var bcr = getBCR(el);\n  return !!(bcr && bcr.height > 0 && bcr.width > 0);\n}; // Determine if an element is disabled\n\n\nexports.isVisible = isVisible;\n\nvar isDisabled = function isDisabled(el) {\n  return !isElement(el) || el.disabled || hasAttr(el, 'disabled') || hasClass(el, 'disabled');\n}; // Cause/wait-for an element to reflow its content (adjusting its height/width)\n\n\nexports.isDisabled = isDisabled;\n\nvar reflow = function reflow(el) {\n  // Requesting an elements offsetHight will trigger a reflow of the element content\n\n  /* istanbul ignore next: reflow doesn't happen in JSDOM */\n  return isElement(el) && el.offsetHeight;\n}; // Select all elements matching selector. Returns `[]` if none found\n\n\nexports.reflow = reflow;\n\nvar selectAll = function selectAll(selector, root) {\n  return (0, _array.from)((isElement(root) ? root : _env.DOCUMENT).querySelectorAll(selector));\n}; // Select a single element, returns `null` if not found\n\n\nexports.selectAll = selectAll;\n\nvar select = function select(selector, root) {\n  return (isElement(root) ? root : _env.DOCUMENT).querySelector(selector) || null;\n}; // Determine if an element matches a selector\n\n\nexports.select = select;\n\nvar matches = function matches(el, selector) {\n  return isElement(el) ? matchesEl.call(el, selector) : false;\n}; // Finds closest element matching selector. Returns `null` if not found\n\n\nexports.matches = matches;\n\nvar closest = function closest(selector, root) {\n  var includeRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!isElement(root)) {\n    return null;\n  }\n\n  var el = closestEl.call(root, selector); // Native closest behaviour when `includeRoot` is truthy,\n  // else emulate jQuery closest and return `null` if match is\n  // the passed in root element when `includeRoot` is falsey\n\n  return includeRoot ? el : el === root ? null : el;\n}; // Returns true if the parent element contains the child element\n\n\nexports.closest = closest;\n\nvar contains = function contains(parent, child) {\n  return parent && (0, _inspect.isFunction)(parent.contains) ? parent.contains(child) : false;\n}; // Get an element given an ID\n\n\nexports.contains = contains;\n\nvar getById = function getById(id) {\n  return _env.DOCUMENT.getElementById(/^#/.test(id) ? id.slice(1) : id) || null;\n}; // Add a class to an element\n\n\nexports.getById = getById;\n\nvar addClass = function addClass(el, className) {\n  // We are checking for `el.classList` existence here since IE 11\n  // returns `undefined` for some elements (e.g. SVG elements)\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713\n  if (className && isElement(el) && el.classList) {\n    el.classList.add(className);\n  }\n}; // Remove a class from an element\n\n\nexports.addClass = addClass;\n\nvar removeClass = function removeClass(el, className) {\n  // We are checking for `el.classList` existence here since IE 11\n  // returns `undefined` for some elements (e.g. SVG elements)\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713\n  if (className && isElement(el) && el.classList) {\n    el.classList.remove(className);\n  }\n}; // Test if an element has a class\n\n\nexports.removeClass = removeClass;\n\nvar hasClass = function hasClass(el, className) {\n  // We are checking for `el.classList` existence here since IE 11\n  // returns `undefined` for some elements (e.g. SVG elements)\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713\n  if (className && isElement(el) && el.classList) {\n    return el.classList.contains(className);\n  }\n\n  return false;\n}; // Set an attribute on an element\n\n\nexports.hasClass = hasClass;\n\nvar setAttr = function setAttr(el, attr, value) {\n  if (attr && isElement(el)) {\n    el.setAttribute(attr, value);\n  }\n}; // Remove an attribute from an element\n\n\nexports.setAttr = setAttr;\n\nvar removeAttr = function removeAttr(el, attr) {\n  if (attr && isElement(el)) {\n    el.removeAttribute(attr);\n  }\n}; // Get an attribute value from an element\n// Returns `null` if not found\n\n\nexports.removeAttr = removeAttr;\n\nvar getAttr = function getAttr(el, attr) {\n  return attr && isElement(el) ? el.getAttribute(attr) : null;\n}; // Determine if an attribute exists on an element\n// Returns `true` or `false`, or `null` if element not found\n\n\nexports.getAttr = getAttr;\n\nvar hasAttr = function hasAttr(el, attr) {\n  return attr && isElement(el) ? el.hasAttribute(attr) : null;\n}; // Set an style property on an element\n\n\nexports.hasAttr = hasAttr;\n\nvar setStyle = function setStyle(el, prop, value) {\n  if (prop && isElement(el)) {\n    el.style[prop] = value;\n  }\n}; // Remove an style property from an element\n\n\nexports.setStyle = setStyle;\n\nvar removeStyle = function removeStyle(el, prop) {\n  if (prop && isElement(el)) {\n    el.style[prop] = '';\n  }\n}; // Get an style property value from an element\n// Returns `null` if not found\n\n\nexports.removeStyle = removeStyle;\n\nvar getStyle = function getStyle(el, prop) {\n  return prop && isElement(el) ? el.style[prop] || null : null;\n}; // Return the Bounding Client Rect of an element\n// Returns `null` if not an element\n\n/* istanbul ignore next: getBoundingClientRect() doesn't work in JSDOM */\n\n\nexports.getStyle = getStyle;\n\nvar getBCR = function getBCR(el) {\n  return isElement(el) ? el.getBoundingClientRect() : null;\n}; // Get computed style object for an element\n\n/* istanbul ignore next: getComputedStyle() doesn't work in JSDOM */\n\n\nexports.getBCR = getBCR;\n\nvar getCS = function getCS(el) {\n  var getComputedStyle = _env.WINDOW.getComputedStyle;\n  return getComputedStyle && isElement(el) ? getComputedStyle(el) : {};\n}; // Returns a `Selection` object representing the range of text selected\n// Returns `null` if no window support is given\n\n/* istanbul ignore next: getSelection() doesn't work in JSDOM */\n\n\nexports.getCS = getCS;\n\nvar getSel = function getSel() {\n  var getSelection = _env.WINDOW.getSelection;\n  return getSelection ? _env.WINDOW.getSelection() : null;\n}; // Return an element's offset with respect to document element\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.offset\n\n\nexports.getSel = getSel;\n\nvar offset = function offset(el)\n/* istanbul ignore next: getBoundingClientRect(), getClientRects() doesn't work in JSDOM */\n{\n  var _offset = {\n    top: 0,\n    left: 0\n  };\n\n  if (!isElement(el) || el.getClientRects().length === 0) {\n    return _offset;\n  }\n\n  var bcr = getBCR(el);\n\n  if (bcr) {\n    var win = el.ownerDocument.defaultView;\n    _offset.top = bcr.top + win.pageYOffset;\n    _offset.left = bcr.left + win.pageXOffset;\n  }\n\n  return _offset;\n}; // Return an element's offset with respect to to its offsetParent\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.position\n\n\nexports.offset = offset;\n\nvar position = function position(el)\n/* istanbul ignore next: getBoundingClientRect() doesn't work in JSDOM */\n{\n  var _offset = {\n    top: 0,\n    left: 0\n  };\n\n  if (!isElement(el)) {\n    return _offset;\n  }\n\n  var parentOffset = {\n    top: 0,\n    left: 0\n  };\n  var elStyles = getCS(el);\n\n  if (elStyles.position === 'fixed') {\n    _offset = getBCR(el) || _offset;\n  } else {\n    _offset = offset(el);\n    var doc = el.ownerDocument;\n    var offsetParent = el.offsetParent || doc.documentElement;\n\n    while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && getCS(offsetParent).position === 'static') {\n      offsetParent = offsetParent.parentNode;\n    }\n\n    if (offsetParent && offsetParent !== el && offsetParent.nodeType === Node.ELEMENT_NODE) {\n      parentOffset = offset(offsetParent);\n      var offsetParentStyles = getCS(offsetParent);\n      parentOffset.top += (0, _number.toFloat)(offsetParentStyles.borderTopWidth, 0);\n      parentOffset.left += (0, _number.toFloat)(offsetParentStyles.borderLeftWidth, 0);\n    }\n  }\n\n  return {\n    top: _offset.top - parentOffset.top - (0, _number.toFloat)(elStyles.marginTop, 0),\n    left: _offset.left - parentOffset.left - (0, _number.toFloat)(elStyles.marginLeft, 0)\n  };\n}; // Find all tabable elements in the given element\n// Assumes users have not used `tabindex` > `0` on elements\n\n\nexports.position = position;\n\nvar getTabables = function getTabables() {\n  var rootEl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n  return selectAll(TABABLE_SELECTOR, rootEl).filter(isVisible).filter(function (el) {\n    return el.tabIndex > -1 && !el.disabled;\n  });\n}; // Attempt to focus an element, and return `true` if successful\n\n\nexports.getTabables = getTabables;\n\nvar attemptFocus = function attemptFocus(el) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  try {\n    el.focus(options);\n  } catch (_unused) {}\n\n  return isActiveElement(el);\n}; // Attempt to blur an element, and return `true` if successful\n\n\nexports.attemptFocus = attemptFocus;\n\nvar attemptBlur = function attemptBlur(el) {\n  try {\n    el.blur();\n  } catch (_unused2) {}\n\n  return !isActiveElement(el);\n};\n\nexports.attemptBlur = attemptBlur;"},"sourceMaps":null,"error":null,"hash":"49071015342793ffaac756ebecb507a2","cacheData":{"env":{}}}