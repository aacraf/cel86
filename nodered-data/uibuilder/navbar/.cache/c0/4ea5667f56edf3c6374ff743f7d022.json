{"id":"../node_modules/bootstrap-vue/esm/components/collapse/collapse.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../vue","loc":{"line":9,"column":20,"index":1123},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../constants/components","loc":{"line":10,"column":30,"index":1166},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/components.js"},{"name":"../../constants/classes","loc":{"line":11,"column":32,"index":1228},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/classes.js"},{"name":"../../constants/env","loc":{"line":12,"column":27,"index":1282},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/env.js"},{"name":"../../constants/events","loc":{"line":13,"column":112,"index":1417},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/events.js"},{"name":"../../constants/props","loc":{"line":14,"column":52,"index":1495},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../../constants/slots","loc":{"line":15,"column":34,"index":1554},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/slots.js"},{"name":"../../utils/dom","loc":{"line":16,"column":73,"index":1652},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js"},{"name":"../../utils/events","loc":{"line":17,"column":69,"index":1740},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js"},{"name":"../../utils/model","loc":{"line":18,"column":31,"index":1793},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/model.js"},{"name":"../../utils/object","loc":{"line":19,"column":25,"index":1839},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../../utils/props","loc":{"line":20,"column":48,"index":1909},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"../../mixins/id","loc":{"line":21,"column":42,"index":1972},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/id.js"},{"name":"../../mixins/listen-on-root","loc":{"line":22,"column":34,"index":2025},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/listen-on-root.js"},{"name":"../../mixins/normalize-slot","loc":{"line":23,"column":35,"index":2091},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/normalize-slot.js"},{"name":"./helpers/bv-collapse","loc":{"line":24,"column":27,"index":2149},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/collapse.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/collapse/helpers/bv-collapse.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.BCollapse = void 0;\n\nvar _vue = require(\"../../vue\");\n\nvar _components = require(\"../../constants/components\");\n\nvar _classes = require(\"../../constants/classes\");\n\nvar _env = require(\"../../constants/env\");\n\nvar _events = require(\"../../constants/events\");\n\nvar _props = require(\"../../constants/props\");\n\nvar _slots = require(\"../../constants/slots\");\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _events2 = require(\"../../utils/events\");\n\nvar _model = require(\"../../utils/model\");\n\nvar _object = require(\"../../utils/object\");\n\nvar _props2 = require(\"../../utils/props\");\n\nvar _id = require(\"../../mixins/id\");\n\nvar _listenOnRoot = require(\"../../mixins/listen-on-root\");\n\nvar _normalizeSlot = require(\"../../mixins/normalize-slot\");\n\nvar _bvCollapse = require(\"./helpers/bv-collapse\");\n\nvar _watch;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n// --- Constants ---\nvar ROOT_ACTION_EVENT_NAME_TOGGLE = (0, _events2.getRootActionEventName)(_components.NAME_COLLAPSE, 'toggle');\nvar ROOT_ACTION_EVENT_NAME_REQUEST_STATE = (0, _events2.getRootActionEventName)(_components.NAME_COLLAPSE, 'request-state');\nvar ROOT_EVENT_NAME_ACCORDION = (0, _events2.getRootEventName)(_components.NAME_COLLAPSE, 'accordion');\nvar ROOT_EVENT_NAME_STATE = (0, _events2.getRootEventName)(_components.NAME_COLLAPSE, 'state');\nvar ROOT_EVENT_NAME_SYNC_STATE = (0, _events2.getRootEventName)(_components.NAME_COLLAPSE, 'sync-state');\n\nvar _makeModelMixin = (0, _model.makeModelMixin)('visible', {\n  type: _props.PROP_TYPE_BOOLEAN,\n  defaultValue: false\n}),\n    modelMixin = _makeModelMixin.mixin,\n    modelProps = _makeModelMixin.props,\n    MODEL_PROP_NAME = _makeModelMixin.prop,\n    MODEL_EVENT_NAME = _makeModelMixin.event; // --- Props ---\n\n\nvar props = (0, _props2.makePropsConfigurable)((0, _object.sortKeys)(_objectSpread(_objectSpread(_objectSpread({}, _id.props), modelProps), {}, {\n  // If `true` (and `visible` is `true` on mount), animate initially visible\n  accordion: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  appear: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  isNav: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  tag: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'div')\n})), _components.NAME_COLLAPSE); // --- Main component ---\n// @vue/component\n\nexports.props = props;\n\nvar BCollapse = /*#__PURE__*/_vue.Vue.extend({\n  name: _components.NAME_COLLAPSE,\n  mixins: [_id.idMixin, modelMixin, _normalizeSlot.normalizeSlotMixin, _listenOnRoot.listenOnRootMixin],\n  props: props,\n  data: function data() {\n    return {\n      show: this[MODEL_PROP_NAME],\n      transitioning: false\n    };\n  },\n  computed: {\n    classObject: function classObject() {\n      var transitioning = this.transitioning;\n      return {\n        'navbar-collapse': this.isNav,\n        collapse: !transitioning,\n        show: this.show && !transitioning\n      };\n    },\n    slotScope: function slotScope() {\n      var _this = this;\n\n      return {\n        visible: this.show,\n        close: function close() {\n          _this.show = false;\n        }\n      };\n    }\n  },\n  watch: (_watch = {}, _defineProperty(_watch, MODEL_PROP_NAME, function (newValue) {\n    if (newValue !== this.show) {\n      this.show = newValue;\n    }\n  }), _defineProperty(_watch, \"show\", function show(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      this.emitState();\n    }\n  }), _watch),\n  created: function created() {\n    this.show = this[MODEL_PROP_NAME];\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    this.show = this[MODEL_PROP_NAME]; // Listen for toggle events to open/close us\n\n    this.listenOnRoot(ROOT_ACTION_EVENT_NAME_TOGGLE, this.handleToggleEvt); // Listen to other collapses for accordion events\n\n    this.listenOnRoot(ROOT_EVENT_NAME_ACCORDION, this.handleAccordionEvt);\n\n    if (this.isNav) {\n      // Set up handlers\n      this.setWindowEvents(true);\n      this.handleResize();\n    }\n\n    this.$nextTick(function () {\n      _this2.emitState();\n    }); // Listen for \"Sync state\" requests from `v-b-toggle`\n\n    this.listenOnRoot(ROOT_ACTION_EVENT_NAME_REQUEST_STATE, function (id) {\n      if (id === _this2.safeId()) {\n        _this2.$nextTick(_this2.emitSync);\n      }\n    });\n  },\n  updated: function updated() {\n    // Emit a private event every time this component updates to ensure\n    // the toggle button is in sync with the collapse's state\n    // It is emitted regardless if the visible state changes\n    this.emitSync();\n  },\n\n  /* istanbul ignore next */\n  deactivated: function deactivated() {\n    if (this.isNav) {\n      this.setWindowEvents(false);\n    }\n  },\n\n  /* istanbul ignore next */\n  activated: function activated() {\n    if (this.isNav) {\n      this.setWindowEvents(true);\n    }\n\n    this.emitSync();\n  },\n  beforeDestroy: function beforeDestroy() {\n    // Trigger state emit if needed\n    this.show = false;\n\n    if (this.isNav && _env.IS_BROWSER) {\n      this.setWindowEvents(false);\n    }\n  },\n  methods: {\n    setWindowEvents: function setWindowEvents(on) {\n      (0, _events2.eventOnOff)(on, window, 'resize', this.handleResize, _events.EVENT_OPTIONS_NO_CAPTURE);\n      (0, _events2.eventOnOff)(on, window, 'orientationchange', this.handleResize, _events.EVENT_OPTIONS_NO_CAPTURE);\n    },\n    toggle: function toggle() {\n      this.show = !this.show;\n    },\n    onEnter: function onEnter() {\n      this.transitioning = true; // This should be moved out so we can add cancellable events\n\n      this.$emit(_events.EVENT_NAME_SHOW);\n    },\n    onAfterEnter: function onAfterEnter() {\n      this.transitioning = false;\n      this.$emit(_events.EVENT_NAME_SHOWN);\n    },\n    onLeave: function onLeave() {\n      this.transitioning = true; // This should be moved out so we can add cancellable events\n\n      this.$emit(_events.EVENT_NAME_HIDE);\n    },\n    onAfterLeave: function onAfterLeave() {\n      this.transitioning = false;\n      this.$emit(_events.EVENT_NAME_HIDDEN);\n    },\n    emitState: function emitState() {\n      var show = this.show,\n          accordion = this.accordion;\n      var id = this.safeId();\n      this.$emit(MODEL_EVENT_NAME, show); // Let `v-b-toggle` know the state of this collapse\n\n      this.emitOnRoot(ROOT_EVENT_NAME_STATE, id, show);\n\n      if (accordion && show) {\n        // Tell the other collapses in this accordion to close\n        this.emitOnRoot(ROOT_EVENT_NAME_ACCORDION, id, accordion);\n      }\n    },\n    emitSync: function emitSync() {\n      // Emit a private event every time this component updates to ensure\n      // the toggle button is in sync with the collapse's state\n      // It is emitted regardless if the visible state changes\n      this.emitOnRoot(ROOT_EVENT_NAME_SYNC_STATE, this.safeId(), this.show);\n    },\n    checkDisplayBlock: function checkDisplayBlock() {\n      // Check to see if the collapse has `display: block !important` set\n      // We can't set `display: none` directly on `this.$el`, as it would\n      // trigger a new transition to start (or cancel a current one)\n      var $el = this.$el;\n      var restore = (0, _dom.hasClass)($el, _classes.CLASS_NAME_SHOW);\n      (0, _dom.removeClass)($el, _classes.CLASS_NAME_SHOW);\n      var isBlock = (0, _dom.getCS)($el).display === 'block';\n\n      if (restore) {\n        (0, _dom.addClass)($el, _classes.CLASS_NAME_SHOW);\n      }\n\n      return isBlock;\n    },\n    clickHandler: function clickHandler(event) {\n      var el = event.target; // If we are in a nav/navbar, close the collapse when non-disabled link clicked\n\n      /* istanbul ignore next: can't test `getComputedStyle()` in JSDOM */\n\n      if (!this.isNav || !el || (0, _dom.getCS)(this.$el).display !== 'block') {\n        return;\n      } // Only close the collapse if it is not forced to be `display: block !important`\n\n\n      if (((0, _dom.matches)(el, '.nav-link,.dropdown-item') || (0, _dom.closest)('.nav-link,.dropdown-item', el)) && !this.checkDisplayBlock()) {\n        this.show = false;\n      }\n    },\n    handleToggleEvt: function handleToggleEvt(id) {\n      if (id === this.safeId()) {\n        this.toggle();\n      }\n    },\n    handleAccordionEvt: function handleAccordionEvt(openedId, openAccordion) {\n      var accordion = this.accordion,\n          show = this.show;\n\n      if (!accordion || accordion !== openAccordion) {\n        return;\n      }\n\n      var isThis = openedId === this.safeId(); // Open this collapse if not shown or\n      // close this collapse if shown\n\n      if (isThis && !show || !isThis && show) {\n        this.toggle();\n      }\n    },\n    handleResize: function handleResize() {\n      // Handler for orientation/resize to set collapsed state in nav/navbar\n      this.show = (0, _dom.getCS)(this.$el).display === 'block';\n    }\n  },\n  render: function render(h) {\n    var appear = this.appear;\n    var $content = h(this.tag, {\n      class: this.classObject,\n      directives: [{\n        name: 'show',\n        value: this.show\n      }],\n      attrs: {\n        id: this.safeId()\n      },\n      on: {\n        click: this.clickHandler\n      }\n    }, this.normalizeSlot(_slots.SLOT_NAME_DEFAULT, this.slotScope));\n    return h(_bvCollapse.BVCollapse, {\n      props: {\n        appear: appear\n      },\n      on: {\n        enter: this.onEnter,\n        afterEnter: this.onAfterEnter,\n        leave: this.onLeave,\n        afterLeave: this.onAfterLeave\n      }\n    }, [$content]);\n  }\n});\n\nexports.BCollapse = BCollapse;"},"sourceMaps":null,"error":null,"hash":"960e8935aaa2b137dabad1cf477334d7","cacheData":{"env":{}}}