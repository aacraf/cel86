{"id":"../node_modules/bootstrap-vue/esm/utils/date.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../constants/date","loc":{"line":20,"column":33,"index":2497},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/date.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/date.js"},{"name":"../constants/regex","loc":{"line":21,"column":39,"index":2557},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/date.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/regex.js"},{"name":"./array","loc":{"line":22,"column":23,"index":2602},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/date.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/array.js"},{"name":"./identity","loc":{"line":23,"column":25,"index":2638},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/date.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/identity.js"},{"name":"./inspect","loc":{"line":24,"column":33,"index":2685},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/date.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"./number","loc":{"line":25,"column":26,"index":2724},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/date.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/number.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveLocale = exports.parseYMD = exports.oneYearAhead = exports.oneYearAgo = exports.oneMonthAhead = exports.oneMonthAgo = exports.oneDecadeAhead = exports.oneDecadeAgo = exports.lastDateOfMonth = exports.formatYMD = exports.firstDateOfMonth = exports.datesEqual = exports.createDateFormatter = exports.createDate = exports.constrainDate = exports.addYears = void 0;\n\nvar _date = require(\"../constants/date\");\n\nvar _regex = require(\"../constants/regex\");\n\nvar _array = require(\"./array\");\n\nvar _identity = require(\"./identity\");\n\nvar _inspect = require(\"./inspect\");\n\nvar _number = require(\"./number\");\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n} // Date utility functions\n\n\n// --- Date utility methods ---\n// Create or clone a date (`new Date(...)` shortcut)\nvar createDate = function createDate() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _construct(Date, args);\n}; // Parse a date sting, or Date object, into a Date object (with no time information)\n\n\nexports.createDate = createDate;\n\nvar parseYMD = function parseYMD(date) {\n  if ((0, _inspect.isString)(date) && _regex.RX_DATE.test(date.trim())) {\n    var _date$split$map = date.split(_regex.RX_DATE_SPLIT).map(function (v) {\n      return (0, _number.toInteger)(v, 1);\n    }),\n        _date$split$map2 = _slicedToArray(_date$split$map, 3),\n        year = _date$split$map2[0],\n        month = _date$split$map2[1],\n        day = _date$split$map2[2];\n\n    return createDate(year, month - 1, day);\n  } else if ((0, _inspect.isDate)(date)) {\n    return createDate(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n\n  return null;\n}; // Format a date object as `YYYY-MM-DD` format\n\n\nexports.parseYMD = parseYMD;\n\nvar formatYMD = function formatYMD(date) {\n  date = parseYMD(date);\n\n  if (!date) {\n    return null;\n  }\n\n  var year = date.getFullYear();\n  var month = \"0\".concat(date.getMonth() + 1).slice(-2);\n  var day = \"0\".concat(date.getDate()).slice(-2);\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n}; // Given a locale (or locales), resolve the browser available locale\n\n\nexports.formatYMD = formatYMD;\n\nvar resolveLocale = function resolveLocale(locales)\n/* istanbul ignore next */\n{\n  var calendar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _date.CALENDAR_GREGORY;\n  locales = (0, _array.concat)(locales).filter(_identity.identity);\n  var fmt = new Intl.DateTimeFormat(locales, {\n    calendar: calendar\n  });\n  return fmt.resolvedOptions().locale;\n}; // Create a `Intl.DateTimeFormat` formatter function\n\n\nexports.resolveLocale = resolveLocale;\n\nvar createDateFormatter = function createDateFormatter(locale, options)\n/* istanbul ignore next */\n{\n  var dtf = new Intl.DateTimeFormat(locale, options);\n  return dtf.format;\n}; // Determine if two dates are the same date (ignoring time portion)\n\n\nexports.createDateFormatter = createDateFormatter;\n\nvar datesEqual = function datesEqual(date1, date2) {\n  // Returns true of the date portion of two date objects are equal\n  // We don't compare the time portion\n  return formatYMD(date1) === formatYMD(date2);\n}; // --- Date \"math\" utility methods (for BCalendar component mainly) ---\n\n\nexports.datesEqual = datesEqual;\n\nvar firstDateOfMonth = function firstDateOfMonth(date) {\n  date = createDate(date);\n  date.setDate(1);\n  return date;\n};\n\nexports.firstDateOfMonth = firstDateOfMonth;\n\nvar lastDateOfMonth = function lastDateOfMonth(date) {\n  date = createDate(date);\n  date.setMonth(date.getMonth() + 1);\n  date.setDate(0);\n  return date;\n};\n\nexports.lastDateOfMonth = lastDateOfMonth;\n\nvar addYears = function addYears(date, numberOfYears) {\n  date = createDate(date);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear() + numberOfYears); // Handle Feb 29th for leap years\n\n  if (date.getMonth() !== month) {\n    date.setDate(0);\n  }\n\n  return date;\n};\n\nexports.addYears = addYears;\n\nvar oneMonthAgo = function oneMonthAgo(date) {\n  date = createDate(date);\n  var month = date.getMonth();\n  date.setMonth(month - 1); // Handle when days in month are different\n\n  if (date.getMonth() === month) {\n    date.setDate(0);\n  }\n\n  return date;\n};\n\nexports.oneMonthAgo = oneMonthAgo;\n\nvar oneMonthAhead = function oneMonthAhead(date) {\n  date = createDate(date);\n  var month = date.getMonth();\n  date.setMonth(month + 1); // Handle when days in month are different\n\n  if (date.getMonth() === (month + 2) % 12) {\n    date.setDate(0);\n  }\n\n  return date;\n};\n\nexports.oneMonthAhead = oneMonthAhead;\n\nvar oneYearAgo = function oneYearAgo(date) {\n  return addYears(date, -1);\n};\n\nexports.oneYearAgo = oneYearAgo;\n\nvar oneYearAhead = function oneYearAhead(date) {\n  return addYears(date, 1);\n};\n\nexports.oneYearAhead = oneYearAhead;\n\nvar oneDecadeAgo = function oneDecadeAgo(date) {\n  return addYears(date, -10);\n};\n\nexports.oneDecadeAgo = oneDecadeAgo;\n\nvar oneDecadeAhead = function oneDecadeAhead(date) {\n  return addYears(date, 10);\n}; // Helper function to constrain a date between two values\n// Always returns a `Date` object or `null` if no date passed\n\n\nexports.oneDecadeAhead = oneDecadeAhead;\n\nvar constrainDate = function constrainDate(date) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null; // Ensure values are `Date` objects (or `null`)\n\n  date = parseYMD(date);\n  min = parseYMD(min) || date;\n  max = parseYMD(max) || date; // Return a new `Date` object (or `null`)\n\n  return date ? date < min ? min : date > max ? max : date : null;\n};\n\nexports.constrainDate = constrainDate;"},"sourceMaps":null,"error":null,"hash":"76ce3123f7f201bbe9fd95470a238277","cacheData":{"env":{}}}