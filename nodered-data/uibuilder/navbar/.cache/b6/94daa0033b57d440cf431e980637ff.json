{"id":"../node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../../vue","loc":{"line":7,"column":20,"index":1110},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../../constants/events","loc":{"line":8,"column":43,"index":1169},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/events.js"},{"name":"../../../constants/props","loc":{"line":9,"column":50,"index":1248},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../../../utils/inspect","loc":{"line":10,"column":46,"index":1322},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../../utils/loose-equal","loc":{"line":11,"column":27,"index":1375},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/loose-equal.js"},{"name":"../../../utils/math","loc":{"line":12,"column":24,"index":1429},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/math.js"},{"name":"../../../utils/model","loc":{"line":13,"column":31,"index":1483},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/model.js"},{"name":"../../../utils/number","loc":{"line":14,"column":26,"index":1533},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/number.js"},{"name":"../../../utils/object","loc":{"line":15,"column":32,"index":1590},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../../../utils/props","loc":{"line":16,"column":25,"index":1640},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"./normalize-fields","loc":{"line":17,"column":32,"index":1696},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/normalize-fields.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.itemsMixin = exports.MODEL_PROP_NAME = exports.MODEL_EVENT_NAME = void 0;\n\nvar _vue = require(\"../../../vue\");\n\nvar _events = require(\"../../../constants/events\");\n\nvar _props = require(\"../../../constants/props\");\n\nvar _inspect = require(\"../../../utils/inspect\");\n\nvar _looseEqual = require(\"../../../utils/loose-equal\");\n\nvar _math = require(\"../../../utils/math\");\n\nvar _model = require(\"../../../utils/model\");\n\nvar _number = require(\"../../../utils/number\");\n\nvar _object = require(\"../../../utils/object\");\n\nvar _props2 = require(\"../../../utils/props\");\n\nvar _normalizeFields = require(\"./normalize-fields\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n// --- Constants ---\nvar _makeModelMixin = (0, _model.makeModelMixin)('value', {\n  type: _props.PROP_TYPE_ARRAY,\n  defaultValue: []\n}),\n    modelMixin = _makeModelMixin.mixin,\n    modelProps = _makeModelMixin.props,\n    MODEL_PROP_NAME = _makeModelMixin.prop,\n    MODEL_EVENT_NAME = _makeModelMixin.event;\n\nexports.MODEL_EVENT_NAME = MODEL_EVENT_NAME;\nexports.MODEL_PROP_NAME = MODEL_PROP_NAME;\n// --- Props ---\nvar props = (0, _object.sortKeys)(_objectSpread(_objectSpread({}, modelProps), {}, _defineProperty({\n  fields: (0, _props2.makeProp)(_props.PROP_TYPE_ARRAY, null),\n  // Provider mixin adds in `Function` type\n  items: (0, _props2.makeProp)(_props.PROP_TYPE_ARRAY, []),\n  // Primary key for record\n  // If provided the value in each row must be unique!\n  primaryKey: (0, _props2.makeProp)(_props.PROP_TYPE_STRING)\n}, MODEL_PROP_NAME, (0, _props2.makeProp)(_props.PROP_TYPE_ARRAY, [])))); // --- Mixin ---\n// @vue/component\n\nexports.props = props;\n\nvar itemsMixin = _vue.Vue.extend({\n  mixins: [modelMixin],\n  props: props,\n  data: function data() {\n    var items = this.items;\n    return {\n      // Our local copy of the items\n      // Must be an array\n      localItems: (0, _inspect.isArray)(items) ? items.slice() : []\n    };\n  },\n  computed: {\n    computedFields: function computedFields() {\n      // We normalize fields into an array of objects\n      // `[ { key:..., label:..., ...}, {...}, ..., {..}]`\n      return (0, _normalizeFields.normalizeFields)(this.fields, this.localItems);\n    },\n    computedFieldsObj: function computedFieldsObj() {\n      // Fields as a simple lookup hash object\n      // Mainly for formatter lookup and use in `scopedSlots` for convenience\n      // If the field has a formatter, it normalizes formatter to a\n      // function ref or `undefined` if no formatter\n      var $parent = this.$parent;\n      return this.computedFields.reduce(function (obj, f) {\n        // We use object spread here so we don't mutate the original field object\n        obj[f.key] = (0, _object.clone)(f);\n\n        if (f.formatter) {\n          // Normalize formatter to a function ref or `undefined`\n          var formatter = f.formatter;\n\n          if ((0, _inspect.isString)(formatter) && (0, _inspect.isFunction)($parent[formatter])) {\n            formatter = $parent[formatter];\n          } else if (!(0, _inspect.isFunction)(formatter)) {\n            /* istanbul ignore next */\n            formatter = undefined;\n          } // Return formatter function or `undefined` if none\n\n\n          obj[f.key].formatter = formatter;\n        }\n\n        return obj;\n      }, {});\n    },\n    computedItems: function computedItems() {\n      // Fallback if various mixins not provided\n      return (this.paginatedItems || this.sortedItems || this.filteredItems || this.localItems ||\n      /* istanbul ignore next */\n      []).slice();\n    },\n    context: function context() {\n      // Current state of sorting, filtering and pagination props/values\n      return {\n        filter: this.localFilter,\n        sortBy: this.localSortBy,\n        sortDesc: this.localSortDesc,\n        perPage: (0, _math.mathMax)((0, _number.toInteger)(this.perPage, 0), 0),\n        currentPage: (0, _math.mathMax)((0, _number.toInteger)(this.currentPage, 0), 1),\n        apiUrl: this.apiUrl\n      };\n    }\n  },\n  watch: {\n    items: function items(newValue) {\n      // Set `localItems`/`filteredItems` to a copy of the provided array\n      this.localItems = (0, _inspect.isArray)(newValue) ? newValue.slice() : [];\n    },\n    // Watch for changes on `computedItems` and update the `v-model`\n    computedItems: function computedItems(newValue, oldValue) {\n      if (!(0, _looseEqual.looseEqual)(newValue, oldValue)) {\n        this.$emit(MODEL_EVENT_NAME, newValue);\n      }\n    },\n    // Watch for context changes\n    context: function context(newValue, oldValue) {\n      // Emit context information for external paging/filtering/sorting handling\n      if (!(0, _looseEqual.looseEqual)(newValue, oldValue)) {\n        this.$emit(_events.EVENT_NAME_CONTEXT_CHANGED, newValue);\n      }\n    }\n  },\n  mounted: function mounted() {\n    // Initially update the `v-model` of displayed items\n    this.$emit(MODEL_EVENT_NAME, this.computedItems);\n  },\n  methods: {\n    // Method to get the formatter method for a given field key\n    getFieldFormatter: function getFieldFormatter(key) {\n      var field = this.computedFieldsObj[key]; // `this.computedFieldsObj` has pre-normalized the formatter to a\n      // function ref if present, otherwise `undefined`\n\n      return field ? field.formatter : undefined;\n    }\n  }\n});\n\nexports.itemsMixin = itemsMixin;"},"sourceMaps":null,"error":null,"hash":"a79e391a6d831bc3bd19f8c0dc9b639d","cacheData":{"env":{}}}