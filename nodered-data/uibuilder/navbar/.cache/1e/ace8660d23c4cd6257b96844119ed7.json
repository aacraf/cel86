{"id":"../node_modules/bootstrap-vue/esm/utils/warn.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../constants/env","loc":{"line":1,"column":79,"index":79},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/warn.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/env.js"},{"name":"./env","loc":{"line":2,"column":26,"index":125},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/warn.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/env.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.warnNotClient = exports.warnNoPromiseSupport = exports.warnNoMutationObserverSupport = exports.warn = void 0;\n\nvar _env = require(\"../constants/env\");\n\nvar _env2 = require(\"./env\");\n\n/**\n * Log a warning message to the console with BootstrapVue formatting\n * @param {string} message\n */\nvar warn = function warn(message)\n/* istanbul ignore next */\n{\n  var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (!(0, _env2.getNoWarn)()) {\n    console.warn(\"[BootstrapVue warn]: \".concat(source ? \"\".concat(source, \" - \") : '').concat(message));\n  }\n};\n/**\n * Warn when no Promise support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\n\nexports.warn = warn;\n\nvar warnNotClient = function warnNotClient(source) {\n  /* istanbul ignore else */\n  if (_env.IS_BROWSER) {\n    return false;\n  } else {\n    warn(\"\".concat(source, \": Can not be called during SSR.\"));\n    return true;\n  }\n};\n/**\n * Warn when no Promise support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\n\nexports.warnNotClient = warnNotClient;\n\nvar warnNoPromiseSupport = function warnNoPromiseSupport(source) {\n  /* istanbul ignore else */\n  if (_env.HAS_PROMISE_SUPPORT) {\n    return false;\n  } else {\n    warn(\"\".concat(source, \": Requires Promise support.\"));\n    return true;\n  }\n};\n/**\n * Warn when no MutationObserver support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\n\nexports.warnNoPromiseSupport = warnNoPromiseSupport;\n\nvar warnNoMutationObserverSupport = function warnNoMutationObserverSupport(source) {\n  /* istanbul ignore else */\n  if (_env.HAS_MUTATION_OBSERVER_SUPPORT) {\n    return false;\n  } else {\n    warn(\"\".concat(source, \": Requires MutationObserver support.\"));\n    return true;\n  }\n};\n\nexports.warnNoMutationObserverSupport = warnNoMutationObserverSupport;"},"sourceMaps":null,"error":null,"hash":"6bbc0cf23fc25056056eb9c2ffbdf277","cacheData":{"env":{}}}