{"id":"../node_modules/bootstrap-vue/esm/mixins/listen-on-root.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../vue","loc":{"line":1,"column":20,"index":20},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/listen-on-root.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../constants/events","loc":{"line":2,"column":47,"index":77},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/listen-on-root.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/events.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.listenOnRootMixin = void 0;\n\nvar _vue = require(\"../vue\");\n\nvar _events = require(\"../constants/events\");\n\n// @vue/component\nvar listenOnRootMixin = _vue.Vue.extend({\n  methods: {\n    /**\n     * Safely register event listeners on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback\n     *\n     * When registering a `$root` listener, it also registers a listener on\n     * the component's `beforeDestroy()` hook to automatically remove the\n     * event listener from the `$root` instance\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRoot: function listenOnRoot(event, callback) {\n      var _this = this;\n\n      this.$root.$on(event, callback);\n      this.$on(_events.HOOK_EVENT_NAME_BEFORE_DESTROY, function () {\n        _this.$root.$off(event, callback);\n      });\n    },\n\n    /**\n     * Safely register a `$once()` event listener on the root Vue node\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback\n     *\n     * When registering a $root listener, it also registers a listener on\n     * the component's `beforeDestroy` hook to automatically remove the\n     * event listener from the $root instance.\n     *\n     * @param {string} event\n     * @param {function} callback\n     */\n    listenOnRootOnce: function listenOnRootOnce(event, callback) {\n      var _this2 = this;\n\n      this.$root.$once(event, callback);\n      this.$on(_events.HOOK_EVENT_NAME_BEFORE_DESTROY, function () {\n        _this2.$root.$off(event, callback);\n      });\n    },\n\n    /**\n     * Convenience method for calling `vm.$emit()` on `vm.$root`\n     *\n     * @param {string} event\n     * @param {*} args\n     */\n    emitOnRoot: function emitOnRoot(event) {\n      var _this$$root;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args));\n    }\n  }\n});\n\nexports.listenOnRootMixin = listenOnRootMixin;"},"sourceMaps":null,"error":null,"hash":"c46cc285d1fba7f1cd021a2dbdb64cc1","cacheData":{"env":{}}}