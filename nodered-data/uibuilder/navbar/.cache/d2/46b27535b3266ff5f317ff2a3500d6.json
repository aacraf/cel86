{"id":"../node_modules/bootstrap-vue/esm/utils/string.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../constants/regex","loc":{"line":2,"column":142,"index":162},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/string.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/regex.js"},{"name":"./inspect","loc":{"line":3,"column":68,"index":252},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/string.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.upperFirst = exports.upperCase = exports.trimRight = exports.trimLeft = exports.trim = exports.toString = exports.startCase = exports.pascalCase = exports.lowerFirst = exports.lowerCase = exports.kebabCase = exports.escapeRegExp = void 0;\n\nvar _regex = require(\"../constants/regex\");\n\nvar _inspect = require(\"./inspect\");\n\n// String utilities\n// --- Utilities ---\n// Converts PascalCase or camelCase to kebab-case\nvar kebabCase = function kebabCase(str) {\n  return str.replace(_regex.RX_HYPHENATE, '-$1').toLowerCase();\n}; // Converts a kebab-case or camelCase string to PascalCase\n\n\nexports.kebabCase = kebabCase;\n\nvar pascalCase = function pascalCase(str) {\n  str = kebabCase(str).replace(_regex.RX_UN_KEBAB, function (_, c) {\n    return c ? c.toUpperCase() : '';\n  });\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}; // Converts a string, including strings in camelCase or snake_case, into Start Case\n// It keeps original single quote and hyphen in the word\n// https://github.com/UrbanCompass/to-start-case\n\n\nexports.pascalCase = pascalCase;\n\nvar startCase = function startCase(str) {\n  return str.replace(_regex.RX_UNDERSCORE, ' ').replace(_regex.RX_LOWER_UPPER, function (str, $1, $2) {\n    return $1 + ' ' + $2;\n  }).replace(_regex.RX_START_SPACE_WORD, function (str, $1, $2) {\n    return $1 + $2.toUpperCase();\n  });\n}; // Lowercases the first letter of a string and returns a new string\n\n\nexports.startCase = startCase;\n\nvar lowerFirst = function lowerFirst(str) {\n  str = (0, _inspect.isString)(str) ? str.trim() : String(str);\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}; // Uppercases the first letter of a string and returns a new string\n\n\nexports.lowerFirst = lowerFirst;\n\nvar upperFirst = function upperFirst(str) {\n  str = (0, _inspect.isString)(str) ? str.trim() : String(str);\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}; // Escape characters to be used in building a regular expression\n\n\nexports.upperFirst = upperFirst;\n\nvar escapeRegExp = function escapeRegExp(str) {\n  return str.replace(_regex.RX_REGEXP_REPLACE, '\\\\$&');\n}; // Convert a value to a string that can be rendered\n// `undefined`/`null` will be converted to `''`\n// Plain objects and arrays will be JSON stringified\n\n\nexports.escapeRegExp = escapeRegExp;\n\nvar toString = function toString(val) {\n  var spaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return (0, _inspect.isUndefinedOrNull)(val) ? '' : (0, _inspect.isArray)(val) || (0, _inspect.isPlainObject)(val) && val.toString === Object.prototype.toString ? JSON.stringify(val, null, spaces) : String(val);\n}; // Remove leading white space from a string\n\n\nexports.toString = toString;\n\nvar trimLeft = function trimLeft(str) {\n  return toString(str).replace(_regex.RX_TRIM_LEFT, '');\n}; // Remove Trailing white space from a string\n\n\nexports.trimLeft = trimLeft;\n\nvar trimRight = function trimRight(str) {\n  return toString(str).replace(_regex.RX_TRIM_RIGHT, '');\n}; // Remove leading and trailing white space from a string\n\n\nexports.trimRight = trimRight;\n\nvar trim = function trim(str) {\n  return toString(str).trim();\n}; // Lower case a string\n\n\nexports.trim = trim;\n\nvar lowerCase = function lowerCase(str) {\n  return toString(str).toLowerCase();\n}; // Upper case a string\n\n\nexports.lowerCase = lowerCase;\n\nvar upperCase = function upperCase(str) {\n  return toString(str).toUpperCase();\n};\n\nexports.upperCase = upperCase;"},"sourceMaps":null,"error":null,"hash":"13b20c0c499d00f5d3d91264c08a686a","cacheData":{"env":{}}}