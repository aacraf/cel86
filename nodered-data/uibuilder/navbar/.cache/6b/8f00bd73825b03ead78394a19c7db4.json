{"id":"../node_modules/bootstrap-vue/esm/utils/config-set.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../vue","loc":{"line":7,"column":30,"index":721},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/config-set.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../constants/config","loc":{"line":8,"column":32,"index":763},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/config-set.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/config.js"},{"name":"./clone-deep","loc":{"line":9,"column":26,"index":812},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/config-set.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/clone-deep.js"},{"name":"./get","loc":{"line":10,"column":23,"index":851},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/config-set.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/get.js"},{"name":"./inspect","loc":{"line":11,"column":62,"index":922},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/config-set.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"./object","loc":{"line":12,"column":36,"index":971},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/config-set.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"./warn","loc":{"line":13,"column":21,"index":1004},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/config-set.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/warn.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setConfig = exports.resetConfig = void 0;\n\nvar _vue = require(\"../vue\");\n\nvar _config = require(\"../constants/config\");\n\nvar _cloneDeep = require(\"./clone-deep\");\n\nvar _get = require(\"./get\");\n\nvar _inspect = require(\"./inspect\");\n\nvar _object = require(\"./object\");\n\nvar _warn = require(\"./warn\");\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n// Config manager class\nvar BvConfig = /*#__PURE__*/function () {\n  function BvConfig() {\n    _classCallCheck(this, BvConfig);\n\n    this.$_config = {};\n  } // Method to merge in user config parameters\n\n\n  _createClass(BvConfig, [{\n    key: \"setConfig\",\n    value: function setConfig() {\n      var _this = this;\n\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      /* istanbul ignore next */\n\n      if (!(0, _inspect.isPlainObject)(config)) {\n        return;\n      }\n\n      var configKeys = (0, _object.getOwnPropertyNames)(config);\n      configKeys.forEach(function (key) {\n        /* istanbul ignore next */\n        var subConfig = config[key];\n\n        if (key === 'breakpoints') {\n          /* istanbul ignore if */\n          if (!(0, _inspect.isArray)(subConfig) || subConfig.length < 2 || subConfig.some(function (b) {\n            return !(0, _inspect.isString)(b) || b.length === 0;\n          })) {\n            (0, _warn.warn)('\"breakpoints\" must be an array of at least 2 breakpoint names', _config.NAME);\n          } else {\n            _this.$_config[key] = (0, _cloneDeep.cloneDeep)(subConfig);\n          }\n        } else if ((0, _inspect.isPlainObject)(subConfig)) {\n          // Component prop defaults\n          _this.$_config[key] = (0, _object.getOwnPropertyNames)(subConfig).reduce(function (config, prop) {\n            if (!(0, _inspect.isUndefined)(subConfig[prop])) {\n              config[prop] = (0, _cloneDeep.cloneDeep)(subConfig[prop]);\n            }\n\n            return config;\n          }, _this.$_config[key] || {});\n        }\n      });\n    } // Clear the config\n\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {\n      this.$_config = {};\n    } // Returns a deep copy of the user config\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return (0, _cloneDeep.cloneDeep)(this.$_config);\n    } // Returns a deep copy of the config value\n\n  }, {\n    key: \"getConfigValue\",\n    value: function getConfigValue(key) {\n      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      return (0, _cloneDeep.cloneDeep)((0, _get.getRaw)(this.$_config, key, defaultValue));\n    }\n  }]);\n\n  return BvConfig;\n}(); // Method for applying a global config\n\n\nvar setConfig = function setConfig() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var Vue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _vue.Vue; // Ensure we have a `$bvConfig` Object on the Vue prototype\n  // We set on Vue and OurVue just in case consumer has not set an alias of `vue`\n\n  Vue.prototype[_config.PROP_NAME] = _vue.Vue.prototype[_config.PROP_NAME] = Vue.prototype[_config.PROP_NAME] || _vue.Vue.prototype[_config.PROP_NAME] || new BvConfig(); // Apply the config values\n\n  Vue.prototype[_config.PROP_NAME].setConfig(config);\n}; // Method for resetting the user config\n// Exported for testing purposes only\n\n\nexports.setConfig = setConfig;\n\nvar resetConfig = function resetConfig() {\n  if (_vue.Vue.prototype[_config.PROP_NAME] && _vue.Vue.prototype[_config.PROP_NAME].resetConfig) {\n    _vue.Vue.prototype[_config.PROP_NAME].resetConfig();\n  }\n};\n\nexports.resetConfig = resetConfig;"},"sourceMaps":null,"error":null,"hash":"8dfc1d2e2685d65380a2cb8d51a9f389","cacheData":{"env":{}}}