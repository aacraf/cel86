{"id":"components/Widgets/ApexGrafica.vue","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"@vue/composition-api","loc":{"line":14,"column":32,"index":70},"parent":"/data/uibuilder/navbar/src/components/Widgets/ApexGrafica.vue","resolved":"/data/uibuilder/node_modules/@vue/composition-api/dist/vue-composition-api.mjs"},{"name":"moment","loc":{"line":15,"column":19,"index":114},"parent":"/data/uibuilder/navbar/src/components/Widgets/ApexGrafica.vue","resolved":"/data/uibuilder/node_modules/moment/moment.js"},{"name":"moment/locale/es","loc":{"line":17,"column":7,"index":134},"parent":"/data/uibuilder/navbar/src/components/Widgets/ApexGrafica.vue","resolved":"/data/uibuilder/node_modules/moment/locale/es.js"},{"name":"vue-hot-reload-api","parent":"/data/uibuilder/navbar/src/components/Widgets/ApexGrafica.vue","resolved":"/data/uibuilder/navbar/node_modules/vue-hot-reload-api/dist/index.js"},{"name":"vue","parent":"/data/uibuilder/navbar/src/components/Widgets/ApexGrafica.vue","resolved":"/data/uibuilder/navbar/node_modules/vue/dist/vue.runtime.esm.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _compositionApi = require(\"@vue/composition-api\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nrequire(\"moment/locale/es\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// without this line it didn't work\n_moment.default.locale('es'); // import { InfluxDB, Point } from '@influxdata/influxdb-client'\n// const queryApi = new InfluxDB({url:'http://influx-spc:8086/', token:'cie-token'}).getQueryApi('cie')\n\n\nvar _default = (0, _compositionApi.defineComponent)({\n  name: \"Grafica\",\n  props: {\n    SignalID: {\n      type: String,\n      required: true\n    },\n    live: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    timesteps: {\n      type: String,\n      required: false,\n      default: '5m'\n    },\n    stopLoading: {\n      type: Function,\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      options: {\n        chart: {\n          id: \"vuechart-example\",\n          animations: {\n            enabled: true,\n            easing: 'linear',\n            dynamicAnimation: {\n              speed: 1000\n            }\n          }\n        },\n        colors: [\"#FF0000\", \"#247BA0\", \"#ffb81f\", \"#FF0000\"],\n        fill: {\n          type: \"gradient\"\n        },\n        dataLabels: {\n          enabled: false\n        },\n        title: {\n          text: this.SignalID,\n          align: 'center',\n          style: {\n            fontSize: '20px'\n          }\n        },\n        annotations: {\n          points: [],\n          xaxis: []\n        },\n        // forecastDataPoints: {\n        //   count: 3\n        // },\n        stroke: {\n          curve: 'smooth',\n          dashArray: [0, 0, 5, 0]\n        },\n        xaxis: {\n          // type: 'datetime',\n          // range: 20,\n          labels: {\n            type: 'datetime',\n            show: true,\n            formatter: function formatter(val, timestamp) {\n              var time = (0, _moment.default)(timestamp);\n              time = time.format('HH:mm:ss');\n              return time;\n            }\n          }\n        }\n      },\n      series: [{\n        name: \"Tolerancia Superior\",\n        data: []\n      }, {\n        name: \"Medicion\",\n        data: []\n      }, {\n        name: \"Modelo\",\n        data: []\n      }, {\n        name: \"Tolerancia Inferior\",\n        data: []\n      }]\n    };\n  },\n  methods: {\n    updateChart: function updateChart(med, anomalia) {\n      var points = this.options.annotations.points;\n      var xaxis = this.options.annotations.xaxis;\n      var timestamp = (0, _moment.default)(med.sensores.payload.FechaHora, 'YYYY-MM-DD HH:mm:ss').valueOf();\n      var inyectada = med.sensores.payload.Inyectada;\n\n      if (inyectada) {\n        points.push({\n          x: timestamp,\n          y: med.sensores.payload[this.SignalID],\n          marker: {\n            size: 8,\n            fillColor: '#fff',\n            strokeColor: 'red',\n            radius: 2,\n            cssClass: 'apexcharts-custom-class'\n          },\n          label: {\n            borderColor: '#FF4560',\n            offsetY: 0,\n            style: {\n              color: '#fff',\n              background: '#FF4560'\n            },\n            text: 'Inyectada'\n          }\n        });\n        this.options = _objectSpread(_objectSpread({}, this.options), {}, {\n          annotations: {\n            points: points,\n            xaxis: xaxis\n          }\n        });\n      } // this.series[0].data.push({ x: timestamp, y: med[this.SignalID+\"_Max\"] });\n\n\n      this.series[1].data.push({\n        x: timestamp,\n        y: med.sensores.payload[this.SignalID]\n      });\n      this.series[2].data.push({\n        x: timestamp,\n        y: med.forecasting.payload[14][med.forecasting.signal_index[this.SignalID]]\n      }); // if(this.series[1].data.length > 10)\n      // {\n      //   this.series[1].data.shift();\n      //   this.series[2].data.shift();\n      // }\n      // this.series[2].data.push({ x: timestamp, y: med[this.SignalID+\"_Min\"] });\n\n      this.series = _toConsumableArray(this.series);\n    },\n    addAnomaly: function addAnomaly() {\n      var xaxis = this.options.annotations.xaxis;\n      var points = this.options.annotations.points;\n      xaxis.push({\n        x: this.series[1].data[this.series[1].data.length - 2].x,\n        x2: this.series[1].data[this.series[1].data.length - 1].x,\n        fillColor: 'darkgray'\n      });\n      this.options = _objectSpread(_objectSpread({}, this.options), {}, {\n        annotations: {\n          points: points,\n          xaxis: xaxis\n        }\n      });\n    },\n    addForecasting: function addForecasting(timesteps) {\n      var last_med_timestamp = this.series[1].data[this.series[1].data.length - 1].x;\n      console.log(\"LAST: \", last_med_timestamp);\n      var newData = this.series[2].data;\n      var next_timestep = (0, _moment.default)(last_med_timestamp).add(2, 's').format(\"HH:mm:ss\");\n      var datapoint_value = {\n        x: last_med_timestamp,\n        y: timesteps[0][12]\n      };\n      newData.push(datapoint_value);\n      this.series = [{\n        name: \"Tolerancia Maxima\",\n        data: this.series[0].data\n      }, {\n        name: med.tags.medicion,\n        data: newData\n      }, {\n        name: \"Modelo\",\n        data: this.series[2].data\n      }, {\n        name: \"Tolerancia Minima\",\n        data: this.series[3].data\n      }];\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var fluxQuery = \"\\n      from(bucket: \\\"cel86\\\")\\n        |> range(start: -\".concat(this.timesteps, \")\\n        |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"sensores\\\")\\n        |> filter(fn: (r) => r[\\\"molde\\\"] == \\\"MT201\\\")\\n        |> filter(fn: (r) => r[\\\"medicion\\\"] == \\\"\").concat(this.SignalID, \"\\\")\\n        |> pivot(rowKey:[\\\"_time\\\"], columnKey: [\\\"_field\\\"], valueColumn: \\\"_value\\\")\\n        |> drop(columns: [\\\"_start\\\", \\\"_stop\\\", \\\"_measurement\\\"])\\n    \"); // uibuilder.send( { 'topic': 'queryInflux', 'payload': this.SignalID, 'query': fluxQuery} )\n\n    uibuilder.onChange(\"msg\", function (newMsg) {\n      // if(newMsg.topic == \"queryInflux\")\n      // {\n      //   const response = JSON.parse(newMsg.payload);\n      //   // console.log(\"INIT DATA: \", JSON.parse(newMsg.payload));\n      //   // let initData = [];\n      //   response.forEach(row => {\n      //     // this.series[0].data.push({ x: moment(row._time).valueOf(),  y: row.value_min});\n      //     this.series[1].data.push({ x: moment(row._time).valueOf(),  y: row.value});\n      //     // this.series[3].data.push({ x: moment(row._time).valueOf(),  y: row.value_max});\n      //   })\n      //   this.options = {...this.options, title: { text: this.SignalID }};\n      //   this.series = [...this.series];\n      // }\n      // if(newMsg.payload.anomalia)\n      // {\n      //   this.addAnomaly();\n      // }\n      // if(newMsg.payload.forecasting){\n      //   this.addForecasting(newMsg.payload.forecasting);\n      // }\n      // else{\n      //   }\n      // if (newMsg.payload[this.SignalID].timestamp == this.series[1].data[this.series[1].data.length-1].x)\n      // {\n      //   this.live = true;   \n      // }\n      // if(this.live)\n      // {\n      try {\n        _this.updateChart(newMsg.payload, newMsg.payload.anomalia.payload[0]);\n      } catch (e) {\n        console.log(\"Error: \", e);\n      } // }\n\n    });\n    this.stopLoading();\n  }\n});\n\nexports.default = _default;\n        var $9b2724 = exports.default || module.exports;\n      \n      if (typeof $9b2724 === 'function') {\n        $9b2724 = $9b2724.options;\n      }\n    \n        /* template */\n        Object.assign($9b2724, (function () {\n          var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\"apexchart\", {\n        attrs: {\n          width: \"100%\",\n          height: \"100%\",\n          type: \"area\",\n          options: _vm.options,\n          series: _vm.series,\n        },\n      }),\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n          return {\n            render: render,\n            staticRenderFns: staticRenderFns,\n            _compiled: true,\n            _scopeId: null,\n            functional: undefined\n          };\n        })());\n      \n    /* hot reload */\n    (function () {\n      if (module.hot) {\n        var api = require('vue-hot-reload-api');\n        api.install(require('vue'));\n        if (api.compatible) {\n          module.hot.accept();\n          if (!module.hot.data) {\n            api.createRecord('$9b2724', $9b2724);\n          } else {\n            api.reload('$9b2724', $9b2724);\n          }\n        }\n\n        \n      }\n    })();"},"sourceMaps":null,"error":null,"hash":"b6377980fd9da50a976586b433963026","cacheData":{"env":{}}}