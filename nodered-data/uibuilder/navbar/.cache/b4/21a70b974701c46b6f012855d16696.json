{"id":"../node_modules/bootstrap-vue/esm/components/button-toolbar/button-toolbar.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../vue","loc":{"line":1,"column":20,"index":20},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button-toolbar/button-toolbar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../constants/components","loc":{"line":2,"column":36,"index":69},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button-toolbar/button-toolbar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/components.js"},{"name":"../../constants/props","loc":{"line":3,"column":34,"index":133},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button-toolbar/button-toolbar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../../constants/key-codes","loc":{"line":4,"column":58,"index":216},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button-toolbar/button-toolbar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/key-codes.js"},{"name":"../../utils/dom","loc":{"line":5,"column":61,"index":306},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button-toolbar/button-toolbar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js"},{"name":"../../utils/events","loc":{"line":6,"column":26,"index":351},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button-toolbar/button-toolbar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js"},{"name":"../../utils/props","loc":{"line":7,"column":48,"index":421},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button-toolbar/button-toolbar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"../../mixins/normalize-slot","loc":{"line":8,"column":35,"index":477},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button-toolbar/button-toolbar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/normalize-slot.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.BButtonToolbar = void 0;\n\nvar _vue = require(\"../../vue\");\n\nvar _components = require(\"../../constants/components\");\n\nvar _props = require(\"../../constants/props\");\n\nvar _keyCodes = require(\"../../constants/key-codes\");\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _events = require(\"../../utils/events\");\n\nvar _props2 = require(\"../../utils/props\");\n\nvar _normalizeSlot = require(\"../../mixins/normalize-slot\");\n\n// --- Constants ---\nvar ITEM_SELECTOR = ['.btn:not(.disabled):not([disabled]):not(.dropdown-item)', '.form-control:not(.disabled):not([disabled])', 'select:not(.disabled):not([disabled])', 'input[type=\"checkbox\"]:not(.disabled)', 'input[type=\"radio\"]:not(.disabled)'].join(','); // --- Props ---\n\nvar props = (0, _props2.makePropsConfigurable)({\n  justify: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  keyNav: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false)\n}, _components.NAME_BUTTON_TOOLBAR); // --- Main component ---\n// @vue/component\n\nexports.props = props;\n\nvar BButtonToolbar = /*#__PURE__*/_vue.Vue.extend({\n  name: _components.NAME_BUTTON_TOOLBAR,\n  mixins: [_normalizeSlot.normalizeSlotMixin],\n  props: props,\n  mounted: function mounted() {\n    // Pre-set the tabindexes if the markup does not include\n    // `tabindex=\"-1\"` on the toolbar items\n    if (this.keyNav) {\n      this.getItems();\n    }\n  },\n  methods: {\n    getItems: function getItems() {\n      var items = (0, _dom.selectAll)(ITEM_SELECTOR, this.$el); // Ensure `tabindex=\"-1\"` is set on every item\n\n      items.forEach(function (item) {\n        item.tabIndex = -1;\n      });\n      return items.filter(function (el) {\n        return (0, _dom.isVisible)(el);\n      });\n    },\n    focusFirst: function focusFirst() {\n      var items = this.getItems();\n      (0, _dom.attemptFocus)(items[0]);\n    },\n    focusPrev: function focusPrev(event) {\n      var items = this.getItems();\n      var index = items.indexOf(event.target);\n\n      if (index > -1) {\n        items = items.slice(0, index).reverse();\n        (0, _dom.attemptFocus)(items[0]);\n      }\n    },\n    focusNext: function focusNext(event) {\n      var items = this.getItems();\n      var index = items.indexOf(event.target);\n\n      if (index > -1) {\n        items = items.slice(index + 1);\n        (0, _dom.attemptFocus)(items[0]);\n      }\n    },\n    focusLast: function focusLast() {\n      var items = this.getItems().reverse();\n      (0, _dom.attemptFocus)(items[0]);\n    },\n    onFocusin: function onFocusin(event) {\n      var $el = this.$el;\n\n      if (event.target === $el && !(0, _dom.contains)($el, event.relatedTarget)) {\n        (0, _events.stopEvent)(event);\n        this.focusFirst(event);\n      }\n    },\n    onKeydown: function onKeydown(event) {\n      var keyCode = event.keyCode,\n          shiftKey = event.shiftKey;\n\n      if (keyCode === _keyCodes.CODE_UP || keyCode === _keyCodes.CODE_LEFT) {\n        (0, _events.stopEvent)(event);\n        shiftKey ? this.focusFirst(event) : this.focusPrev(event);\n      } else if (keyCode === _keyCodes.CODE_DOWN || keyCode === _keyCodes.CODE_RIGHT) {\n        (0, _events.stopEvent)(event);\n        shiftKey ? this.focusLast(event) : this.focusNext(event);\n      }\n    }\n  },\n  render: function render(h) {\n    var keyNav = this.keyNav;\n    return h('div', {\n      staticClass: 'btn-toolbar',\n      class: {\n        'justify-content-between': this.justify\n      },\n      attrs: {\n        role: 'toolbar',\n        tabindex: keyNav ? '0' : null\n      },\n      on: keyNav ? {\n        focusin: this.onFocusin,\n        keydown: this.onKeydown\n      } : {}\n    }, [this.normalizeSlot()]);\n  }\n});\n\nexports.BButtonToolbar = BButtonToolbar;"},"sourceMaps":null,"error":null,"hash":"6e2ff8c481c0b0e3d94b3a061edc270f","cacheData":{"env":{}}}