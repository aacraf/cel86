{"id":"../node_modules/bootstrap-vue/esm/components/avatar/avatar.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../vue","loc":{"line":7,"column":20,"index":1110},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../constants/components","loc":{"line":8,"column":28,"index":1151},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/components.js"},{"name":"../../constants/events","loc":{"line":9,"column":55,"index":1236},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/events.js"},{"name":"../../constants/props","loc":{"line":10,"column":103,"index":1365},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../../constants/slots","loc":{"line":11,"column":32,"index":1422},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/slots.js"},{"name":"../../utils/inspect","loc":{"line":12,"column":46,"index":1493},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../utils/number","loc":{"line":13,"column":24,"index":1540},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/number.js"},{"name":"../../utils/object","loc":{"line":14,"column":31,"index":1593},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../../utils/props","loc":{"line":15,"column":60,"index":1675},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"../../utils/router","loc":{"line":16,"column":23,"index":1719},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/router.js"},{"name":"../../mixins/normalize-slot","loc":{"line":17,"column":35,"index":1776},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/normalize-slot.js"},{"name":"../../icons/icon","loc":{"line":18,"column":22,"index":1829},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/icons/icon.js"},{"name":"../../icons/icons","loc":{"line":19,"column":32,"index":1881},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/icons/icons.js"},{"name":"../button/button","loc":{"line":20,"column":24,"index":1926},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js"},{"name":"../link/link","loc":{"line":21,"column":43,"index":1989},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/avatar/avatar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/link/link.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.computeSize = exports.BAvatar = void 0;\n\nvar _vue = require(\"../../vue\");\n\nvar _components = require(\"../../constants/components\");\n\nvar _events = require(\"../../constants/events\");\n\nvar _props = require(\"../../constants/props\");\n\nvar _slots = require(\"../../constants/slots\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nvar _number = require(\"../../utils/number\");\n\nvar _object = require(\"../../utils/object\");\n\nvar _props2 = require(\"../../utils/props\");\n\nvar _router = require(\"../../utils/router\");\n\nvar _normalizeSlot = require(\"../../mixins/normalize-slot\");\n\nvar _icon = require(\"../../icons/icon\");\n\nvar _icons = require(\"../../icons/icons\");\n\nvar _button = require(\"../button/button\");\n\nvar _link = require(\"../link/link\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n// --- Constants ---\nvar CLASS_NAME = 'b-avatar';\nvar SIZES = ['sm', null, 'lg'];\nvar FONT_SIZE_SCALE = 0.4;\nvar BADGE_FONT_SIZE_SCALE = FONT_SIZE_SCALE * 0.7; // --- Helper methods ---\n\nvar computeSize = function computeSize(value) {\n  // Parse to number when value is a float-like string\n  value = (0, _inspect.isString)(value) && (0, _inspect.isNumeric)(value) ? (0, _number.toFloat)(value, 0) : value; // Convert all numbers to pixel values\n\n  return (0, _inspect.isNumber)(value) ? \"\".concat(value, \"px\") : value || null;\n}; // --- Props ---\n\n\nexports.computeSize = computeSize;\nvar linkProps = (0, _object.omit)(_link.props, ['active', 'event', 'routerTag']);\nvar props = (0, _props2.makePropsConfigurable)((0, _object.sortKeys)(_objectSpread(_objectSpread({}, linkProps), {}, {\n  alt: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'avatar'),\n  ariaLabel: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  badge: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN_STRING, false),\n  badgeLeft: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  badgeOffset: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  badgeTop: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  badgeVariant: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'primary'),\n  button: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  buttonType: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'button'),\n  icon: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  rounded: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN_STRING, false),\n  size: (0, _props2.makeProp)(_props.PROP_TYPE_NUMBER_STRING),\n  square: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  src: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  text: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  variant: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'secondary')\n})), _components.NAME_AVATAR); // --- Main component ---\n// @vue/component\n\nexports.props = props;\n\nvar BAvatar = /*#__PURE__*/_vue.Vue.extend({\n  name: _components.NAME_AVATAR,\n  mixins: [_normalizeSlot.normalizeSlotMixin],\n  inject: {\n    bvAvatarGroup: {\n      default: null\n    }\n  },\n  props: props,\n  data: function data() {\n    return {\n      localSrc: this.src || null\n    };\n  },\n  computed: {\n    computedSize: function computedSize() {\n      // Always use the avatar group size\n      var bvAvatarGroup = this.bvAvatarGroup;\n      return computeSize(bvAvatarGroup ? bvAvatarGroup.size : this.size);\n    },\n    computedVariant: function computedVariant() {\n      var bvAvatarGroup = this.bvAvatarGroup;\n      return bvAvatarGroup && bvAvatarGroup.variant ? bvAvatarGroup.variant : this.variant;\n    },\n    computedRounded: function computedRounded() {\n      var bvAvatarGroup = this.bvAvatarGroup;\n      var square = bvAvatarGroup && bvAvatarGroup.square ? true : this.square;\n      var rounded = bvAvatarGroup && bvAvatarGroup.rounded ? bvAvatarGroup.rounded : this.rounded;\n      return square ? '0' : rounded === '' ? true : rounded || 'circle';\n    },\n    fontStyle: function fontStyle() {\n      var size = this.computedSize;\n      var fontSize = SIZES.indexOf(size) === -1 ? \"calc(\".concat(size, \" * \").concat(FONT_SIZE_SCALE, \")\") : null;\n      return fontSize ? {\n        fontSize: fontSize\n      } : {};\n    },\n    marginStyle: function marginStyle() {\n      var size = this.computedSize,\n          bvAvatarGroup = this.bvAvatarGroup;\n      var overlapScale = bvAvatarGroup ? bvAvatarGroup.overlapScale : 0;\n      var value = size && overlapScale ? \"calc(\".concat(size, \" * -\").concat(overlapScale, \")\") : null;\n      return value ? {\n        marginLeft: value,\n        marginRight: value\n      } : {};\n    },\n    badgeStyle: function badgeStyle() {\n      var size = this.computedSize,\n          badgeTop = this.badgeTop,\n          badgeLeft = this.badgeLeft,\n          badgeOffset = this.badgeOffset;\n      var offset = badgeOffset || '0px';\n      return {\n        fontSize: SIZES.indexOf(size) === -1 ? \"calc(\".concat(size, \" * \").concat(BADGE_FONT_SIZE_SCALE, \" )\") : null,\n        top: badgeTop ? offset : null,\n        bottom: badgeTop ? null : offset,\n        left: badgeLeft ? offset : null,\n        right: badgeLeft ? null : offset\n      };\n    }\n  },\n  watch: {\n    src: function src(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.localSrc = newValue || null;\n      }\n    }\n  },\n  methods: {\n    onImgError: function onImgError(event) {\n      this.localSrc = null;\n      this.$emit(_events.EVENT_NAME_IMG_ERROR, event);\n    },\n    onClick: function onClick(event) {\n      this.$emit(_events.EVENT_NAME_CLICK, event);\n    }\n  },\n  render: function render(h) {\n    var _class2;\n\n    var variant = this.computedVariant,\n        disabled = this.disabled,\n        rounded = this.computedRounded,\n        icon = this.icon,\n        src = this.localSrc,\n        text = this.text,\n        fontStyle = this.fontStyle,\n        marginStyle = this.marginStyle,\n        size = this.computedSize,\n        button = this.button,\n        type = this.buttonType,\n        badge = this.badge,\n        badgeVariant = this.badgeVariant,\n        badgeStyle = this.badgeStyle;\n    var link = !button && (0, _router.isLink)(this);\n    var tag = button ? _button.BButton : link ? _link.BLink : 'span';\n    var alt = this.alt;\n    var ariaLabel = this.ariaLabel || null;\n    var $content = null;\n\n    if (this.hasNormalizedSlot()) {\n      // Default slot overrides props\n      $content = h('span', {\n        staticClass: 'b-avatar-custom'\n      }, [this.normalizeSlot()]);\n    } else if (src) {\n      $content = h('img', {\n        style: variant ? {} : {\n          width: '100%',\n          height: '100%'\n        },\n        attrs: {\n          src: src,\n          alt: alt\n        },\n        on: {\n          error: this.onImgError\n        }\n      });\n      $content = h('span', {\n        staticClass: 'b-avatar-img'\n      }, [$content]);\n    } else if (icon) {\n      $content = h(_icon.BIcon, {\n        props: {\n          icon: icon\n        },\n        attrs: {\n          'aria-hidden': 'true',\n          alt: alt\n        }\n      });\n    } else if (text) {\n      $content = h('span', {\n        staticClass: 'b-avatar-text',\n        style: fontStyle\n      }, [h('span', text)]);\n    } else {\n      // Fallback default avatar content\n      $content = h(_icons.BIconPersonFill, {\n        attrs: {\n          'aria-hidden': 'true',\n          alt: alt\n        }\n      });\n    }\n\n    var $badge = h();\n    var hasBadgeSlot = this.hasNormalizedSlot(_slots.SLOT_NAME_BADGE);\n\n    if (badge || badge === '' || hasBadgeSlot) {\n      var badgeText = badge === true ? '' : badge;\n      $badge = h('span', {\n        staticClass: 'b-avatar-badge',\n        class: _defineProperty({}, \"badge-\".concat(badgeVariant), badgeVariant),\n        style: badgeStyle\n      }, [hasBadgeSlot ? this.normalizeSlot(_slots.SLOT_NAME_BADGE) : badgeText]);\n    }\n\n    var componentData = {\n      staticClass: CLASS_NAME,\n      class: (_class2 = {}, _defineProperty(_class2, \"\".concat(CLASS_NAME, \"-\").concat(size), size && SIZES.indexOf(size) !== -1), _defineProperty(_class2, \"badge-\".concat(variant), !button && variant), _defineProperty(_class2, \"rounded\", rounded === true), _defineProperty(_class2, \"rounded-\".concat(rounded), rounded && rounded !== true), _defineProperty(_class2, \"disabled\", disabled), _class2),\n      style: _objectSpread(_objectSpread({}, marginStyle), {}, {\n        width: size,\n        height: size\n      }),\n      attrs: {\n        'aria-label': ariaLabel || null\n      },\n      props: button ? {\n        variant: variant,\n        disabled: disabled,\n        type: type\n      } : link ? (0, _props2.pluckProps)(linkProps, this) : {},\n      on: button || link ? {\n        click: this.onClick\n      } : {}\n    };\n    return h(tag, componentData, [$content, $badge]);\n  }\n});\n\nexports.BAvatar = BAvatar;"},"sourceMaps":null,"error":null,"hash":"39289e492b01a45f4b45753b703a7c59","cacheData":{"env":{}}}