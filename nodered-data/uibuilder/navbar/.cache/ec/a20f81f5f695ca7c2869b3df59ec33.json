{"id":"../node_modules/bootstrap-vue/esm/components/table/helpers/default-sort-compare.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../../utils/get","loc":{"line":1,"column":20,"index":20},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/default-sort-compare.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/get.js"},{"name":"../../../utils/inspect","loc":{"line":2,"column":75,"index":117},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/default-sort-compare.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../../utils/number","loc":{"line":3,"column":24,"index":167},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/default-sort-compare.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/number.js"},{"name":"../../../utils/stringify-object-values","loc":{"line":4,"column":38,"index":230},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/table/helpers/default-sort-compare.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/stringify-object-values.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultSortCompare = void 0;\n\nvar _get = require(\"../../../utils/get\");\n\nvar _inspect = require(\"../../../utils/inspect\");\n\nvar _number = require(\"../../../utils/number\");\n\nvar _stringifyObjectValues = require(\"../../../utils/stringify-object-values\");\n\nvar normalizeValue = function normalizeValue(value) {\n  if ((0, _inspect.isUndefinedOrNull)(value)) {\n    return '';\n  }\n\n  if ((0, _inspect.isNumeric)(value)) {\n    return (0, _number.toFloat)(value, value);\n  }\n\n  return value;\n}; // Default sort compare routine\n//\n// TODO:\n//   Add option to sort by multiple columns (tri-state per column,\n//   plus order of columns in sort) where `sortBy` could be an array\n//   of objects `[ {key: 'foo', sortDir: 'asc'}, {key:'bar', sortDir: 'desc'} ...]`\n//   or an array of arrays `[ ['foo','asc'], ['bar','desc'] ]`\n//   Multisort will most likely be handled in `mixin-sort.js` by\n//   calling this method for each sortBy\n\n\nvar defaultSortCompare = function defaultSortCompare(a, b) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$sortBy = _ref.sortBy,\n      sortBy = _ref$sortBy === void 0 ? null : _ref$sortBy,\n      _ref$formatter = _ref.formatter,\n      formatter = _ref$formatter === void 0 ? null : _ref$formatter,\n      _ref$locale = _ref.locale,\n      locale = _ref$locale === void 0 ? undefined : _ref$locale,\n      _ref$localeOptions = _ref.localeOptions,\n      localeOptions = _ref$localeOptions === void 0 ? {} : _ref$localeOptions,\n      _ref$nullLast = _ref.nullLast,\n      nullLast = _ref$nullLast === void 0 ? false : _ref$nullLast; // Get the value by `sortBy`\n\n\n  var aa = (0, _get.get)(a, sortBy, null);\n  var bb = (0, _get.get)(b, sortBy, null); // Apply user-provided formatter\n\n  if ((0, _inspect.isFunction)(formatter)) {\n    aa = formatter(aa, sortBy, a);\n    bb = formatter(bb, sortBy, b);\n  } // Internally normalize value\n  // `null` / `undefined` => ''\n  // `'0'` => `0`\n\n\n  aa = normalizeValue(aa);\n  bb = normalizeValue(bb);\n\n  if ((0, _inspect.isDate)(aa) && (0, _inspect.isDate)(bb) || (0, _inspect.isNumber)(aa) && (0, _inspect.isNumber)(bb)) {\n    // Special case for comparing dates and numbers\n    // Internally dates are compared via their epoch number values\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  } else if (nullLast && aa === '' && bb !== '') {\n    // Special case when sorting `null` / `undefined` / '' last\n    return 1;\n  } else if (nullLast && aa !== '' && bb === '') {\n    // Special case when sorting `null` / `undefined` / '' last\n    return -1;\n  } // Do localized string comparison\n\n\n  return (0, _stringifyObjectValues.stringifyObjectValues)(aa).localeCompare((0, _stringifyObjectValues.stringifyObjectValues)(bb), locale, localeOptions);\n};\n\nexports.defaultSortCompare = defaultSortCompare;"},"sourceMaps":null,"error":null,"hash":"fbf25c197a077a8a302ce9f2a243563b","cacheData":{"env":{}}}