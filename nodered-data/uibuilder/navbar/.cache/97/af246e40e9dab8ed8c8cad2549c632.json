{"id":"../node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../vue","loc":{"line":7,"column":20,"index":1110},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../constants/components","loc":{"line":8,"column":30,"index":1153},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/components.js"},{"name":"../../constants/props","loc":{"line":9,"column":108,"index":1291},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../../constants/slots","loc":{"line":10,"column":60,"index":1376},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/slots.js"},{"name":"../../utils/array","loc":{"line":11,"column":30,"index":1431},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/array.js"},{"name":"../../utils/html","loc":{"line":12,"column":27,"index":1479},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/html.js"},{"name":"../../utils/props","loc":{"line":13,"column":48,"index":1547},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"../../utils/string","loc":{"line":14,"column":25,"index":1593},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/string.js"},{"name":"../../mixins/dropdown","loc":{"line":15,"column":54,"index":1669},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/dropdown.js"},{"name":"../../mixins/id","loc":{"line":16,"column":42,"index":1736},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/id.js"},{"name":"../../mixins/normalize-slot","loc":{"line":17,"column":35,"index":1790},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/normalize-slot.js"},{"name":"../button/button","loc":{"line":18,"column":24,"index":1845},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/button/button.js"},{"name":"../../utils/object","loc":{"line":19,"column":25,"index":1890},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/dropdown/dropdown.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.BDropdown = void 0;\n\nvar _vue = require(\"../../vue\");\n\nvar _components = require(\"../../constants/components\");\n\nvar _props = require(\"../../constants/props\");\n\nvar _slots = require(\"../../constants/slots\");\n\nvar _array = require(\"../../utils/array\");\n\nvar _html = require(\"../../utils/html\");\n\nvar _props2 = require(\"../../utils/props\");\n\nvar _string = require(\"../../utils/string\");\n\nvar _dropdown = require(\"../../mixins/dropdown\");\n\nvar _id = require(\"../../mixins/id\");\n\nvar _normalizeSlot = require(\"../../mixins/normalize-slot\");\n\nvar _button = require(\"../button/button\");\n\nvar _object = require(\"../../utils/object\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n// --- Props ---\nvar props = (0, _props2.makePropsConfigurable)((0, _object.sortKeys)(_objectSpread(_objectSpread(_objectSpread({}, _id.props), _dropdown.props), {}, {\n  block: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  html: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  // If `true`, only render menu contents when open\n  lazy: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  menuClass: (0, _props2.makeProp)(_props.PROP_TYPE_ARRAY_OBJECT_STRING),\n  noCaret: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  role: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'menu'),\n  size: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  split: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  splitButtonType: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'button', function (value) {\n    return (0, _array.arrayIncludes)(['button', 'submit', 'reset'], value);\n  }),\n  splitClass: (0, _props2.makeProp)(_props.PROP_TYPE_ARRAY_OBJECT_STRING),\n  splitHref: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  splitTo: (0, _props2.makeProp)(_props.PROP_TYPE_OBJECT_STRING),\n  splitVariant: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  text: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  toggleClass: (0, _props2.makeProp)(_props.PROP_TYPE_ARRAY_OBJECT_STRING),\n  toggleTag: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'button'),\n  // TODO: This really should be `toggleLabel`\n  toggleText: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Toggle dropdown'),\n  variant: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'secondary')\n})), _components.NAME_DROPDOWN); // --- Main component ---\n// @vue/component\n\nexports.props = props;\n\nvar BDropdown = /*#__PURE__*/_vue.Vue.extend({\n  name: _components.NAME_DROPDOWN,\n  mixins: [_id.idMixin, _dropdown.dropdownMixin, _normalizeSlot.normalizeSlotMixin],\n  props: props,\n  computed: {\n    dropdownClasses: function dropdownClasses() {\n      var block = this.block,\n          split = this.split;\n      return [this.directionClass, this.boundaryClass, {\n        show: this.visible,\n        // The 'btn-group' class is required in `split` mode for button alignment\n        // It needs also to be applied when `block` is disabled to allow multiple\n        // dropdowns to be aligned one line\n        'btn-group': split || !block,\n        // When `block` is enabled and we are in `split` mode the 'd-flex' class\n        // needs to be applied to allow the buttons to stretch to full width\n        'd-flex': block && split\n      }];\n    },\n    menuClasses: function menuClasses() {\n      return [this.menuClass, {\n        'dropdown-menu-right': this.right,\n        show: this.visible\n      }];\n    },\n    toggleClasses: function toggleClasses() {\n      var split = this.split;\n      return [this.toggleClass, {\n        'dropdown-toggle-split': split,\n        'dropdown-toggle-no-caret': this.noCaret && !split\n      }];\n    }\n  },\n  render: function render(h) {\n    var visible = this.visible,\n        variant = this.variant,\n        size = this.size,\n        block = this.block,\n        disabled = this.disabled,\n        split = this.split,\n        role = this.role,\n        hide = this.hide,\n        toggle = this.toggle;\n    var commonProps = {\n      variant: variant,\n      size: size,\n      block: block,\n      disabled: disabled\n    };\n    var $buttonChildren = this.normalizeSlot(_slots.SLOT_NAME_BUTTON_CONTENT);\n    var buttonContentDomProps = this.hasNormalizedSlot(_slots.SLOT_NAME_BUTTON_CONTENT) ? {} : (0, _html.htmlOrText)(this.html, this.text);\n    var $split = h();\n\n    if (split) {\n      var splitTo = this.splitTo,\n          splitHref = this.splitHref,\n          splitButtonType = this.splitButtonType;\n\n      var btnProps = _objectSpread(_objectSpread({}, commonProps), {}, {\n        variant: this.splitVariant || variant\n      }); // We add these as needed due to <router-link> issues with\n      // defined property with `undefined`/`null` values\n\n\n      if (splitTo) {\n        btnProps.to = splitTo;\n      } else if (splitHref) {\n        btnProps.href = splitHref;\n      } else if (splitButtonType) {\n        btnProps.type = splitButtonType;\n      }\n\n      $split = h(_button.BButton, {\n        class: this.splitClass,\n        attrs: {\n          id: this.safeId('_BV_button_')\n        },\n        props: btnProps,\n        domProps: buttonContentDomProps,\n        on: {\n          click: this.onSplitClick\n        },\n        ref: 'button'\n      }, $buttonChildren); // Overwrite button content for the toggle when in `split` mode\n\n      $buttonChildren = [h('span', {\n        class: ['sr-only']\n      }, [this.toggleText])];\n      buttonContentDomProps = {};\n    }\n\n    var $toggle = h(_button.BButton, {\n      staticClass: 'dropdown-toggle',\n      class: this.toggleClasses,\n      attrs: {\n        id: this.safeId('_BV_toggle_'),\n        'aria-haspopup': 'true',\n        'aria-expanded': (0, _string.toString)(visible)\n      },\n      props: _objectSpread(_objectSpread({}, commonProps), {}, {\n        tag: this.toggleTag,\n        block: block && !split\n      }),\n      domProps: buttonContentDomProps,\n      on: {\n        mousedown: this.onMousedown,\n        click: toggle,\n        keydown: toggle // Handle ENTER, SPACE and DOWN\n\n      },\n      ref: 'toggle'\n    }, $buttonChildren);\n    var $menu = h('ul', {\n      staticClass: 'dropdown-menu',\n      class: this.menuClasses,\n      attrs: {\n        role: role,\n        tabindex: '-1',\n        'aria-labelledby': this.safeId(split ? '_BV_button_' : '_BV_toggle_')\n      },\n      on: {\n        keydown: this.onKeydown // Handle UP, DOWN and ESC\n\n      },\n      ref: 'menu'\n    }, [!this.lazy || visible ? this.normalizeSlot(_slots.SLOT_NAME_DEFAULT, {\n      hide: hide\n    }) : h()]);\n    return h('div', {\n      staticClass: 'dropdown b-dropdown',\n      class: this.dropdownClasses,\n      attrs: {\n        id: this.safeId()\n      }\n    }, [$split, $toggle, $menu]);\n  }\n});\n\nexports.BDropdown = BDropdown;"},"sourceMaps":null,"error":null,"hash":"2059f47a52de5a19c07453f8657e7a88","cacheData":{"env":{}}}