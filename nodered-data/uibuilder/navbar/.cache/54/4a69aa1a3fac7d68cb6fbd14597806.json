{"id":"../node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../vue","loc":{"line":7,"column":20,"index":1110},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../constants/components","loc":{"line":8,"column":35,"index":1158},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/components.js"},{"name":"../../constants/props","loc":{"line":9,"column":77,"index":1265},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../../utils/dom","loc":{"line":10,"column":64,"index":1354},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js"},{"name":"../../utils/inspect","loc":{"line":11,"column":23,"index":1396},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../utils/math","loc":{"line":12,"column":43,"index":1462},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/math.js"},{"name":"../../utils/number","loc":{"line":13,"column":35,"index":1517},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/number.js"},{"name":"../../utils/object","loc":{"line":14,"column":25,"index":1564},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../../utils/props","loc":{"line":15,"column":48,"index":1634},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"../../mixins/form-control","loc":{"line":16,"column":60,"index":1715},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-control.js"},{"name":"../../mixins/form-selection","loc":{"line":17,"column":35,"index":1779},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-selection.js"},{"name":"../../mixins/form-size","loc":{"line":18,"column":54,"index":1864},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-size.js"},{"name":"../../mixins/form-state","loc":{"line":19,"column":56,"index":1946},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-state.js"},{"name":"../../mixins/form-text","loc":{"line":20,"column":54,"index":2027},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-text.js"},{"name":"../../mixins/form-validity","loc":{"line":21,"column":34,"index":2087},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-validity.js"},{"name":"../../mixins/id","loc":{"line":22,"column":42,"index":2159},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/id.js"},{"name":"../../mixins/listen-on-root","loc":{"line":23,"column":34,"index":2212},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/listen-on-root.js"},{"name":"../../mixins/listeners","loc":{"line":24,"column":31,"index":2274},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/listeners.js"},{"name":"../../directives/visible/visible","loc":{"line":25,"column":26,"index":2326},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/visible/visible.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.BFormTextarea = void 0;\n\nvar _vue = require(\"../../vue\");\n\nvar _components = require(\"../../constants/components\");\n\nvar _props = require(\"../../constants/props\");\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nvar _math = require(\"../../utils/math\");\n\nvar _number = require(\"../../utils/number\");\n\nvar _object = require(\"../../utils/object\");\n\nvar _props2 = require(\"../../utils/props\");\n\nvar _formControl = require(\"../../mixins/form-control\");\n\nvar _formSelection = require(\"../../mixins/form-selection\");\n\nvar _formSize = require(\"../../mixins/form-size\");\n\nvar _formState = require(\"../../mixins/form-state\");\n\nvar _formText = require(\"../../mixins/form-text\");\n\nvar _formValidity = require(\"../../mixins/form-validity\");\n\nvar _id = require(\"../../mixins/id\");\n\nvar _listenOnRoot = require(\"../../mixins/listen-on-root\");\n\nvar _listeners = require(\"../../mixins/listeners\");\n\nvar _visible = require(\"../../directives/visible/visible\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n// --- Props ---\nvar props = (0, _props2.makePropsConfigurable)((0, _object.sortKeys)(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _id.props), _formControl.props), _formSize.props), _formState.props), _formText.props), {}, {\n  maxRows: (0, _props2.makeProp)(_props.PROP_TYPE_NUMBER_STRING),\n  // When in auto resize mode, disable shrinking to content height\n  noAutoShrink: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  // Disable the resize handle of textarea\n  noResize: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  rows: (0, _props2.makeProp)(_props.PROP_TYPE_NUMBER_STRING, 2),\n  // 'soft', 'hard' or 'off'\n  // Browser default is 'soft'\n  wrap: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'soft')\n})), _components.NAME_FORM_TEXTAREA); // --- Main component ---\n// @vue/component\n\nexports.props = props;\n\nvar BFormTextarea = /*#__PURE__*/_vue.Vue.extend({\n  name: _components.NAME_FORM_TEXTAREA,\n  directives: {\n    'b-visible': _visible.VBVisible\n  },\n  // Mixin order is important!\n  mixins: [_listeners.listenersMixin, _id.idMixin, _listenOnRoot.listenOnRootMixin, _formControl.formControlMixin, _formSize.formSizeMixin, _formState.formStateMixin, _formText.formTextMixin, _formSelection.formSelectionMixin, _formValidity.formValidityMixin],\n  props: props,\n  data: function data() {\n    return {\n      heightInPx: null\n    };\n  },\n  computed: {\n    computedStyle: function computedStyle() {\n      var styles = {\n        // Setting `noResize` to true will disable the ability for the user to\n        // manually resize the textarea. We also disable when in auto height mode\n        resize: !this.computedRows || this.noResize ? 'none' : null\n      };\n\n      if (!this.computedRows) {\n        // Conditionally set the computed CSS height when auto rows/height is enabled\n        // We avoid setting the style to `null`, which can override user manual resize handle\n        styles.height = this.heightInPx; // We always add a vertical scrollbar to the textarea when auto-height is\n        // enabled so that the computed height calculation returns a stable value\n\n        styles.overflowY = 'scroll';\n      }\n\n      return styles;\n    },\n    computedMinRows: function computedMinRows() {\n      // Ensure rows is at least 2 and positive (2 is the native textarea value)\n      // A value of 1 can cause issues in some browsers, and most browsers\n      // only support 2 as the smallest value\n      return (0, _math.mathMax)((0, _number.toInteger)(this.rows, 2), 2);\n    },\n    computedMaxRows: function computedMaxRows() {\n      return (0, _math.mathMax)(this.computedMinRows, (0, _number.toInteger)(this.maxRows, 0));\n    },\n    computedRows: function computedRows() {\n      // This is used to set the attribute 'rows' on the textarea\n      // If auto-height is enabled, then we return `null` as we use CSS to control height\n      return this.computedMinRows === this.computedMaxRows ? this.computedMinRows : null;\n    },\n    computedAttrs: function computedAttrs() {\n      var disabled = this.disabled,\n          required = this.required;\n      return {\n        id: this.safeId(),\n        name: this.name || null,\n        form: this.form || null,\n        disabled: disabled,\n        placeholder: this.placeholder || null,\n        required: required,\n        autocomplete: this.autocomplete || null,\n        readonly: this.readonly || this.plaintext,\n        rows: this.computedRows,\n        wrap: this.wrap || null,\n        'aria-required': this.required ? 'true' : null,\n        'aria-invalid': this.computedAriaInvalid\n      };\n    },\n    computedListeners: function computedListeners() {\n      return _objectSpread(_objectSpread({}, this.bvListeners), {}, {\n        input: this.onInput,\n        change: this.onChange,\n        blur: this.onBlur\n      });\n    }\n  },\n  watch: {\n    localValue: function localValue() {\n      this.setHeight();\n    }\n  },\n  mounted: function mounted() {\n    this.setHeight();\n  },\n  methods: {\n    // Called by intersection observer directive\n\n    /* istanbul ignore next */\n    visibleCallback: function visibleCallback(visible) {\n      if (visible) {\n        // We use a `$nextTick()` here just to make sure any\n        // transitions or portalling have completed\n        this.$nextTick(this.setHeight);\n      }\n    },\n    setHeight: function setHeight() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        (0, _dom.requestAF)(function () {\n          _this.heightInPx = _this.computeHeight();\n        });\n      });\n    },\n\n    /* istanbul ignore next: can't test getComputedStyle in JSDOM */\n    computeHeight: function computeHeight() {\n      if (this.$isServer || !(0, _inspect.isNull)(this.computedRows)) {\n        return null;\n      }\n\n      var el = this.$el; // Element must be visible (not hidden) and in document\n      // Must be checked after above checks\n\n      if (!(0, _dom.isVisible)(el)) {\n        return null;\n      } // Get current computed styles\n\n\n      var computedStyle = (0, _dom.getCS)(el); // Height of one line of text in px\n\n      var lineHeight = (0, _number.toFloat)(computedStyle.lineHeight, 1); // Calculate height of border and padding\n\n      var border = (0, _number.toFloat)(computedStyle.borderTopWidth, 0) + (0, _number.toFloat)(computedStyle.borderBottomWidth, 0);\n      var padding = (0, _number.toFloat)(computedStyle.paddingTop, 0) + (0, _number.toFloat)(computedStyle.paddingBottom, 0); // Calculate offset\n\n      var offset = border + padding; // Minimum height for min rows (which must be 2 rows or greater for cross-browser support)\n\n      var minHeight = lineHeight * this.computedMinRows + offset; // Get the current style height (with `px` units)\n\n      var oldHeight = (0, _dom.getStyle)(el, 'height') || computedStyle.height; // Probe scrollHeight by temporarily changing the height to `auto`\n\n      (0, _dom.setStyle)(el, 'height', 'auto');\n      var scrollHeight = el.scrollHeight; // Place the original old height back on the element, just in case `computedProp`\n      // returns the same value as before\n\n      (0, _dom.setStyle)(el, 'height', oldHeight); // Calculate content height in 'rows' (scrollHeight includes padding but not border)\n\n      var contentRows = (0, _math.mathMax)((scrollHeight - padding) / lineHeight, 2); // Calculate number of rows to display (limited within min/max rows)\n\n      var rows = (0, _math.mathMin)((0, _math.mathMax)(contentRows, this.computedMinRows), this.computedMaxRows); // Calculate the required height of the textarea including border and padding (in pixels)\n\n      var height = (0, _math.mathMax)((0, _math.mathCeil)(rows * lineHeight + offset), minHeight); // Computed height remains the larger of `oldHeight` and new `height`,\n      // when height is in `sticky` mode (prop `no-auto-shrink` is true)\n\n      if (this.noAutoShrink && (0, _number.toFloat)(oldHeight, 0) > height) {\n        return oldHeight;\n      } // Return the new computed CSS height in px units\n\n\n      return \"\".concat(height, \"px\");\n    }\n  },\n  render: function render(h) {\n    return h('textarea', {\n      class: this.computedClass,\n      style: this.computedStyle,\n      directives: [{\n        name: 'b-visible',\n        value: this.visibleCallback,\n        // If textarea is within 640px of viewport, consider it visible\n        modifiers: {\n          '640': true\n        }\n      }],\n      attrs: this.computedAttrs,\n      domProps: {\n        value: this.localValue\n      },\n      on: this.computedListeners,\n      ref: 'input'\n    });\n  }\n});\n\nexports.BFormTextarea = BFormTextarea;"},"sourceMaps":null,"error":null,"hash":"65111c3821c05aa97e912723b706363a","cacheData":{"env":{}}}