{"id":"../node_modules/bootstrap-vue/esm/utils/events.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../constants/env","loc":{"line":1,"column":42,"index":42},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/env.js"},{"name":"../constants/events","loc":{"line":2,"column":66,"index":128},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/events.js"},{"name":"../constants/regex","loc":{"line":3,"column":29,"index":180},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/regex.js"},{"name":"./inspect","loc":{"line":4,"column":25,"index":227},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"./string","loc":{"line":5,"column":26,"index":266},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/string.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stopEvent = exports.parseEventOptions = exports.getRootEventName = exports.getRootActionEventName = exports.eventOnOff = exports.eventOn = exports.eventOff = void 0;\n\nvar _env = require(\"../constants/env\");\n\nvar _events = require(\"../constants/events\");\n\nvar _regex = require(\"../constants/regex\");\n\nvar _inspect = require(\"./inspect\");\n\nvar _string = require(\"./string\");\n\n// --- Utils ---\n// Normalize event options based on support of passive option\n// Exported only for testing purposes\nvar parseEventOptions = function parseEventOptions(options) {\n  /* istanbul ignore else: can't test in JSDOM, as it supports passive */\n  if (_env.HAS_PASSIVE_EVENT_SUPPORT) {\n    return (0, _inspect.isObject)(options) ? options : {\n      capture: !!options || false\n    };\n  } else {\n    // Need to translate to actual Boolean value\n    return !!((0, _inspect.isObject)(options) ? options.capture : options);\n  }\n}; // Attach an event listener to an element\n\n\nexports.parseEventOptions = parseEventOptions;\n\nvar eventOn = function eventOn(el, eventName, handler, options) {\n  if (el && el.addEventListener) {\n    el.addEventListener(eventName, handler, parseEventOptions(options));\n  }\n}; // Remove an event listener from an element\n\n\nexports.eventOn = eventOn;\n\nvar eventOff = function eventOff(el, eventName, handler, options) {\n  if (el && el.removeEventListener) {\n    el.removeEventListener(eventName, handler, parseEventOptions(options));\n  }\n}; // Utility method to add/remove a event listener based on first argument (boolean)\n// It passes all other arguments to the `eventOn()` or `eventOff` method\n\n\nexports.eventOff = eventOff;\n\nvar eventOnOff = function eventOnOff(on) {\n  var method = on ? eventOn : eventOff;\n\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  method.apply(void 0, args);\n}; // Utility method to prevent the default event handling and propagation\n\n\nexports.eventOnOff = eventOnOff;\n\nvar stopEvent = function stopEvent(event) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$preventDefault = _ref.preventDefault,\n      preventDefault = _ref$preventDefault === void 0 ? true : _ref$preventDefault,\n      _ref$propagation = _ref.propagation,\n      propagation = _ref$propagation === void 0 ? true : _ref$propagation,\n      _ref$immediatePropaga = _ref.immediatePropagation,\n      immediatePropagation = _ref$immediatePropaga === void 0 ? false : _ref$immediatePropaga;\n\n  if (preventDefault) {\n    event.preventDefault();\n  }\n\n  if (propagation) {\n    event.stopPropagation();\n  }\n\n  if (immediatePropagation) {\n    event.stopImmediatePropagation();\n  }\n}; // Helper method to convert a component/directive name to a base event name\n// `getBaseEventName('BNavigationItem')` => 'navigation-item'\n// `getBaseEventName('BVToggle')` => 'toggle'\n\n\nexports.stopEvent = stopEvent;\n\nvar getBaseEventName = function getBaseEventName(value) {\n  return (0, _string.kebabCase)(value.replace(_regex.RX_BV_PREFIX, ''));\n}; // Get a root event name by component/directive and event name\n// `getBaseEventName('BModal', 'show')` => 'bv::modal::show'\n\n\nvar getRootEventName = function getRootEventName(name, eventName) {\n  return [_events.ROOT_EVENT_NAME_PREFIX, getBaseEventName(name), eventName].join(_events.ROOT_EVENT_NAME_SEPARATOR);\n}; // Get a root action event name by component/directive and action name\n// `getRootActionEventName('BModal', 'show')` => 'bv::show::modal'\n\n\nexports.getRootEventName = getRootEventName;\n\nvar getRootActionEventName = function getRootActionEventName(name, actionName) {\n  return [_events.ROOT_EVENT_NAME_PREFIX, actionName, getBaseEventName(name)].join(_events.ROOT_EVENT_NAME_SEPARATOR);\n};\n\nexports.getRootActionEventName = getRootActionEventName;"},"sourceMaps":null,"error":null,"hash":"62e10a4913522c13a9f60f7155f8846a","cacheData":{"env":{}}}