{"id":"../node_modules/bootstrap-vue/esm/utils/config.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../vue","loc":{"line":1,"column":20,"index":20},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/config.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../constants/config","loc":{"line":2,"column":46,"index":76},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/config.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/config.js"},{"name":"./clone-deep","loc":{"line":3,"column":26,"index":125},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/config.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/clone-deep.js"},{"name":"./memoize","loc":{"line":4,"column":24,"index":165},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/config.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/memoize.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getConfigValue = exports.getConfig = exports.getComponentConfig = exports.getBreakpointsUpCached = exports.getBreakpointsUp = exports.getBreakpointsDownCached = exports.getBreakpointsDown = exports.getBreakpointsCached = exports.getBreakpoints = void 0;\n\nvar _vue = require(\"../vue\");\n\nvar _config = require(\"../constants/config\");\n\nvar _cloneDeep = require(\"./clone-deep\");\n\nvar _memoize = require(\"./memoize\");\n\n// --- Constants ---\nvar VueProto = _vue.Vue.prototype; // --- Getter methods ---\n// All methods return a deep clone (immutable) copy of the config value,\n// to prevent mutation of the user config object\n// Get the current config\n\nvar getConfig = function getConfig() {\n  var bvConfig = VueProto[_config.PROP_NAME];\n  return bvConfig ? bvConfig.getConfig() : {};\n}; // Method to grab a config value based on a dotted/array notation key\n\n\nexports.getConfig = getConfig;\n\nvar getConfigValue = function getConfigValue(key) {\n  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var bvConfig = VueProto[_config.PROP_NAME];\n  return bvConfig ? bvConfig.getConfigValue(key, defaultValue) : (0, _cloneDeep.cloneDeep)(defaultValue);\n}; // Method to grab a config value for a particular component\n\n\nexports.getConfigValue = getConfigValue;\n\nvar getComponentConfig = function getComponentConfig(key) {\n  var propKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined; // Return the particular config value for key if specified,\n  // otherwise we return the full config (or an empty object if not found)\n\n  return propKey ? getConfigValue(\"\".concat(key, \".\").concat(propKey), defaultValue) : getConfigValue(key, {});\n}; // Get all breakpoint names\n\n\nexports.getComponentConfig = getComponentConfig;\n\nvar getBreakpoints = function getBreakpoints() {\n  return getConfigValue('breakpoints', _config.DEFAULT_BREAKPOINT);\n}; // Private method for caching breakpoint names\n\n\nexports.getBreakpoints = getBreakpoints;\n\nvar _getBreakpointsCached = (0, _memoize.memoize)(function () {\n  return getBreakpoints();\n}); // Get all breakpoint names (cached)\n\n\nvar getBreakpointsCached = function getBreakpointsCached() {\n  return (0, _cloneDeep.cloneDeep)(_getBreakpointsCached());\n}; // Get breakpoints with the smallest breakpoint set as ''\n// Useful for components that create breakpoint specific props\n\n\nexports.getBreakpointsCached = getBreakpointsCached;\n\nvar getBreakpointsUp = function getBreakpointsUp() {\n  var breakpoints = getBreakpoints();\n  breakpoints[0] = '';\n  return breakpoints;\n}; // Get breakpoints with the smallest breakpoint set as '' (cached)\n// Useful for components that create breakpoint specific props\n\n\nexports.getBreakpointsUp = getBreakpointsUp;\nvar getBreakpointsUpCached = (0, _memoize.memoize)(function () {\n  var breakpoints = getBreakpointsCached();\n  breakpoints[0] = '';\n  return breakpoints;\n}); // Get breakpoints with the largest breakpoint set as ''\n\nexports.getBreakpointsUpCached = getBreakpointsUpCached;\n\nvar getBreakpointsDown = function getBreakpointsDown() {\n  var breakpoints = getBreakpoints();\n  breakpoints[breakpoints.length - 1] = '';\n  return breakpoints;\n}; // Get breakpoints with the largest breakpoint set as '' (cached)\n// Useful for components that create breakpoint specific props\n\n/* istanbul ignore next: we don't use this method anywhere, yet */\n\n\nexports.getBreakpointsDown = getBreakpointsDown;\n\nvar getBreakpointsDownCached = function getBreakpointsDownCached() {\n  var breakpoints = getBreakpointsCached();\n  breakpoints[breakpoints.length - 1] = '';\n  return breakpoints;\n};\n\nexports.getBreakpointsDownCached = getBreakpointsDownCached;"},"sourceMaps":null,"error":null,"hash":"6594c3a1f622d9503cb8ec0636d2607f","cacheData":{"env":{}}}