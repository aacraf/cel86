{"id":"../node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../vue","loc":{"line":10,"column":20,"index":1189},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../constants/components","loc":{"line":11,"column":47,"index":1249},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/components.js"},{"name":"../../constants/props","loc":{"line":12,"column":83,"index":1362},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../../constants/slots","loc":{"line":13,"column":60,"index":1447},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/slots.js"},{"name":"../../utils/dom","loc":{"line":14,"column":42,"index":1514},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js"},{"name":"../../utils/events","loc":{"line":15,"column":26,"index":1559},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js"},{"name":"../../utils/object","loc":{"line":16,"column":31,"index":1612},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../../utils/props","loc":{"line":17,"column":25,"index":1659},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"../../utils/string","loc":{"line":18,"column":25,"index":1705},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/string.js"},{"name":"../../mixins/dropdown","loc":{"line":19,"column":54,"index":1781},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/dropdown.js"},{"name":"../../mixins/form-control","loc":{"line":20,"column":42,"index":1848},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-control.js"},{"name":"../../mixins/form-size","loc":{"line":21,"column":54,"index":1931},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-size.js"},{"name":"../../mixins/form-state","loc":{"line":22,"column":56,"index":2013},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-state.js"},{"name":"../../mixins/id","loc":{"line":23,"column":42,"index":2082},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/id.js"},{"name":"../../mixins/normalize-slot","loc":{"line":24,"column":35,"index":2136},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/normalize-slot.js"},{"name":"../../directives/hover/hover","loc":{"line":25,"column":24,"index":2191},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/hover/hover.js"},{"name":"../../icons/icons","loc":{"line":26,"column":33,"index":2256},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-btn-label-control/bv-form-btn-label-control.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/icons/icons.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.BVFormBtnLabelControl = void 0;\n\nvar _vue = require(\"../../vue\");\n\nvar _components = require(\"../../constants/components\");\n\nvar _props = require(\"../../constants/props\");\n\nvar _slots = require(\"../../constants/slots\");\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _events = require(\"../../utils/events\");\n\nvar _object = require(\"../../utils/object\");\n\nvar _props2 = require(\"../../utils/props\");\n\nvar _string = require(\"../../utils/string\");\n\nvar _dropdown = require(\"../../mixins/dropdown\");\n\nvar _formControl = require(\"../../mixins/form-control\");\n\nvar _formSize = require(\"../../mixins/form-size\");\n\nvar _formState = require(\"../../mixins/form-state\");\n\nvar _id = require(\"../../mixins/id\");\n\nvar _normalizeSlot = require(\"../../mixins/normalize-slot\");\n\nvar _hover = require(\"../../directives/hover/hover\");\n\nvar _icons = require(\"../../icons/icons\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} //\n// Private component used by `b-form-datepicker` and `b-form-timepicker`\n//\n\n\n// --- Props ---\nvar props = (0, _object.sortKeys)(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _id.props), _formSize.props), _formState.props), (0, _object.omit)(_dropdown.props, ['disabled'])), (0, _object.omit)(_formControl.props, ['autofocus'])), {}, {\n  // When `true`, renders a `btn-group` wrapper and visually hides the label\n  buttonOnly: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  // Applicable in button mode only\n  buttonVariant: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'secondary'),\n  // This is the value shown in the label\n  // Defaults back to `value`\n  formattedValue: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  // Value placed in `.sr-only` span inside label when value is present\n  labelSelected: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  lang: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  // Extra classes to apply to the `dropdown-menu` div\n  menuClass: (0, _props2.makeProp)(_props.PROP_TYPE_ARRAY_OBJECT_STRING),\n  // This is the value placed on the hidden input when no value selected\n  placeholder: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  readonly: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  // Tri-state prop: `true`, `false` or `null`\n  rtl: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, null),\n  value: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, '')\n})); // --- Main component ---\n// @vue/component\n\nexports.props = props;\n\nvar BVFormBtnLabelControl = /*#__PURE__*/_vue.Vue.extend({\n  name: _components.NAME_FORM_BUTTON_LABEL_CONTROL,\n  directives: {\n    'b-hover': _hover.VBHover\n  },\n  mixins: [_id.idMixin, _formSize.formSizeMixin, _formState.formStateMixin, _dropdown.dropdownMixin, _normalizeSlot.normalizeSlotMixin],\n  props: props,\n  data: function data() {\n    return {\n      isHovered: false,\n      hasFocus: false\n    };\n  },\n  computed: {\n    idButton: function idButton() {\n      return this.safeId();\n    },\n    idLabel: function idLabel() {\n      return this.safeId('_value_');\n    },\n    idMenu: function idMenu() {\n      return this.safeId('_dialog_');\n    },\n    idWrapper: function idWrapper() {\n      return this.safeId('_outer_');\n    },\n    computedDir: function computedDir() {\n      return this.rtl === true ? 'rtl' : this.rtl === false ? 'ltr' : null;\n    }\n  },\n  methods: {\n    focus: function focus() {\n      if (!this.disabled) {\n        (0, _dom.attemptFocus)(this.$refs.toggle);\n      }\n    },\n    blur: function blur() {\n      if (!this.disabled) {\n        (0, _dom.attemptBlur)(this.$refs.toggle);\n      }\n    },\n    setFocus: function setFocus(event) {\n      this.hasFocus = event.type === 'focus';\n    },\n    handleHover: function handleHover(hovered) {\n      this.isHovered = hovered;\n    }\n  },\n  render: function render(h) {\n    var _class;\n\n    var idButton = this.idButton,\n        idLabel = this.idLabel,\n        idMenu = this.idMenu,\n        idWrapper = this.idWrapper,\n        disabled = this.disabled,\n        readonly = this.readonly,\n        required = this.required,\n        name = this.name,\n        state = this.state,\n        visible = this.visible,\n        size = this.size,\n        isHovered = this.isHovered,\n        hasFocus = this.hasFocus,\n        labelSelected = this.labelSelected,\n        buttonVariant = this.buttonVariant,\n        buttonOnly = this.buttonOnly;\n    var value = (0, _string.toString)(this.value) || '';\n    var invalid = state === false || required && !value;\n    var btnScope = {\n      isHovered: isHovered,\n      hasFocus: hasFocus,\n      state: state,\n      opened: visible\n    };\n    var $button = h('button', {\n      staticClass: 'btn',\n      class: (_class = {}, _defineProperty(_class, \"btn-\".concat(buttonVariant), buttonOnly), _defineProperty(_class, \"btn-\".concat(size), size), _defineProperty(_class, 'h-auto', !buttonOnly), _defineProperty(_class, 'dropdown-toggle', buttonOnly), _defineProperty(_class, 'dropdown-toggle-no-caret', buttonOnly), _class),\n      attrs: {\n        id: idButton,\n        type: 'button',\n        disabled: disabled,\n        'aria-haspopup': 'dialog',\n        'aria-expanded': visible ? 'true' : 'false',\n        'aria-invalid': invalid ? 'true' : null,\n        'aria-required': required ? 'true' : null\n      },\n      directives: [{\n        name: 'b-hover',\n        value: this.handleHover\n      }],\n      on: {\n        mousedown: this.onMousedown,\n        click: this.toggle,\n        keydown: this.toggle,\n        // Handle ENTER, SPACE and DOWN\n        '!focus': this.setFocus,\n        '!blur': this.setFocus\n      },\n      ref: 'toggle'\n    }, [this.hasNormalizedSlot(_slots.SLOT_NAME_BUTTON_CONTENT) ? this.normalizeSlot(_slots.SLOT_NAME_BUTTON_CONTENT, btnScope) :\n    /* istanbul ignore next */\n    h(_icons.BIconChevronDown, {\n      props: {\n        scale: 1.25\n      }\n    })]); // Hidden input\n\n    var $hidden = h();\n\n    if (name && !disabled) {\n      $hidden = h('input', {\n        attrs: {\n          type: 'hidden',\n          name: name || null,\n          form: this.form || null,\n          value: value\n        }\n      });\n    } // Dropdown content\n\n\n    var $menu = h('div', {\n      staticClass: 'dropdown-menu',\n      class: [this.menuClass, {\n        show: visible,\n        'dropdown-menu-right': this.right\n      }],\n      attrs: {\n        id: idMenu,\n        role: 'dialog',\n        tabindex: '-1',\n        'aria-modal': 'false',\n        'aria-labelledby': idLabel\n      },\n      on: {\n        keydown: this.onKeydown // Handle ESC\n\n      },\n      ref: 'menu'\n    }, [this.normalizeSlot(_slots.SLOT_NAME_DEFAULT, {\n      opened: visible\n    })]); // Value label\n\n    var $label = h('label', {\n      class: buttonOnly ? 'sr-only' // Hidden in button only mode\n      : ['form-control', // Mute the text if showing the placeholder\n      {\n        'text-muted': !value\n      }, this.stateClass, this.sizeFormClass],\n      attrs: {\n        id: idLabel,\n        for: idButton,\n        'aria-invalid': invalid ? 'true' : null,\n        'aria-required': required ? 'true' : null\n      },\n      directives: [{\n        name: 'b-hover',\n        value: this.handleHover\n      }],\n      on: {\n        // Disable bubbling of the click event to\n        // prevent menu from closing and re-opening\n        '!click':\n        /* istanbul ignore next */\n        function click(event) {\n          (0, _events.stopEvent)(event, {\n            preventDefault: false\n          });\n        }\n      }\n    }, [value ? this.formattedValue || value : this.placeholder || '', // Add the selected label for screen readers when a value is provided\n    value && labelSelected ? h('bdi', {\n      staticClass: 'sr-only'\n    }, labelSelected) : '']); // Return the custom form control wrapper\n\n    return h('div', {\n      staticClass: 'b-form-btn-label-control dropdown',\n      class: [this.directionClass, this.boundaryClass, [{\n        'btn-group': buttonOnly,\n        'form-control': !buttonOnly,\n        focus: hasFocus && !buttonOnly,\n        show: visible,\n        'is-valid': state === true,\n        'is-invalid': state === false\n      }, buttonOnly ? null : this.sizeFormClass]],\n      attrs: {\n        id: idWrapper,\n        role: buttonOnly ? null : 'group',\n        lang: this.lang || null,\n        dir: this.computedDir,\n        'aria-disabled': disabled,\n        'aria-readonly': readonly && !disabled,\n        'aria-labelledby': idLabel,\n        'aria-invalid': state === false || required && !value ? 'true' : null,\n        'aria-required': required ? 'true' : null\n      }\n    }, [$button, $hidden, $menu, $label]);\n  }\n});\n\nexports.BVFormBtnLabelControl = BVFormBtnLabelControl;"},"sourceMaps":null,"error":null,"hash":"4fd5848118c52f2a16b5e6065177c3b5","cacheData":{"env":{}}}