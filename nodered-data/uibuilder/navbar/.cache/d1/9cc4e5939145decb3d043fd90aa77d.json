{"id":"../node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../vue","loc":{"line":9,"column":20,"index":1133},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../constants/props","loc":{"line":10,"column":67,"index":1210},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../constants/events","loc":{"line":11,"column":34,"index":1266},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/events.js"},{"name":"../utils/dom","loc":{"line":12,"column":42,"index":1331},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js"},{"name":"../utils/inspect","loc":{"line":13,"column":26,"index":1373},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../utils/loose-equal","loc":{"line":14,"column":27,"index":1420},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/loose-equal.js"},{"name":"../utils/model","loc":{"line":15,"column":31,"index":1475},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/model.js"},{"name":"../utils/object","loc":{"line":16,"column":25,"index":1518},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../utils/props","loc":{"line":17,"column":48,"index":1585},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"./attrs","loc":{"line":18,"column":27,"index":1630},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/attrs.js"},{"name":"./form-control","loc":{"line":19,"column":60,"index":1701},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-control.js"},{"name":"./form-custom","loc":{"line":20,"column":58,"index":1777},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-custom.js"},{"name":"./form-size","loc":{"line":21,"column":54,"index":1848},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-size.js"},{"name":"./form-state","loc":{"line":22,"column":56,"index":1919},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-state.js"},{"name":"./id","loc":{"line":23,"column":42,"index":1977},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/id.js"},{"name":"./normalize-slot","loc":{"line":24,"column":35,"index":2020},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/normalize-slot.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.formRadioCheckMixin = exports.MODEL_PROP_NAME = exports.MODEL_EVENT_NAME = void 0;\n\nvar _vue = require(\"../vue\");\n\nvar _props = require(\"../constants/props\");\n\nvar _events = require(\"../constants/events\");\n\nvar _dom = require(\"../utils/dom\");\n\nvar _inspect = require(\"../utils/inspect\");\n\nvar _looseEqual = require(\"../utils/loose-equal\");\n\nvar _model = require(\"../utils/model\");\n\nvar _object = require(\"../utils/object\");\n\nvar _props2 = require(\"../utils/props\");\n\nvar _attrs = require(\"./attrs\");\n\nvar _formControl = require(\"./form-control\");\n\nvar _formCustom = require(\"./form-custom\");\n\nvar _formSize = require(\"./form-size\");\n\nvar _formState = require(\"./form-state\");\n\nvar _id = require(\"./id\");\n\nvar _normalizeSlot = require(\"./normalize-slot\");\n\nvar _watch, _methods;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n// --- Constants ---\nvar _makeModelMixin = (0, _model.makeModelMixin)('checked', {\n  defaultValue: null\n}),\n    modelMixin = _makeModelMixin.mixin,\n    modelProps = _makeModelMixin.props,\n    MODEL_PROP_NAME = _makeModelMixin.prop,\n    MODEL_EVENT_NAME = _makeModelMixin.event;\n\nexports.MODEL_EVENT_NAME = MODEL_EVENT_NAME;\nexports.MODEL_PROP_NAME = MODEL_PROP_NAME;\n// --- Props ---\nvar props = (0, _props2.makePropsConfigurable)((0, _object.sortKeys)(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _id.props), modelProps), _formControl.props), _formSize.props), _formState.props), _formCustom.props), {}, {\n  ariaLabel: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  ariaLabelledby: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  // Only applicable in standalone mode (non group)\n  button: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  // Only applicable when rendered with button style\n  buttonVariant: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  inline: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  value: (0, _props2.makeProp)(_props.PROP_TYPE_ANY)\n})), 'formRadioCheckControls'); // --- Mixin ---\n// @vue/component\n\nexports.props = props;\n\nvar formRadioCheckMixin = _vue.Vue.extend({\n  mixins: [_attrs.attrsMixin, _id.idMixin, modelMixin, _normalizeSlot.normalizeSlotMixin, _formControl.formControlMixin, _formSize.formSizeMixin, _formState.formStateMixin, _formCustom.formCustomMixin],\n  inheritAttrs: false,\n  props: props,\n  data: function data() {\n    return {\n      localChecked: this.isGroup ? this.bvGroup[MODEL_PROP_NAME] : this[MODEL_PROP_NAME],\n      hasFocus: false\n    };\n  },\n  computed: {\n    computedLocalChecked: {\n      get: function get() {\n        return this.isGroup ? this.bvGroup.localChecked : this.localChecked;\n      },\n      set: function set(value) {\n        if (this.isGroup) {\n          this.bvGroup.localChecked = value;\n        } else {\n          this.localChecked = value;\n        }\n      }\n    },\n    isChecked: function isChecked() {\n      return (0, _looseEqual.looseEqual)(this.value, this.computedLocalChecked);\n    },\n    isRadio: function isRadio() {\n      return true;\n    },\n    isGroup: function isGroup() {\n      // Is this check/radio a child of check-group or radio-group?\n      return !!this.bvGroup;\n    },\n    isBtnMode: function isBtnMode() {\n      // Support button style in single input mode\n      return this.isGroup ? this.bvGroup.buttons : this.button;\n    },\n    isPlain: function isPlain() {\n      return this.isBtnMode ? false : this.isGroup ? this.bvGroup.plain : this.plain;\n    },\n    isCustom: function isCustom() {\n      return this.isBtnMode ? false : !this.isPlain;\n    },\n    isSwitch: function isSwitch() {\n      // Custom switch styling (checkboxes only)\n      return this.isBtnMode || this.isRadio || this.isPlain ? false : this.isGroup ? this.bvGroup.switches : this.switch;\n    },\n    isInline: function isInline() {\n      return this.isGroup ? this.bvGroup.inline : this.inline;\n    },\n    isDisabled: function isDisabled() {\n      // Child can be disabled while parent isn't, but is always disabled if group is\n      return this.isGroup ? this.bvGroup.disabled || this.disabled : this.disabled;\n    },\n    isRequired: function isRequired() {\n      // Required only works when a name is provided for the input(s)\n      // Child can only be required when parent is\n      // Groups will always have a name (either user supplied or auto generated)\n      return this.computedName && (this.isGroup ? this.bvGroup.required : this.required);\n    },\n    computedName: function computedName() {\n      // Group name preferred over local name\n      return (this.isGroup ? this.bvGroup.groupName : this.name) || null;\n    },\n    computedForm: function computedForm() {\n      return (this.isGroup ? this.bvGroup.form : this.form) || null;\n    },\n    computedSize: function computedSize() {\n      return (this.isGroup ? this.bvGroup.size : this.size) || '';\n    },\n    computedState: function computedState() {\n      return this.isGroup ? this.bvGroup.computedState : (0, _inspect.isBoolean)(this.state) ? this.state : null;\n    },\n    computedButtonVariant: function computedButtonVariant() {\n      // Local variant preferred over group variant\n      var buttonVariant = this.buttonVariant;\n\n      if (buttonVariant) {\n        return buttonVariant;\n      }\n\n      if (this.isGroup && this.bvGroup.buttonVariant) {\n        return this.bvGroup.buttonVariant;\n      }\n\n      return 'secondary';\n    },\n    buttonClasses: function buttonClasses() {\n      var _ref;\n\n      var computedSize = this.computedSize;\n      return ['btn', \"btn-\".concat(this.computedButtonVariant), (_ref = {}, _defineProperty(_ref, \"btn-\".concat(computedSize), computedSize), _defineProperty(_ref, \"disabled\", this.isDisabled), _defineProperty(_ref, \"active\", this.isChecked), _defineProperty(_ref, \"focus\", this.hasFocus), _ref)];\n    },\n    computedAttrs: function computedAttrs() {\n      var disabled = this.isDisabled,\n          required = this.isRequired;\n      return _objectSpread(_objectSpread({}, this.bvAttrs), {}, {\n        id: this.safeId(),\n        type: this.isRadio ? 'radio' : 'checkbox',\n        name: this.computedName,\n        form: this.computedForm,\n        disabled: disabled,\n        required: required,\n        'aria-required': required || null,\n        'aria-label': this.ariaLabel || null,\n        'aria-labelledby': this.ariaLabelledby || null\n      });\n    }\n  },\n  watch: (_watch = {}, _defineProperty(_watch, MODEL_PROP_NAME, function () {\n    this[\"\".concat(MODEL_PROP_NAME, \"Watcher\")].apply(this, arguments);\n  }), _defineProperty(_watch, \"computedLocalChecked\", function computedLocalChecked() {\n    this.computedLocalCheckedWatcher.apply(this, arguments);\n  }), _watch),\n  methods: (_methods = {}, _defineProperty(_methods, \"\".concat(MODEL_PROP_NAME, \"Watcher\"), function Watcher(newValue) {\n    if (!(0, _looseEqual.looseEqual)(newValue, this.computedLocalChecked)) {\n      this.computedLocalChecked = newValue;\n    }\n  }), _defineProperty(_methods, \"computedLocalCheckedWatcher\", function computedLocalCheckedWatcher(newValue, oldValue) {\n    if (!(0, _looseEqual.looseEqual)(newValue, oldValue)) {\n      this.$emit(MODEL_EVENT_NAME, newValue);\n    }\n  }), _defineProperty(_methods, \"handleChange\", function handleChange(_ref2) {\n    var _this = this;\n\n    var checked = _ref2.target.checked;\n    var value = this.value;\n    var localChecked = checked ? value : null;\n    this.computedLocalChecked = value; // Fire events in a `$nextTick()` to ensure the `v-model` is updated\n\n    this.$nextTick(function () {\n      // Change is only emitted on user interaction\n      _this.$emit(_events.EVENT_NAME_CHANGE, localChecked); // If this is a child of a group, we emit a change event on it as well\n\n\n      if (_this.isGroup) {\n        _this.bvGroup.$emit(_events.EVENT_NAME_CHANGE, localChecked);\n      }\n    });\n  }), _defineProperty(_methods, \"handleFocus\", function handleFocus(event) {\n    // When in buttons mode, we need to add 'focus' class to label when input focused\n    // As it is the hidden input which has actual focus\n    if (event.target) {\n      if (event.type === 'focus') {\n        this.hasFocus = true;\n      } else if (event.type === 'blur') {\n        this.hasFocus = false;\n      }\n    }\n  }), _defineProperty(_methods, \"focus\", function focus() {\n    if (!this.isDisabled) {\n      (0, _dom.attemptFocus)(this.$refs.input);\n    }\n  }), _defineProperty(_methods, \"blur\", function blur() {\n    if (!this.isDisabled) {\n      (0, _dom.attemptBlur)(this.$refs.input);\n    }\n  }), _methods),\n  render: function render(h) {\n    var isRadio = this.isRadio,\n        isBtnMode = this.isBtnMode,\n        isPlain = this.isPlain,\n        isCustom = this.isCustom,\n        isInline = this.isInline,\n        isSwitch = this.isSwitch,\n        computedSize = this.computedSize,\n        bvAttrs = this.bvAttrs;\n    var $content = this.normalizeSlot();\n    var $input = h('input', {\n      class: [{\n        'form-check-input': isPlain,\n        'custom-control-input': isCustom,\n        // https://github.com/bootstrap-vue/bootstrap-vue/issues/2911\n        'position-static': isPlain && !$content\n      }, isBtnMode ? '' : this.stateClass],\n      directives: [{\n        name: 'model',\n        value: this.computedLocalChecked\n      }],\n      attrs: this.computedAttrs,\n      domProps: {\n        value: this.value,\n        checked: this.isChecked\n      },\n      on: _objectSpread({\n        change: this.handleChange\n      }, isBtnMode ? {\n        focus: this.handleFocus,\n        blur: this.handleFocus\n      } : {}),\n      key: 'input',\n      ref: 'input'\n    });\n\n    if (isBtnMode) {\n      var $button = h('label', {\n        class: this.buttonClasses\n      }, [$input, $content]);\n\n      if (!this.isGroup) {\n        // Standalone button mode, so wrap in 'btn-group-toggle'\n        // and flag it as inline-block to mimic regular buttons\n        $button = h('div', {\n          class: ['btn-group-toggle', 'd-inline-block']\n        }, [$button]);\n      }\n\n      return $button;\n    } // If no label content in plain mode we dont render the label\n    // See: https://github.com/bootstrap-vue/bootstrap-vue/issues/2911\n\n\n    var $label = h();\n\n    if (!(isPlain && !$content)) {\n      $label = h('label', {\n        class: {\n          'form-check-label': isPlain,\n          'custom-control-label': isCustom\n        },\n        attrs: {\n          for: this.safeId()\n        }\n      }, $content);\n    }\n\n    return h('div', {\n      class: [_defineProperty({\n        'form-check': isPlain,\n        'form-check-inline': isPlain && isInline,\n        'custom-control': isCustom,\n        'custom-control-inline': isCustom && isInline,\n        'custom-checkbox': isCustom && !isRadio && !isSwitch,\n        'custom-switch': isSwitch,\n        'custom-radio': isCustom && isRadio\n      }, \"b-custom-control-\".concat(computedSize), computedSize && !isBtnMode), bvAttrs.class],\n      style: bvAttrs.style\n    }, [$input, $label]);\n  }\n});\n\nexports.formRadioCheckMixin = formRadioCheckMixin;"},"sourceMaps":null,"error":null,"hash":"8502be67af618c8e20a4ab9f2d31c63f","cacheData":{"env":{}}}