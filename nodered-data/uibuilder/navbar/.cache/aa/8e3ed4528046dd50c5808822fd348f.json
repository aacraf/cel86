{"id":"../node_modules/bootstrap-vue/esm/utils/get.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../constants/regex","loc":{"line":1,"column":34,"index":34},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/get.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/regex.js"},{"name":"./identity","loc":{"line":2,"column":25,"index":81},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/get.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/identity.js"},{"name":"./inspect","loc":{"line":3,"column":61,"index":156},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/get.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRaw = exports.get = void 0;\n\nvar _regex = require(\"../constants/regex\");\n\nvar _identity = require(\"./identity\");\n\nvar _inspect = require(\"./inspect\");\n\n/**\n * Get property defined by dot/array notation in string, returns undefined if not found\n *\n * @link https://gist.github.com/jeneg/9767afdcca45601ea44930ea03e0febf#gistcomment-1935901\n *\n * @param {Object} obj\n * @param {string|Array} path\n * @return {*}\n */\nvar getRaw = function getRaw(obj, path) {\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined; // Handle array of path values\n\n  path = (0, _inspect.isArray)(path) ? path.join('.') : path; // If no path or no object passed\n\n  if (!path || !(0, _inspect.isObject)(obj)) {\n    return defaultValue;\n  } // Handle edge case where user has dot(s) in top-level item field key\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2762\n  // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n  // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n  if (path in obj) {\n    return obj[path];\n  } // Handle string array notation (numeric indices only)\n\n\n  path = String(path).replace(_regex.RX_ARRAY_NOTATION, '.$1');\n  var steps = path.split('.').filter(_identity.identity); // Handle case where someone passes a string of only dots\n\n  if (steps.length === 0) {\n    return defaultValue;\n  } // Traverse path in object to find result\n  // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n  // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n  return steps.every(function (step) {\n    return (0, _inspect.isObject)(obj) && step in obj && !(0, _inspect.isUndefinedOrNull)(obj = obj[step]);\n  }) ? obj : (0, _inspect.isNull)(obj) ? null : defaultValue;\n};\n/**\n * Get property defined by dot/array notation in string.\n *\n * @link https://gist.github.com/jeneg/9767afdcca45601ea44930ea03e0febf#gistcomment-1935901\n *\n * @param {Object} obj\n * @param {string|Array} path\n * @param {*} defaultValue (optional)\n * @return {*}\n */\n\n\nexports.getRaw = getRaw;\n\nvar get = function get(obj, path) {\n  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var value = getRaw(obj, path);\n  return (0, _inspect.isUndefinedOrNull)(value) ? defaultValue : value;\n};\n\nexports.get = get;"},"sourceMaps":null,"error":null,"hash":"1fc657d4e339dfb35ca982cc6195a42c","cacheData":{"env":{}}}