{"id":"../node_modules/bootstrap-vue/esm/components/form-file/form-file.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../vue","loc":{"line":9,"column":20,"index":1123},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../constants/components","loc":{"line":10,"column":31,"index":1167},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/components.js"},{"name":"../../constants/env","loc":{"line":11,"column":36,"index":1233},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/env.js"},{"name":"../../constants/events","loc":{"line":12,"column":57,"index":1313},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/events.js"},{"name":"../../constants/props","loc":{"line":13,"column":89,"index":1428},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../../constants/slots","loc":{"line":14,"column":87,"index":1540},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/slots.js"},{"name":"../../constants/regex","loc":{"line":15,"column":38,"index":1603},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/regex.js"},{"name":"../../constants/safe-types","loc":{"line":16,"column":21,"index":1649},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/safe-types.js"},{"name":"../../utils/array","loc":{"line":17,"column":56,"index":1735},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/array.js"},{"name":"../../utils/clone-deep","loc":{"line":18,"column":26,"index":1782},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/clone-deep.js"},{"name":"../../utils/dom","loc":{"line":19,"column":24,"index":1832},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js"},{"name":"../../utils/events","loc":{"line":20,"column":45,"index":1896},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js"},{"name":"../../utils/identity","loc":{"line":21,"column":25,"index":1943},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/identity.js"},{"name":"../../utils/inspect","loc":{"line":22,"column":71,"index":2038},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../utils/loose-equal","loc":{"line":23,"column":27,"index":2088},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/loose-equal.js"},{"name":"../../utils/model","loc":{"line":24,"column":31,"index":2146},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/model.js"},{"name":"../../utils/object","loc":{"line":25,"column":25,"index":2192},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../../utils/props","loc":{"line":26,"column":65,"index":2279},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"../../utils/string","loc":{"line":27,"column":29,"index":2329},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/string.js"},{"name":"../../utils/warn","loc":{"line":28,"column":21,"index":2372},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/warn.js"},{"name":"../../mixins/attrs","loc":{"line":29,"column":27,"index":2419},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/attrs.js"},{"name":"../../mixins/form-control","loc":{"line":30,"column":60,"index":2501},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-control.js"},{"name":"../../mixins/form-custom","loc":{"line":31,"column":58,"index":2588},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-custom.js"},{"name":"../../mixins/form-state","loc":{"line":32,"column":56,"index":2672},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-state.js"},{"name":"../../mixins/id","loc":{"line":33,"column":42,"index":2741},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/id.js"},{"name":"../../mixins/normalize-slot","loc":{"line":34,"column":35,"index":2795},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/normalize-slot.js"},{"name":"../../mixins/form-size","loc":{"line":35,"column":39,"index":2865},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-file/form-file.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-size.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BFormFile = void 0;\n\nvar _vue = require(\"../../vue\");\n\nvar _components = require(\"../../constants/components\");\n\nvar _env = require(\"../../constants/env\");\n\nvar _events = require(\"../../constants/events\");\n\nvar _props = require(\"../../constants/props\");\n\nvar _slots = require(\"../../constants/slots\");\n\nvar _regex = require(\"../../constants/regex\");\n\nvar _safeTypes = require(\"../../constants/safe-types\");\n\nvar _array = require(\"../../utils/array\");\n\nvar _cloneDeep = require(\"../../utils/clone-deep\");\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _events2 = require(\"../../utils/events\");\n\nvar _identity = require(\"../../utils/identity\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nvar _looseEqual = require(\"../../utils/loose-equal\");\n\nvar _model = require(\"../../utils/model\");\n\nvar _object = require(\"../../utils/object\");\n\nvar _props2 = require(\"../../utils/props\");\n\nvar _string = require(\"../../utils/string\");\n\nvar _warn = require(\"../../utils/warn\");\n\nvar _attrs = require(\"../../mixins/attrs\");\n\nvar _formControl = require(\"../../mixins/form-control\");\n\nvar _formCustom = require(\"../../mixins/form-custom\");\n\nvar _formState = require(\"../../mixins/form-state\");\n\nvar _id = require(\"../../mixins/id\");\n\nvar _normalizeSlot = require(\"../../mixins/normalize-slot\");\n\nvar _formSize = require(\"../../mixins/form-size\");\n\nvar _watch;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n// --- Constants ---\nvar _makeModelMixin = (0, _model.makeModelMixin)('value', {\n  type: [_props.PROP_TYPE_ARRAY, _safeTypes.File],\n  defaultValue: null,\n  validator: function validator(value) {\n    /* istanbul ignore next */\n    if (value === '') {\n      (0, _warn.warn)(VALUE_EMPTY_DEPRECATED_MSG, _components.NAME_FORM_FILE);\n      return true;\n    }\n\n    return (0, _inspect.isUndefinedOrNull)(value) || isValidValue(value);\n  }\n}),\n    modelMixin = _makeModelMixin.mixin,\n    modelProps = _makeModelMixin.props,\n    MODEL_PROP_NAME = _makeModelMixin.prop,\n    MODEL_EVENT_NAME = _makeModelMixin.event;\n\nvar VALUE_EMPTY_DEPRECATED_MSG = 'Setting \"value\"/\"v-model\" to an empty string for reset is deprecated. Set to \"null\" instead.'; // --- Helper methods ---\n\nvar isValidValue = function isValidValue(value) {\n  return (0, _inspect.isFile)(value) || (0, _inspect.isArray)(value) && value.every(function (v) {\n    return isValidValue(v);\n  });\n}; // Helper method to \"safely\" get the entry from a data-transfer item\n\n/* istanbul ignore next: not supported in JSDOM */\n\n\nvar getDataTransferItemEntry = function getDataTransferItemEntry(item) {\n  return (0, _inspect.isFunction)(item.getAsEntry) ? item.getAsEntry() : (0, _inspect.isFunction)(item.webkitGetAsEntry) ? item.webkitGetAsEntry() : null;\n}; // Drop handler function to get all files\n\n/* istanbul ignore next: not supported in JSDOM */\n\n\nvar getAllFileEntries = function getAllFileEntries(dataTransferItemList) {\n  var traverseDirectories = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return Promise.all((0, _array.from)(dataTransferItemList).filter(function (item) {\n    return item.kind === 'file';\n  }).map(function (item) {\n    var entry = getDataTransferItemEntry(item);\n\n    if (entry) {\n      if (entry.isDirectory && traverseDirectories) {\n        return getAllFileEntriesInDirectory(entry.createReader(), \"\".concat(entry.name, \"/\"));\n      } else if (entry.isFile) {\n        return new Promise(function (resolve) {\n          entry.file(function (file) {\n            file.$path = '';\n            resolve(file);\n          });\n        });\n      }\n    }\n\n    return null;\n  }).filter(_identity.identity));\n}; // Get all the file entries (recursive) in a directory\n\n/* istanbul ignore next: not supported in JSDOM */\n\n\nvar getAllFileEntriesInDirectory = function getAllFileEntriesInDirectory(directoryReader) {\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return new Promise(function (resolve) {\n    var entryPromises = [];\n\n    var readDirectoryEntries = function readDirectoryEntries() {\n      directoryReader.readEntries(function (entries) {\n        if (entries.length === 0) {\n          resolve(Promise.all(entryPromises).then(function (entries) {\n            return (0, _array.flatten)(entries);\n          }));\n        } else {\n          entryPromises.push(Promise.all(entries.map(function (entry) {\n            if (entry) {\n              if (entry.isDirectory) {\n                return getAllFileEntriesInDirectory(entry.createReader(), \"\".concat(path).concat(entry.name, \"/\"));\n              } else if (entry.isFile) {\n                return new Promise(function (resolve) {\n                  entry.file(function (file) {\n                    file.$path = \"\".concat(path).concat(file.name);\n                    resolve(file);\n                  });\n                });\n              }\n            }\n\n            return null;\n          }).filter(_identity.identity)));\n          readDirectoryEntries();\n        }\n      });\n    };\n\n    readDirectoryEntries();\n  });\n}; // --- Props ---\n\n\nvar props = (0, _props2.makePropsConfigurable)((0, _object.sortKeys)(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _id.props), modelProps), _formControl.props), _formCustom.props), _formState.props), _formSize.props), {}, {\n  accept: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, ''),\n  browseText: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Browse'),\n  // Instruct input to capture from camera\n  capture: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  directory: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  dropPlaceholder: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Drop files here'),\n  fileNameFormatter: (0, _props2.makeProp)(_props.PROP_TYPE_FUNCTION),\n  multiple: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  noDrop: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  noDropPlaceholder: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Not allowed'),\n  // TODO:\n  //   Should we deprecate this and only support flat file structures?\n  //   Nested file structures are only supported when files are dropped\n  //   A Chromium \"bug\" prevents `webkitEntries` from being populated\n  //   on the file input's `change` event and is marked as \"WontFix\"\n  //   Mozilla implemented the behavior the same way as Chromium\n  //   See: https://bugs.chromium.org/p/chromium/issues/detail?id=138987\n  //   See: https://bugzilla.mozilla.org/show_bug.cgi?id=1326031\n  noTraverse: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  placeholder: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'No file chosen')\n})), _components.NAME_FORM_FILE); // --- Main component ---\n// @vue/component\n\nvar BFormFile = /*#__PURE__*/_vue.Vue.extend({\n  name: _components.NAME_FORM_FILE,\n  mixins: [_attrs.attrsMixin, _id.idMixin, modelMixin, _normalizeSlot.normalizeSlotMixin, _formControl.formControlMixin, _formState.formStateMixin, _formCustom.formCustomMixin, _normalizeSlot.normalizeSlotMixin],\n  inheritAttrs: false,\n  props: props,\n  data: function data() {\n    return {\n      files: [],\n      dragging: false,\n      // IE 11 doesn't respect setting `event.dataTransfer.dropEffect`,\n      // so we handle it ourselves as well\n      // https://stackoverflow.com/a/46915971/2744776\n      dropAllowed: !this.noDrop,\n      hasFocus: false\n    };\n  },\n  computed: {\n    // Convert `accept` to an array of `[{ RegExpr, isMime }, ...]`\n    computedAccept: function computedAccept() {\n      var accept = this.accept;\n      accept = (accept || '').trim().split(/[,\\s]+/).filter(_identity.identity); // Allow any file type/extension\n\n      if (accept.length === 0) {\n        return null;\n      }\n\n      return accept.map(function (extOrType) {\n        var prop = 'name';\n        var startMatch = '^';\n        var endMatch = '$';\n\n        if (_regex.RX_EXTENSION.test(extOrType)) {\n          // File extension /\\.ext$/\n          startMatch = '';\n        } else {\n          // MIME type /^mime\\/.+$/ or /^mime\\/type$/\n          prop = 'type';\n\n          if (_regex.RX_STAR.test(extOrType)) {\n            endMatch = '.+$'; // Remove trailing `*`\n\n            extOrType = extOrType.slice(0, -1);\n          }\n        } // Escape all RegExp special chars\n\n\n        extOrType = (0, _string.escapeRegExp)(extOrType);\n        var rx = new RegExp(\"\".concat(startMatch).concat(extOrType).concat(endMatch));\n        return {\n          rx: rx,\n          prop: prop\n        };\n      });\n    },\n    computedCapture: function computedCapture() {\n      var capture = this.capture;\n      return capture === true || capture === '' ? true : capture || null;\n    },\n    computedAttrs: function computedAttrs() {\n      var name = this.name,\n          disabled = this.disabled,\n          required = this.required,\n          form = this.form,\n          computedCapture = this.computedCapture,\n          accept = this.accept,\n          multiple = this.multiple,\n          directory = this.directory;\n      return _objectSpread(_objectSpread({}, this.bvAttrs), {}, {\n        type: 'file',\n        id: this.safeId(),\n        name: name,\n        disabled: disabled,\n        required: required,\n        form: form || null,\n        capture: computedCapture,\n        accept: accept || null,\n        multiple: multiple,\n        directory: directory,\n        webkitdirectory: directory,\n        'aria-required': required ? 'true' : null\n      });\n    },\n    computedFileNameFormatter: function computedFileNameFormatter() {\n      var fileNameFormatter = this.fileNameFormatter;\n      return (0, _props2.hasPropFunction)(fileNameFormatter) ? fileNameFormatter : this.defaultFileNameFormatter;\n    },\n    clonedFiles: function clonedFiles() {\n      return (0, _cloneDeep.cloneDeep)(this.files);\n    },\n    flattenedFiles: function flattenedFiles() {\n      return (0, _array.flattenDeep)(this.files);\n    },\n    fileNames: function fileNames() {\n      return this.flattenedFiles.map(function (file) {\n        return file.name;\n      });\n    },\n    labelContent: function labelContent() {\n      // Draging active\n\n      /* istanbul ignore next: used by drag/drop which can't be tested easily */\n      if (this.dragging && !this.noDrop) {\n        return (// TODO: Add additional scope with file count, and other not-allowed reasons\n          this.normalizeSlot(_slots.SLOT_NAME_DROP_PLACEHOLDER, {\n            allowed: this.dropAllowed\n          }) || (this.dropAllowed ? this.dropPlaceholder : this.$createElement('span', {\n            staticClass: 'text-danger'\n          }, this.noDropPlaceholder))\n        );\n      } // No file chosen\n\n\n      if (this.files.length === 0) {\n        return this.normalizeSlot(_slots.SLOT_NAME_PLACEHOLDER) || this.placeholder;\n      }\n\n      var flattenedFiles = this.flattenedFiles,\n          clonedFiles = this.clonedFiles,\n          fileNames = this.fileNames,\n          computedFileNameFormatter = this.computedFileNameFormatter; // There is a slot for formatting the files/names\n\n      if (this.hasNormalizedSlot(_slots.SLOT_NAME_FILE_NAME)) {\n        return this.normalizeSlot(_slots.SLOT_NAME_FILE_NAME, {\n          files: flattenedFiles,\n          filesTraversed: clonedFiles,\n          names: fileNames\n        });\n      }\n\n      return computedFileNameFormatter(flattenedFiles, clonedFiles, fileNames);\n    }\n  },\n  watch: (_watch = {}, _defineProperty(_watch, MODEL_PROP_NAME, function (newValue) {\n    if (!newValue || (0, _inspect.isArray)(newValue) && newValue.length === 0) {\n      this.reset();\n    }\n  }), _defineProperty(_watch, \"files\", function files(newValue, oldValue) {\n    if (!(0, _looseEqual.looseEqual)(newValue, oldValue)) {\n      var multiple = this.multiple,\n          noTraverse = this.noTraverse;\n      var files = !multiple || noTraverse ? (0, _array.flattenDeep)(newValue) : newValue;\n      this.$emit(MODEL_EVENT_NAME, multiple ? files : files[0] || null);\n    }\n  }), _watch),\n  created: function created() {\n    // Create private non-reactive props\n    this.$_form = null;\n  },\n  mounted: function mounted() {\n    // Listen for form reset events, to reset the file input\n    var $form = (0, _dom.closest)('form', this.$el);\n\n    if ($form) {\n      (0, _events2.eventOn)($form, 'reset', this.reset, _events.EVENT_OPTIONS_PASSIVE);\n      this.$_form = $form;\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    var $form = this.$_form;\n\n    if ($form) {\n      (0, _events2.eventOff)($form, 'reset', this.reset, _events.EVENT_OPTIONS_PASSIVE);\n    }\n  },\n  methods: {\n    isFileValid: function isFileValid(file) {\n      if (!file) {\n        return false;\n      }\n\n      var accept = this.computedAccept;\n      return accept ? accept.some(function (a) {\n        return a.rx.test(file[a.prop]);\n      }) : true;\n    },\n    isFilesArrayValid: function isFilesArrayValid(files) {\n      var _this = this;\n\n      return (0, _inspect.isArray)(files) ? files.every(function (file) {\n        return _this.isFileValid(file);\n      }) : this.isFileValid(files);\n    },\n    defaultFileNameFormatter: function defaultFileNameFormatter(flattenedFiles, clonedFiles, fileNames) {\n      return fileNames.join(', ');\n    },\n    setFiles: function setFiles(files) {\n      // Reset the dragging flags\n      this.dropAllowed = !this.noDrop;\n      this.dragging = false; // Set the selected files\n\n      this.files = this.multiple ? this.directory ? files : (0, _array.flattenDeep)(files) : (0, _array.flattenDeep)(files).slice(0, 1);\n    },\n\n    /* istanbul ignore next: used by Drag/Drop */\n    setInputFiles: function setInputFiles(files) {\n      // Try an set the file input files array so that `required`\n      // constraint works for dropped files (will fail in IE11 though)\n      // To be used only when dropping files\n      try {\n        // Firefox < 62 workaround exploiting https://bugzilla.mozilla.org/show_bug.cgi?id=1422655\n        var dataTransfer = new ClipboardEvent('').clipboardData || new DataTransfer(); // Add flattened files to temp `dataTransfer` object to get a true `FileList` array\n\n        (0, _array.flattenDeep)((0, _cloneDeep.cloneDeep)(files)).forEach(function (file) {\n          // Make sure to remove the custom `$path` attribute\n          delete file.$path;\n          dataTransfer.items.add(file);\n        });\n        this.$refs.input.files = dataTransfer.files;\n      } catch (_unused) {}\n    },\n    reset: function reset() {\n      // IE 11 doesn't support setting `$input.value` to `''` or `null`\n      // So we use this little extra hack to reset the value, just in case\n      // This also appears to work on modern browsers as well\n      // Wrapped in try in case IE 11 or mobile Safari crap out\n      try {\n        var $input = this.$refs.input;\n        $input.value = '';\n        $input.type = '';\n        $input.type = 'file';\n      } catch (_unused2) {}\n\n      this.files = [];\n    },\n    handleFiles: function handleFiles(files) {\n      var isDrop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (isDrop) {\n        // When dropped, make sure to filter files with the internal `accept` logic\n        var filteredFiles = files.filter(this.isFilesArrayValid); // Only update files when we have any after filtering\n\n        if (filteredFiles.length > 0) {\n          this.setFiles(filteredFiles); // Try an set the file input's files array so that `required`\n          // constraint works for dropped files (will fail in IE 11 though)\n\n          this.setInputFiles(filteredFiles);\n        }\n      } else {\n        // We always update the files from the `change` event\n        this.setFiles(files);\n      }\n    },\n    focusHandler: function focusHandler(event) {\n      // Bootstrap v4 doesn't have focus styling for custom file input\n      // Firefox has a `[type=file]:focus ~ sibling` selector issue,\n      // so we add a `focus` class to get around these bugs\n      if (this.plain || event.type === 'focusout') {\n        this.hasFocus = false;\n      } else {\n        // Add focus styling for custom file input\n        this.hasFocus = true;\n      }\n    },\n    onChange: function onChange(event) {\n      var _this2 = this;\n\n      var type = event.type,\n          target = event.target,\n          _event$dataTransfer = event.dataTransfer,\n          dataTransfer = _event$dataTransfer === void 0 ? {} : _event$dataTransfer;\n      var isDrop = type === 'drop'; // Always emit original event\n\n      this.$emit(_events.EVENT_NAME_CHANGE, event);\n      var items = (0, _array.from)(dataTransfer.items || []);\n\n      if (_env.HAS_PROMISE_SUPPORT && items.length > 0 && !(0, _inspect.isNull)(getDataTransferItemEntry(items[0]))) {\n        // Drop handling for modern browsers\n        // Supports nested directory structures in `directory` mode\n\n        /* istanbul ignore next: not supported in JSDOM */\n        getAllFileEntries(items, this.directory).then(function (files) {\n          return _this2.handleFiles(files, isDrop);\n        });\n      } else {\n        // Standard file input handling (native file input change event),\n        // or fallback drop mode (IE 11 / Opera) which don't support `directory` mode\n        var files = (0, _array.from)(target.files || dataTransfer.files || []).map(function (file) {\n          // Add custom `$path` property to each file (to be consistent with drop mode)\n          file.$path = file.webkitRelativePath || '';\n          return file;\n        });\n        this.handleFiles(files, isDrop);\n      }\n    },\n    onDragenter: function onDragenter(event) {\n      (0, _events2.stopEvent)(event);\n      this.dragging = true;\n      var _event$dataTransfer2 = event.dataTransfer,\n          dataTransfer = _event$dataTransfer2 === void 0 ? {} : _event$dataTransfer2; // Early exit when the input or dropping is disabled\n\n      if (this.noDrop || this.disabled || !this.dropAllowed) {\n        // Show deny feedback\n\n        /* istanbul ignore next: not supported in JSDOM */\n        dataTransfer.dropEffect = 'none';\n        this.dropAllowed = false;\n        return;\n      }\n      /* istanbul ignore next: not supported in JSDOM */\n\n\n      dataTransfer.dropEffect = 'copy';\n    },\n    // Note this event fires repeatedly while the mouse is over the dropzone at\n    // intervals in the milliseconds, so avoid doing much processing in here\n    onDragover: function onDragover(event) {\n      (0, _events2.stopEvent)(event);\n      this.dragging = true;\n      var _event$dataTransfer3 = event.dataTransfer,\n          dataTransfer = _event$dataTransfer3 === void 0 ? {} : _event$dataTransfer3; // Early exit when the input or dropping is disabled\n\n      if (this.noDrop || this.disabled || !this.dropAllowed) {\n        // Show deny feedback\n\n        /* istanbul ignore next: not supported in JSDOM */\n        dataTransfer.dropEffect = 'none';\n        this.dropAllowed = false;\n        return;\n      }\n      /* istanbul ignore next: not supported in JSDOM */\n\n\n      dataTransfer.dropEffect = 'copy';\n    },\n    onDragleave: function onDragleave(event) {\n      var _this3 = this;\n\n      (0, _events2.stopEvent)(event);\n      this.$nextTick(function () {\n        _this3.dragging = false; // Reset `dropAllowed` to default\n\n        _this3.dropAllowed = !_this3.noDrop;\n      });\n    },\n    // Triggered by a file drop onto drop target\n    onDrop: function onDrop(event) {\n      var _this4 = this;\n\n      (0, _events2.stopEvent)(event);\n      this.dragging = false; // Early exit when the input or dropping is disabled\n\n      if (this.noDrop || this.disabled || !this.dropAllowed) {\n        this.$nextTick(function () {\n          // Reset `dropAllowed` to default\n          _this4.dropAllowed = !_this4.noDrop;\n        });\n        return;\n      }\n\n      this.onChange(event);\n    }\n  },\n  render: function render(h) {\n    var custom = this.custom,\n        plain = this.plain,\n        size = this.size,\n        dragging = this.dragging,\n        stateClass = this.stateClass,\n        bvAttrs = this.bvAttrs; // Form Input\n\n    var $input = h('input', {\n      class: [{\n        'form-control-file': plain,\n        'custom-file-input': custom,\n        focus: custom && this.hasFocus\n      }, stateClass],\n      // With IE 11, the input gets in the \"way\" of the drop events,\n      // so we move it out of the way by putting it behind the label\n      // Bootstrap v4 has it in front\n      style: custom ? {\n        zIndex: -5\n      } : {},\n      attrs: this.computedAttrs,\n      on: {\n        change: this.onChange,\n        focusin: this.focusHandler,\n        focusout: this.focusHandler,\n        reset: this.reset\n      },\n      ref: 'input'\n    });\n\n    if (plain) {\n      return $input;\n    } // Overlay label\n\n\n    var $label = h('label', {\n      staticClass: 'custom-file-label',\n      class: {\n        dragging: dragging\n      },\n      attrs: {\n        for: this.safeId(),\n        // This goes away in Bootstrap v5\n        'data-browse': this.browseText || null\n      }\n    }, [h('span', {\n      staticClass: 'd-block form-file-text',\n      // `pointer-events: none` is used to make sure\n      // the drag events fire only on the label\n      style: {\n        pointerEvents: 'none'\n      }\n    }, [this.labelContent])]); // Return rendered custom file input\n\n    return h('div', {\n      staticClass: 'custom-file b-form-file',\n      class: [_defineProperty({}, \"b-custom-control-\".concat(size), size), stateClass, bvAttrs.class],\n      style: bvAttrs.style,\n      attrs: {\n        id: this.safeId('_BV_file_outer_')\n      },\n      on: {\n        dragenter: this.onDragenter,\n        dragover: this.onDragover,\n        dragleave: this.onDragleave,\n        drop: this.onDrop\n      }\n    }, [$input, $label]);\n  }\n});\n\nexports.BFormFile = BFormFile;"},"sourceMaps":null,"error":null,"hash":"426b2b1b8d7d88b99f1c690dc476a766","cacheData":{"env":{}}}