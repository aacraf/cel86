{"id":"../node_modules/bootstrap-vue/esm/directives/modal/modal.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../constants/components","loc":{"line":1,"column":27,"index":27},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/modal/modal.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/components.js"},{"name":"../../constants/events","loc":{"line":2,"column":55,"index":112},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/modal/modal.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/events.js"},{"name":"../../constants/key-codes","loc":{"line":3,"column":39,"index":177},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/modal/modal.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/key-codes.js"},{"name":"../../utils/dom","loc":{"line":4,"column":71,"index":277},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/modal/modal.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js"},{"name":"../../utils/events","loc":{"line":5,"column":58,"index":354},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/modal/modal.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js"},{"name":"../../utils/inspect","loc":{"line":6,"column":25,"index":401},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/modal/modal.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../utils/object","loc":{"line":7,"column":21,"index":445},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/modal/modal.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VBModal = void 0;\n\nvar _components = require(\"../../constants/components\");\n\nvar _events = require(\"../../constants/events\");\n\nvar _keyCodes = require(\"../../constants/key-codes\");\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _events2 = require(\"../../utils/events\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nvar _object = require(\"../../utils/object\");\n\n// Emitted show event for modal\nvar ROOT_ACTION_EVENT_NAME_SHOW = (0, _events2.getRootActionEventName)(_components.NAME_MODAL, _events.EVENT_NAME_SHOW); // Prop name we use to store info on root element\n\nvar PROPERTY = '__bv_modal_directive__';\n\nvar getTarget = function getTarget(_ref) {\n  var _ref$modifiers = _ref.modifiers,\n      modifiers = _ref$modifiers === void 0 ? {} : _ref$modifiers,\n      arg = _ref.arg,\n      value = _ref.value; // Try value, then arg, otherwise pick last modifier\n\n  return (0, _inspect.isString)(value) ? value : (0, _inspect.isString)(arg) ? arg : (0, _object.keys)(modifiers).reverse()[0];\n};\n\nvar getTriggerElement = function getTriggerElement(el) {\n  // If root element is a dropdown-item or nav-item, we\n  // need to target the inner link or button instead\n  return el && (0, _dom.matches)(el, '.dropdown-menu > li, li.nav-item') ? (0, _dom.select)('a, button', el) || el : el;\n};\n\nvar setRole = function setRole(trigger) {\n  // Ensure accessibility on non button elements\n  if (trigger && trigger.tagName !== 'BUTTON') {\n    // Only set a role if the trigger element doesn't have one\n    if (!(0, _dom.hasAttr)(trigger, 'role')) {\n      (0, _dom.setAttr)(trigger, 'role', 'button');\n    } // Add a tabindex is not a button or link, and tabindex is not provided\n\n\n    if (trigger.tagName !== 'A' && !(0, _dom.hasAttr)(trigger, 'tabindex')) {\n      (0, _dom.setAttr)(trigger, 'tabindex', '0');\n    }\n  }\n};\n\nvar bind = function bind(el, binding, vnode) {\n  var target = getTarget(binding);\n  var trigger = getTriggerElement(el);\n\n  if (target && trigger) {\n    var handler = function handler(event) {\n      // `currentTarget` is the element with the listener on it\n      var currentTarget = event.currentTarget;\n\n      if (!(0, _dom.isDisabled)(currentTarget)) {\n        var type = event.type;\n        var key = event.keyCode; // Open modal only if trigger is not disabled\n\n        if (type === 'click' || type === 'keydown' && (key === _keyCodes.CODE_ENTER || key === _keyCodes.CODE_SPACE)) {\n          vnode.context.$root.$emit(ROOT_ACTION_EVENT_NAME_SHOW, target, currentTarget);\n        }\n      }\n    };\n\n    el[PROPERTY] = {\n      handler: handler,\n      target: target,\n      trigger: trigger\n    }; // If element is not a button, we add `role=\"button\"` for accessibility\n\n    setRole(trigger); // Listen for click events\n\n    (0, _events2.eventOn)(trigger, 'click', handler, _events.EVENT_OPTIONS_PASSIVE);\n\n    if (trigger.tagName !== 'BUTTON' && (0, _dom.getAttr)(trigger, 'role') === 'button') {\n      // If trigger isn't a button but has role button,\n      // we also listen for `keydown.space` && `keydown.enter`\n      (0, _events2.eventOn)(trigger, 'keydown', handler, _events.EVENT_OPTIONS_PASSIVE);\n    }\n  }\n};\n\nvar unbind = function unbind(el) {\n  var oldProp = el[PROPERTY] || {};\n  var trigger = oldProp.trigger;\n  var handler = oldProp.handler;\n\n  if (trigger && handler) {\n    (0, _events2.eventOff)(trigger, 'click', handler, _events.EVENT_OPTIONS_PASSIVE);\n    (0, _events2.eventOff)(trigger, 'keydown', handler, _events.EVENT_OPTIONS_PASSIVE);\n    (0, _events2.eventOff)(el, 'click', handler, _events.EVENT_OPTIONS_PASSIVE);\n    (0, _events2.eventOff)(el, 'keydown', handler, _events.EVENT_OPTIONS_PASSIVE);\n  }\n\n  delete el[PROPERTY];\n};\n\nvar componentUpdated = function componentUpdated(el, binding, vnode) {\n  var oldProp = el[PROPERTY] || {};\n  var target = getTarget(binding);\n  var trigger = getTriggerElement(el);\n\n  if (target !== oldProp.target || trigger !== oldProp.trigger) {\n    // We bind and rebind if the target or trigger changes\n    unbind(el, binding, vnode);\n    bind(el, binding, vnode);\n  } // If trigger element is not a button, ensure `role=\"button\"`\n  // is still set for accessibility\n\n\n  setRole(trigger);\n};\n\nvar updated = function updated() {};\n/*\n * Export our directive\n */\n\n\nvar VBModal = {\n  inserted: componentUpdated,\n  updated: updated,\n  componentUpdated: componentUpdated,\n  unbind: unbind\n};\nexports.VBModal = VBModal;"},"sourceMaps":null,"error":null,"hash":"0315010dab67915b4407d51b53254ac0","cacheData":{"env":{}}}