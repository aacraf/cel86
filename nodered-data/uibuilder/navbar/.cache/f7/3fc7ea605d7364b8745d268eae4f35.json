{"id":"../node_modules/bootstrap-vue/esm/components/calendar/calendar.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../vue","loc":{"line":9,"column":20,"index":1123},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../constants/components","loc":{"line":10,"column":30,"index":1166},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/components.js"},{"name":"../../constants/date","loc":{"line":11,"column":123,"index":1319},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/date.js"},{"name":"../../constants/events","loc":{"line":12,"column":56,"index":1399},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/events.js"},{"name":"../../constants/key-codes","loc":{"line":13,"column":131,"index":1556},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/key-codes.js"},{"name":"../../constants/props","loc":{"line":14,"column":162,"index":1747},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../../constants/slots","loc":{"line":15,"column":194,"index":1966},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/slots.js"},{"name":"../../utils/array","loc":{"line":16,"column":38,"index":2029},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/array.js"},{"name":"../../utils/date","loc":{"line":17,"column":248,"index":2298},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/date.js"},{"name":"../../utils/dom","loc":{"line":18,"column":53,"index":2371},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js"},{"name":"../../utils/events","loc":{"line":19,"column":26,"index":2416},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/events.js"},{"name":"../../utils/identity","loc":{"line":20,"column":25,"index":2463},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/identity.js"},{"name":"../../utils/inspect","loc":{"line":21,"column":49,"index":2536},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../utils/locale","loc":{"line":22,"column":28,"index":2587},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/locale.js"},{"name":"../../utils/loose-equal","loc":{"line":23,"column":27,"index":2636},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/loose-equal.js"},{"name":"../../utils/math","loc":{"line":24,"column":24,"index":2687},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/math.js"},{"name":"../../utils/model","loc":{"line":25,"column":31,"index":2738},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/model.js"},{"name":"../../utils/number","loc":{"line":26,"column":26,"index":2785},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/number.js"},{"name":"../../utils/object","loc":{"line":27,"column":25,"index":2832},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../../utils/props","loc":{"line":28,"column":65,"index":2919},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"../../utils/string","loc":{"line":29,"column":25,"index":2965},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/string.js"},{"name":"../../mixins/attrs","loc":{"line":30,"column":27,"index":3014},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/attrs.js"},{"name":"../../mixins/id","loc":{"line":31,"column":42,"index":3078},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/id.js"},{"name":"../../mixins/normalize-slot","loc":{"line":32,"column":35,"index":3132},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/normalize-slot.js"},{"name":"../../icons/icons","loc":{"line":33,"column":95,"index":3258},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/calendar/calendar.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/icons/icons.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.BCalendar = void 0;\n\nvar _vue = require(\"../../vue\");\n\nvar _components = require(\"../../constants/components\");\n\nvar _date = require(\"../../constants/date\");\n\nvar _events = require(\"../../constants/events\");\n\nvar _keyCodes = require(\"../../constants/key-codes\");\n\nvar _props = require(\"../../constants/props\");\n\nvar _slots = require(\"../../constants/slots\");\n\nvar _array = require(\"../../utils/array\");\n\nvar _date2 = require(\"../../utils/date\");\n\nvar _dom = require(\"../../utils/dom\");\n\nvar _events2 = require(\"../../utils/events\");\n\nvar _identity = require(\"../../utils/identity\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nvar _locale = require(\"../../utils/locale\");\n\nvar _looseEqual = require(\"../../utils/loose-equal\");\n\nvar _math = require(\"../../utils/math\");\n\nvar _model = require(\"../../utils/model\");\n\nvar _number = require(\"../../utils/number\");\n\nvar _object = require(\"../../utils/object\");\n\nvar _props2 = require(\"../../utils/props\");\n\nvar _string = require(\"../../utils/string\");\n\nvar _attrs = require(\"../../mixins/attrs\");\n\nvar _id = require(\"../../mixins/id\");\n\nvar _normalizeSlot = require(\"../../mixins/normalize-slot\");\n\nvar _icons = require(\"../../icons/icons\");\n\nvar _watch;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n// --- Constants ---\nvar _makeModelMixin = (0, _model.makeModelMixin)('value', {\n  type: _props.PROP_TYPE_DATE_STRING\n}),\n    modelMixin = _makeModelMixin.mixin,\n    modelProps = _makeModelMixin.props,\n    MODEL_PROP_NAME = _makeModelMixin.prop,\n    MODEL_EVENT_NAME = _makeModelMixin.event; // --- Props ---\n\n\nvar props = (0, _props2.makePropsConfigurable)((0, _object.sortKeys)(_objectSpread(_objectSpread(_objectSpread({}, _id.props), modelProps), {}, {\n  ariaControls: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  // Makes calendar the full width of its parent container\n  block: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  dateDisabledFn: (0, _props2.makeProp)(_props.PROP_TYPE_FUNCTION),\n  // `Intl.DateTimeFormat` object\n  dateFormatOptions: (0, _props2.makeProp)(_props.PROP_TYPE_OBJECT, {\n    year: _date.DATE_FORMAT_NUMERIC,\n    month: _date.CALENDAR_LONG,\n    day: _date.DATE_FORMAT_NUMERIC,\n    weekday: _date.CALENDAR_LONG\n  }),\n  // Function to set a class of (classes) on the date cell\n  // if passed a string or an array\n  // TODO:\n  //   If the function returns an object, look for class prop for classes,\n  //   and other props for handling events/details/descriptions\n  dateInfoFn: (0, _props2.makeProp)(_props.PROP_TYPE_FUNCTION),\n  // 'ltr', 'rtl', or `null` (for auto detect)\n  direction: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  disabled: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  // When `true`, renders a comment node, but keeps the component instance active\n  // Mainly for <b-form-date>, so that we can get the component's value and locale\n  // But we might just use separate date formatters, using the resolved locale\n  // (adjusted for the gregorian calendar)\n  hidden: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  // When `true` makes the selected date header `sr-only`\n  hideHeader: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  // This specifies the calendar year/month/day that will be shown when\n  // first opening the datepicker if no v-model value is provided\n  // Default is the current date (or `min`/`max`)\n  initialDate: (0, _props2.makeProp)(_props.PROP_TYPE_DATE_STRING),\n  // Labels for buttons and keyboard shortcuts\n  labelCalendar: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Calendar'),\n  labelCurrentMonth: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Current month'),\n  labelHelp: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Use cursor keys to navigate calendar dates'),\n  labelNav: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Calendar navigation'),\n  labelNextDecade: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Next decade'),\n  labelNextMonth: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Next month'),\n  labelNextYear: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Next year'),\n  labelNoDateSelected: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'No date selected'),\n  labelPrevDecade: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Previous decade'),\n  labelPrevMonth: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Previous month'),\n  labelPrevYear: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Previous year'),\n  labelSelected: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Selected date'),\n  labelToday: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'Today'),\n  // Locale(s) to use\n  // Default is to use page/browser default setting\n  locale: (0, _props2.makeProp)(_props.PROP_TYPE_ARRAY_STRING),\n  max: (0, _props2.makeProp)(_props.PROP_TYPE_DATE_STRING),\n  min: (0, _props2.makeProp)(_props.PROP_TYPE_DATE_STRING),\n  // Variant color to use for the navigation buttons\n  navButtonVariant: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'secondary'),\n  // Disable highlighting today's date\n  noHighlightToday: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  noKeyNav: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  readonly: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  roleDescription: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  // Variant color to use for the selected date\n  selectedVariant: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'primary'),\n  // When `true` enables the decade navigation buttons\n  showDecadeNav: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  // Day of week to start calendar on\n  // `0` (Sunday), `1` (Monday), ... `6` (Saturday)\n  startWeekday: (0, _props2.makeProp)(_props.PROP_TYPE_NUMBER_STRING, 0),\n  // Variant color to use for today's date (defaults to `selectedVariant`)\n  todayVariant: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  // Always return the `v-model` value as a date object\n  valueAsDate: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  // Format of the weekday names at the top of the calendar\n  // `short` is typically a 3 letter abbreviation,\n  // `narrow` is typically a single letter\n  // `long` is the full week day name\n  // Although some locales may override this (i.e `ar`, etc.)\n  weekdayHeaderFormat: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, _date.CALENDAR_SHORT, function (value) {\n    return (0, _array.arrayIncludes)([_date.CALENDAR_LONG, _date.CALENDAR_SHORT, _date.CALENDAR_NARROW], value);\n  }),\n  // Has no effect if prop `block` is set\n  width: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, '270px')\n})), _components.NAME_CALENDAR); // --- Main component ---\n// @vue/component\n\nexports.props = props;\n\nvar BCalendar = _vue.Vue.extend({\n  name: _components.NAME_CALENDAR,\n  // Mixin order is important!\n  mixins: [_attrs.attrsMixin, _id.idMixin, modelMixin, _normalizeSlot.normalizeSlotMixin],\n  props: props,\n  data: function data() {\n    var selected = (0, _date2.formatYMD)(this[MODEL_PROP_NAME]) || '';\n    return {\n      // Selected date\n      selectedYMD: selected,\n      // Date in calendar grid that has `tabindex` of `0`\n      activeYMD: selected || (0, _date2.formatYMD)((0, _date2.constrainDate)(this.initialDate || this.getToday()), this.min, this.max),\n      // Will be true if the calendar grid has/contains focus\n      gridHasFocus: false,\n      // Flag to enable the `aria-live` region(s) after mount\n      // to prevent screen reader \"outbursts\" when mounting\n      isLive: false\n    };\n  },\n  computed: {\n    valueId: function valueId() {\n      return this.safeId();\n    },\n    widgetId: function widgetId() {\n      return this.safeId('_calendar-wrapper_');\n    },\n    navId: function navId() {\n      return this.safeId('_calendar-nav_');\n    },\n    gridId: function gridId() {\n      return this.safeId('_calendar-grid_');\n    },\n    gridCaptionId: function gridCaptionId() {\n      return this.safeId('_calendar-grid-caption_');\n    },\n    gridHelpId: function gridHelpId() {\n      return this.safeId('_calendar-grid-help_');\n    },\n    activeId: function activeId() {\n      return this.activeYMD ? this.safeId(\"_cell-\".concat(this.activeYMD, \"_\")) : null;\n    },\n    // TODO: Use computed props to convert `YYYY-MM-DD` to `Date` object\n    selectedDate: function selectedDate() {\n      // Selected as a `Date` object\n      return (0, _date2.parseYMD)(this.selectedYMD);\n    },\n    activeDate: function activeDate() {\n      // Active as a `Date` object\n      return (0, _date2.parseYMD)(this.activeYMD);\n    },\n    computedMin: function computedMin() {\n      return (0, _date2.parseYMD)(this.min);\n    },\n    computedMax: function computedMax() {\n      return (0, _date2.parseYMD)(this.max);\n    },\n    computedWeekStarts: function computedWeekStarts() {\n      // `startWeekday` is a prop (constrained to `0` through `6`)\n      return (0, _math.mathMax)((0, _number.toInteger)(this.startWeekday, 0), 0) % 7;\n    },\n    computedLocale: function computedLocale() {\n      // Returns the resolved locale used by the calendar\n      return (0, _date2.resolveLocale)((0, _array.concat)(this.locale).filter(_identity.identity), _date.CALENDAR_GREGORY);\n    },\n    computedDateDisabledFn: function computedDateDisabledFn() {\n      var dateDisabledFn = this.dateDisabledFn;\n      return (0, _props2.hasPropFunction)(dateDisabledFn) ? dateDisabledFn : function () {\n        return false;\n      };\n    },\n    // TODO: Change `dateInfoFn` to handle events and notes as well as classes\n    computedDateInfoFn: function computedDateInfoFn() {\n      var dateInfoFn = this.dateInfoFn;\n      return (0, _props2.hasPropFunction)(dateInfoFn) ? dateInfoFn : function () {\n        return {};\n      };\n    },\n    calendarLocale: function calendarLocale() {\n      // This locale enforces the gregorian calendar (for use in formatter functions)\n      // Needed because IE 11 resolves `ar-IR` as islamic-civil calendar\n      // and IE 11 (and some other browsers) do not support the `calendar` option\n      // And we currently only support the gregorian calendar\n      var fmt = new Intl.DateTimeFormat(this.computedLocale, {\n        calendar: _date.CALENDAR_GREGORY\n      });\n      var calendar = fmt.resolvedOptions().calendar;\n      var locale = fmt.resolvedOptions().locale;\n      /* istanbul ignore if: mainly for IE 11 and a few other browsers, hard to test in JSDOM */\n\n      if (calendar !== _date.CALENDAR_GREGORY) {\n        // Ensure the locale requests the gregorian calendar\n        // Mainly for IE 11, and currently we can't handle non-gregorian calendars\n        // TODO: Should we always return this value?\n        locale = locale.replace(/-u-.+$/i, '').concat('-u-ca-gregory');\n      }\n\n      return locale;\n    },\n    calendarYear: function calendarYear() {\n      return this.activeDate.getFullYear();\n    },\n    calendarMonth: function calendarMonth() {\n      return this.activeDate.getMonth();\n    },\n    calendarFirstDay: function calendarFirstDay() {\n      // We set the time for this date to 12pm to work around\n      // date formatting issues in Firefox and Safari\n      // See: https://github.com/bootstrap-vue/bootstrap-vue/issues/5818\n      return (0, _date2.createDate)(this.calendarYear, this.calendarMonth, 1, 12);\n    },\n    calendarDaysInMonth: function calendarDaysInMonth() {\n      // We create a new date as to not mutate the original\n      var date = (0, _date2.createDate)(this.calendarFirstDay);\n      date.setMonth(date.getMonth() + 1, 0);\n      return date.getDate();\n    },\n    computedVariant: function computedVariant() {\n      return \"btn-\".concat(this.selectedVariant || 'primary');\n    },\n    computedTodayVariant: function computedTodayVariant() {\n      return \"btn-outline-\".concat(this.todayVariant || this.selectedVariant || 'primary');\n    },\n    computedNavButtonVariant: function computedNavButtonVariant() {\n      return \"btn-outline-\".concat(this.navButtonVariant || 'primary');\n    },\n    isRTL: function isRTL() {\n      // `true` if the language requested is RTL\n      var dir = (0, _string.toString)(this.direction).toLowerCase();\n\n      if (dir === 'rtl') {\n        /* istanbul ignore next */\n        return true;\n      } else if (dir === 'ltr') {\n        /* istanbul ignore next */\n        return false;\n      }\n\n      return (0, _locale.isLocaleRTL)(this.computedLocale);\n    },\n    context: function context() {\n      var selectedYMD = this.selectedYMD,\n          activeYMD = this.activeYMD;\n      var selectedDate = (0, _date2.parseYMD)(selectedYMD);\n      var activeDate = (0, _date2.parseYMD)(activeYMD);\n      return {\n        // The current value of the `v-model`\n        selectedYMD: selectedYMD,\n        selectedDate: selectedDate,\n        selectedFormatted: selectedDate ? this.formatDateString(selectedDate) : this.labelNoDateSelected,\n        // Which date cell is considered active due to navigation\n        activeYMD: activeYMD,\n        activeDate: activeDate,\n        activeFormatted: activeDate ? this.formatDateString(activeDate) : '',\n        // `true` if the date is disabled (when using keyboard navigation)\n        disabled: this.dateDisabled(activeDate),\n        // Locales used in formatting dates\n        locale: this.computedLocale,\n        calendarLocale: this.calendarLocale,\n        rtl: this.isRTL\n      };\n    },\n    // Computed props that return a function reference\n    dateOutOfRange: function dateOutOfRange() {\n      // Check whether a date is within the min/max range\n      // Returns a new function ref if the pops change\n      // We do this as we need to trigger the calendar computed prop\n      // to update when these props update\n      var min = this.computedMin,\n          max = this.computedMax;\n      return function (date) {\n        // Handle both `YYYY-MM-DD` and `Date` objects\n        date = (0, _date2.parseYMD)(date);\n        return min && date < min || max && date > max;\n      };\n    },\n    dateDisabled: function dateDisabled() {\n      var _this = this; // Returns a function for validating if a date is within range\n      // We grab this variables first to ensure a new function ref\n      // is generated when the props value changes\n      // We do this as we need to trigger the calendar computed prop\n      // to update when these props update\n\n\n      var rangeFn = this.dateOutOfRange; // Return the function ref\n\n      return function (date) {\n        // Handle both `YYYY-MM-DD` and `Date` objects\n        date = (0, _date2.parseYMD)(date);\n        var ymd = (0, _date2.formatYMD)(date);\n        return !!(rangeFn(date) || _this.computedDateDisabledFn(ymd, date));\n      };\n    },\n    // Computed props that return date formatter functions\n    formatDateString: function formatDateString() {\n      // Returns a date formatter function\n      return (0, _date2.createDateFormatter)(this.calendarLocale, _objectSpread(_objectSpread({\n        // Ensure we have year, month, day shown for screen readers/ARIA\n        // If users really want to leave one of these out, they can\n        // pass `undefined` for the property value\n        year: _date.DATE_FORMAT_NUMERIC,\n        month: _date.DATE_FORMAT_2_DIGIT,\n        day: _date.DATE_FORMAT_2_DIGIT\n      }, this.dateFormatOptions), {}, {\n        // Ensure hours/minutes/seconds are not shown\n        // As we do not support the time portion (yet)\n        hour: undefined,\n        minute: undefined,\n        second: undefined,\n        // Ensure calendar is gregorian\n        calendar: _date.CALENDAR_GREGORY\n      }));\n    },\n    formatYearMonth: function formatYearMonth() {\n      // Returns a date formatter function\n      return (0, _date2.createDateFormatter)(this.calendarLocale, {\n        year: _date.DATE_FORMAT_NUMERIC,\n        month: _date.CALENDAR_LONG,\n        calendar: _date.CALENDAR_GREGORY\n      });\n    },\n    formatWeekdayName: function formatWeekdayName() {\n      // Long weekday name for weekday header aria-label\n      return (0, _date2.createDateFormatter)(this.calendarLocale, {\n        weekday: _date.CALENDAR_LONG,\n        calendar: _date.CALENDAR_GREGORY\n      });\n    },\n    formatWeekdayNameShort: function formatWeekdayNameShort() {\n      // Weekday header cell format\n      // defaults to 'short' 3 letter days, where possible\n      return (0, _date2.createDateFormatter)(this.calendarLocale, {\n        weekday: this.weekdayHeaderFormat || _date.CALENDAR_SHORT,\n        calendar: _date.CALENDAR_GREGORY\n      });\n    },\n    formatDay: function formatDay() {\n      // Calendar grid day number formatter\n      // We don't use DateTimeFormatter here as it can place extra\n      // character(s) after the number (i.e the `zh` locale)\n      var nf = new Intl.NumberFormat([this.computedLocale], {\n        style: 'decimal',\n        minimumIntegerDigits: 1,\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n        notation: 'standard'\n      }); // Return a formatter function instance\n\n      return function (date) {\n        return nf.format(date.getDate());\n      };\n    },\n    // Disabled states for the nav buttons\n    prevDecadeDisabled: function prevDecadeDisabled() {\n      var min = this.computedMin;\n      return this.disabled || min && (0, _date2.lastDateOfMonth)((0, _date2.oneDecadeAgo)(this.activeDate)) < min;\n    },\n    prevYearDisabled: function prevYearDisabled() {\n      var min = this.computedMin;\n      return this.disabled || min && (0, _date2.lastDateOfMonth)((0, _date2.oneYearAgo)(this.activeDate)) < min;\n    },\n    prevMonthDisabled: function prevMonthDisabled() {\n      var min = this.computedMin;\n      return this.disabled || min && (0, _date2.lastDateOfMonth)((0, _date2.oneMonthAgo)(this.activeDate)) < min;\n    },\n    thisMonthDisabled: function thisMonthDisabled() {\n      // TODO: We could/should check if today is out of range\n      return this.disabled;\n    },\n    nextMonthDisabled: function nextMonthDisabled() {\n      var max = this.computedMax;\n      return this.disabled || max && (0, _date2.firstDateOfMonth)((0, _date2.oneMonthAhead)(this.activeDate)) > max;\n    },\n    nextYearDisabled: function nextYearDisabled() {\n      var max = this.computedMax;\n      return this.disabled || max && (0, _date2.firstDateOfMonth)((0, _date2.oneYearAhead)(this.activeDate)) > max;\n    },\n    nextDecadeDisabled: function nextDecadeDisabled() {\n      var max = this.computedMax;\n      return this.disabled || max && (0, _date2.firstDateOfMonth)((0, _date2.oneDecadeAhead)(this.activeDate)) > max;\n    },\n    // Calendar dates generation\n    calendar: function calendar() {\n      var matrix = [];\n      var firstDay = this.calendarFirstDay;\n      var calendarYear = firstDay.getFullYear();\n      var calendarMonth = firstDay.getMonth();\n      var daysInMonth = this.calendarDaysInMonth;\n      var startIndex = firstDay.getDay(); // `0`..`6`\n\n      var weekOffset = (this.computedWeekStarts > startIndex ? 7 : 0) - this.computedWeekStarts; // Build the calendar matrix\n\n      var currentDay = 0 - weekOffset - startIndex;\n\n      for (var week = 0; week < 6 && currentDay < daysInMonth; week++) {\n        // For each week\n        matrix[week] = []; // The following could be a map function\n\n        for (var j = 0; j < 7; j++) {\n          // For each day in week\n          currentDay++;\n          var date = (0, _date2.createDate)(calendarYear, calendarMonth, currentDay);\n          var month = date.getMonth();\n          var dayYMD = (0, _date2.formatYMD)(date);\n          var dayDisabled = this.dateDisabled(date); // TODO: This could be a normalizer method\n\n          var dateInfo = this.computedDateInfoFn(dayYMD, (0, _date2.parseYMD)(dayYMD));\n          dateInfo = (0, _inspect.isString)(dateInfo) || (0, _inspect.isArray)(dateInfo) ?\n          /* istanbul ignore next */\n          {\n            class: dateInfo\n          } : (0, _inspect.isPlainObject)(dateInfo) ? _objectSpread({\n            class: ''\n          }, dateInfo) :\n          /* istanbul ignore next */\n          {\n            class: ''\n          };\n          matrix[week].push({\n            ymd: dayYMD,\n            // Cell content\n            day: this.formatDay(date),\n            label: this.formatDateString(date),\n            // Flags for styling\n            isThisMonth: month === calendarMonth,\n            isDisabled: dayDisabled,\n            // TODO: Handle other dateInfo properties such as notes/events\n            info: dateInfo\n          });\n        }\n      }\n\n      return matrix;\n    },\n    calendarHeadings: function calendarHeadings() {\n      var _this2 = this;\n\n      return this.calendar[0].map(function (d) {\n        return {\n          text: _this2.formatWeekdayNameShort((0, _date2.parseYMD)(d.ymd)),\n          label: _this2.formatWeekdayName((0, _date2.parseYMD)(d.ymd))\n        };\n      });\n    }\n  },\n  watch: (_watch = {}, _defineProperty(_watch, MODEL_PROP_NAME, function (newValue, oldValue) {\n    var selected = (0, _date2.formatYMD)(newValue) || '';\n    var old = (0, _date2.formatYMD)(oldValue) || '';\n\n    if (!(0, _date2.datesEqual)(selected, old)) {\n      this.activeYMD = selected || this.activeYMD;\n      this.selectedYMD = selected;\n    }\n  }), _defineProperty(_watch, \"selectedYMD\", function selectedYMD(newYMD, oldYMD) {\n    // TODO:\n    //   Should we compare to `formatYMD(this.value)` and emit\n    //   only if they are different?\n    if (newYMD !== oldYMD) {\n      this.$emit(MODEL_EVENT_NAME, this.valueAsDate ? (0, _date2.parseYMD)(newYMD) || null : newYMD || '');\n    }\n  }), _defineProperty(_watch, \"context\", function context(newValue, oldValue) {\n    if (!(0, _looseEqual.looseEqual)(newValue, oldValue)) {\n      this.$emit(_events.EVENT_NAME_CONTEXT, newValue);\n    }\n  }), _defineProperty(_watch, \"hidden\", function hidden(newValue) {\n    // Reset the active focused day when hidden\n    this.activeYMD = this.selectedYMD || (0, _date2.formatYMD)(this[MODEL_PROP_NAME] || this.constrainDate(this.initialDate || this.getToday())); // Enable/disable the live regions\n\n    this.setLive(!newValue);\n  }), _watch),\n  created: function created() {\n    var _this3 = this;\n\n    this.$nextTick(function () {\n      _this3.$emit(_events.EVENT_NAME_CONTEXT, _this3.context);\n    });\n  },\n  mounted: function mounted() {\n    this.setLive(true);\n  },\n\n  /* istanbul ignore next */\n  activated: function activated() {\n    this.setLive(true);\n  },\n\n  /* istanbul ignore next */\n  deactivated: function deactivated() {\n    this.setLive(false);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.setLive(false);\n  },\n  methods: {\n    // Public method(s)\n    focus: function focus() {\n      if (!this.disabled) {\n        (0, _dom.attemptFocus)(this.$refs.grid);\n      }\n    },\n    blur: function blur() {\n      if (!this.disabled) {\n        (0, _dom.attemptBlur)(this.$refs.grid);\n      }\n    },\n    // Private methods\n    setLive: function setLive(on) {\n      var _this4 = this;\n\n      if (on) {\n        this.$nextTick(function () {\n          (0, _dom.requestAF)(function () {\n            _this4.isLive = true;\n          });\n        });\n      } else {\n        this.isLive = false;\n      }\n    },\n    getToday: function getToday() {\n      return (0, _date2.parseYMD)((0, _date2.createDate)());\n    },\n    constrainDate: function constrainDate(date) {\n      // Constrains a date between min and max\n      // returns a new `Date` object instance\n      return (0, _date2.constrainDate)(date, this.computedMin, this.computedMax);\n    },\n    emitSelected: function emitSelected(date) {\n      var _this5 = this; // Performed in a `$nextTick()` to (probably) ensure\n      // the input event has emitted first\n\n\n      this.$nextTick(function () {\n        _this5.$emit(_events.EVENT_NAME_SELECTED, (0, _date2.formatYMD)(date) || '', (0, _date2.parseYMD)(date) || null);\n      });\n    },\n    // Event handlers\n    setGridFocusFlag: function setGridFocusFlag(event) {\n      // Sets the gridHasFocus flag to make date \"button\" look focused\n      this.gridHasFocus = !this.disabled && event.type === 'focus';\n    },\n    onKeydownWrapper: function onKeydownWrapper(event) {\n      // Calendar keyboard navigation\n      // Handles PAGEUP/PAGEDOWN/END/HOME/LEFT/UP/RIGHT/DOWN\n      // Focuses grid after updating\n      if (this.noKeyNav) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      var altKey = event.altKey,\n          ctrlKey = event.ctrlKey,\n          keyCode = event.keyCode;\n\n      if (!(0, _array.arrayIncludes)([_keyCodes.CODE_PAGEUP, _keyCodes.CODE_PAGEDOWN, _keyCodes.CODE_END, _keyCodes.CODE_HOME, _keyCodes.CODE_LEFT, _keyCodes.CODE_UP, _keyCodes.CODE_RIGHT, _keyCodes.CODE_DOWN], keyCode)) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      (0, _events2.stopEvent)(event);\n      var activeDate = (0, _date2.createDate)(this.activeDate);\n      var checkDate = (0, _date2.createDate)(this.activeDate);\n      var day = activeDate.getDate();\n      var constrainedToday = this.constrainDate(this.getToday());\n      var isRTL = this.isRTL;\n\n      if (keyCode === _keyCodes.CODE_PAGEUP) {\n        // PAGEUP - Previous month/year\n        activeDate = (altKey ? ctrlKey ? _date2.oneDecadeAgo : _date2.oneYearAgo : _date2.oneMonthAgo)(activeDate); // We check the first day of month to be in rage\n\n        checkDate = (0, _date2.createDate)(activeDate);\n        checkDate.setDate(1);\n      } else if (keyCode === _keyCodes.CODE_PAGEDOWN) {\n        // PAGEDOWN - Next month/year\n        activeDate = (altKey ? ctrlKey ? _date2.oneDecadeAhead : _date2.oneYearAhead : _date2.oneMonthAhead)(activeDate); // We check the last day of month to be in rage\n\n        checkDate = (0, _date2.createDate)(activeDate);\n        checkDate.setMonth(checkDate.getMonth() + 1);\n        checkDate.setDate(0);\n      } else if (keyCode === _keyCodes.CODE_LEFT) {\n        // LEFT - Previous day (or next day for RTL)\n        activeDate.setDate(day + (isRTL ? 1 : -1));\n        activeDate = this.constrainDate(activeDate);\n        checkDate = activeDate;\n      } else if (keyCode === _keyCodes.CODE_RIGHT) {\n        // RIGHT - Next day (or previous day for RTL)\n        activeDate.setDate(day + (isRTL ? -1 : 1));\n        activeDate = this.constrainDate(activeDate);\n        checkDate = activeDate;\n      } else if (keyCode === _keyCodes.CODE_UP) {\n        // UP - Previous week\n        activeDate.setDate(day - 7);\n        activeDate = this.constrainDate(activeDate);\n        checkDate = activeDate;\n      } else if (keyCode === _keyCodes.CODE_DOWN) {\n        // DOWN - Next week\n        activeDate.setDate(day + 7);\n        activeDate = this.constrainDate(activeDate);\n        checkDate = activeDate;\n      } else if (keyCode === _keyCodes.CODE_HOME) {\n        // HOME - Today\n        activeDate = constrainedToday;\n        checkDate = activeDate;\n      } else if (keyCode === _keyCodes.CODE_END) {\n        // END - Selected date, or today if no selected date\n        activeDate = (0, _date2.parseYMD)(this.selectedDate) || constrainedToday;\n        checkDate = activeDate;\n      }\n\n      if (!this.dateOutOfRange(checkDate) && !(0, _date2.datesEqual)(activeDate, this.activeDate)) {\n        // We only jump to date if within min/max\n        // We don't check for individual disabled dates though (via user function)\n        this.activeYMD = (0, _date2.formatYMD)(activeDate);\n      } // Ensure grid is focused\n\n\n      this.focus();\n    },\n    onKeydownGrid: function onKeydownGrid(event) {\n      // Pressing enter/space on grid to select active date\n      var keyCode = event.keyCode;\n      var activeDate = this.activeDate;\n\n      if (keyCode === _keyCodes.CODE_ENTER || keyCode === _keyCodes.CODE_SPACE) {\n        (0, _events2.stopEvent)(event);\n\n        if (!this.disabled && !this.readonly && !this.dateDisabled(activeDate)) {\n          this.selectedYMD = (0, _date2.formatYMD)(activeDate);\n          this.emitSelected(activeDate);\n        } // Ensure grid is focused\n\n\n        this.focus();\n      }\n    },\n    onClickDay: function onClickDay(day) {\n      // Clicking on a date \"button\" to select it\n      var selectedDate = this.selectedDate,\n          activeDate = this.activeDate;\n      var clickedDate = (0, _date2.parseYMD)(day.ymd);\n\n      if (!this.disabled && !day.isDisabled && !this.dateDisabled(clickedDate)) {\n        if (!this.readonly) {\n          // If readonly mode, we don't set the selected date, just the active date\n          // If the clicked date is equal to the already selected date, we don't update the model\n          this.selectedYMD = (0, _date2.formatYMD)((0, _date2.datesEqual)(clickedDate, selectedDate) ? selectedDate : clickedDate);\n          this.emitSelected(clickedDate);\n        }\n\n        this.activeYMD = (0, _date2.formatYMD)((0, _date2.datesEqual)(clickedDate, activeDate) ? activeDate : (0, _date2.createDate)(clickedDate)); // Ensure grid is focused\n\n        this.focus();\n      }\n    },\n    gotoPrevDecade: function gotoPrevDecade() {\n      this.activeYMD = (0, _date2.formatYMD)(this.constrainDate((0, _date2.oneDecadeAgo)(this.activeDate)));\n    },\n    gotoPrevYear: function gotoPrevYear() {\n      this.activeYMD = (0, _date2.formatYMD)(this.constrainDate((0, _date2.oneYearAgo)(this.activeDate)));\n    },\n    gotoPrevMonth: function gotoPrevMonth() {\n      this.activeYMD = (0, _date2.formatYMD)(this.constrainDate((0, _date2.oneMonthAgo)(this.activeDate)));\n    },\n    gotoCurrentMonth: function gotoCurrentMonth() {\n      // TODO: Maybe this goto date should be configurable?\n      this.activeYMD = (0, _date2.formatYMD)(this.constrainDate(this.getToday()));\n    },\n    gotoNextMonth: function gotoNextMonth() {\n      this.activeYMD = (0, _date2.formatYMD)(this.constrainDate((0, _date2.oneMonthAhead)(this.activeDate)));\n    },\n    gotoNextYear: function gotoNextYear() {\n      this.activeYMD = (0, _date2.formatYMD)(this.constrainDate((0, _date2.oneYearAhead)(this.activeDate)));\n    },\n    gotoNextDecade: function gotoNextDecade() {\n      this.activeYMD = (0, _date2.formatYMD)(this.constrainDate((0, _date2.oneDecadeAhead)(this.activeDate)));\n    },\n    onHeaderClick: function onHeaderClick() {\n      if (!this.disabled) {\n        this.activeYMD = this.selectedYMD || (0, _date2.formatYMD)(this.getToday());\n        this.focus();\n      }\n    }\n  },\n  render: function render(h) {\n    var _this6 = this; // If `hidden` prop is set, render just a placeholder node\n\n\n    if (this.hidden) {\n      return h();\n    }\n\n    var valueId = this.valueId,\n        widgetId = this.widgetId,\n        navId = this.navId,\n        gridId = this.gridId,\n        gridCaptionId = this.gridCaptionId,\n        gridHelpId = this.gridHelpId,\n        activeId = this.activeId,\n        disabled = this.disabled,\n        noKeyNav = this.noKeyNav,\n        isLive = this.isLive,\n        isRTL = this.isRTL,\n        activeYMD = this.activeYMD,\n        selectedYMD = this.selectedYMD,\n        safeId = this.safeId;\n    var hideDecadeNav = !this.showDecadeNav;\n    var todayYMD = (0, _date2.formatYMD)(this.getToday());\n    var highlightToday = !this.noHighlightToday; // Header showing current selected date\n\n    var $header = h('output', {\n      staticClass: 'form-control form-control-sm text-center',\n      class: {\n        'text-muted': disabled,\n        readonly: this.readonly || disabled\n      },\n      attrs: {\n        id: valueId,\n        for: gridId,\n        role: 'status',\n        tabindex: disabled ? null : '-1',\n        // Mainly for testing purposes, as we do not know\n        // the exact format `Intl` will format the date string\n        'data-selected': (0, _string.toString)(selectedYMD),\n        // We wait until after mount to enable `aria-live`\n        // to prevent initial announcement on page render\n        'aria-live': isLive ? 'polite' : 'off',\n        'aria-atomic': isLive ? 'true' : null\n      },\n      on: {\n        // Transfer focus/click to focus grid\n        // and focus active date (or today if no selection)\n        click: this.onHeaderClick,\n        focus: this.onHeaderClick\n      }\n    }, this.selectedDate ? [// We use `bdi` elements here in case the label doesn't match the locale\n    // Although IE 11 does not deal with <BDI> at all (equivalent to a span)\n    h('bdi', {\n      staticClass: 'sr-only'\n    }, \" (\".concat((0, _string.toString)(this.labelSelected), \") \")), h('bdi', this.formatDateString(this.selectedDate))] : this.labelNoDateSelected || \"\\xA0\" // '&nbsp;'\n    );\n    $header = h('header', {\n      staticClass: 'b-calendar-header',\n      class: {\n        'sr-only': this.hideHeader\n      },\n      attrs: {\n        title: this.selectedDate ? this.labelSelectedDate || null : null\n      }\n    }, [$header]); // Content for the date navigation buttons\n\n    var navScope = {\n      isRTL: isRTL\n    };\n    var navProps = {\n      shiftV: 0.5\n    };\n\n    var navPrevProps = _objectSpread(_objectSpread({}, navProps), {}, {\n      flipH: isRTL\n    });\n\n    var navNextProps = _objectSpread(_objectSpread({}, navProps), {}, {\n      flipH: !isRTL\n    });\n\n    var $prevDecadeIcon = this.normalizeSlot(_slots.SLOT_NAME_NAV_PEV_DECADE, navScope) || h(_icons.BIconChevronBarLeft, {\n      props: navPrevProps\n    });\n    var $prevYearIcon = this.normalizeSlot(_slots.SLOT_NAME_NAV_PEV_YEAR, navScope) || h(_icons.BIconChevronDoubleLeft, {\n      props: navPrevProps\n    });\n    var $prevMonthIcon = this.normalizeSlot(_slots.SLOT_NAME_NAV_PEV_MONTH, navScope) || h(_icons.BIconChevronLeft, {\n      props: navPrevProps\n    });\n    var $thisMonthIcon = this.normalizeSlot(_slots.SLOT_NAME_NAV_THIS_MONTH, navScope) || h(_icons.BIconCircleFill, {\n      props: navProps\n    });\n    var $nextMonthIcon = this.normalizeSlot(_slots.SLOT_NAME_NAV_NEXT_MONTH, navScope) || h(_icons.BIconChevronLeft, {\n      props: navNextProps\n    });\n    var $nextYearIcon = this.normalizeSlot(_slots.SLOT_NAME_NAV_NEXT_YEAR, navScope) || h(_icons.BIconChevronDoubleLeft, {\n      props: navNextProps\n    });\n    var $nextDecadeIcon = this.normalizeSlot(_slots.SLOT_NAME_NAV_NEXT_DECADE, navScope) || h(_icons.BIconChevronBarLeft, {\n      props: navNextProps\n    }); // Utility to create the date navigation buttons\n\n    var makeNavBtn = function makeNavBtn(content, label, handler, btnDisabled, shortcut) {\n      return h('button', {\n        staticClass: 'btn btn-sm border-0 flex-fill',\n        class: [_this6.computedNavButtonVariant, {\n          disabled: btnDisabled\n        }],\n        attrs: {\n          title: label || null,\n          type: 'button',\n          tabindex: noKeyNav ? '-1' : null,\n          'aria-label': label || null,\n          'aria-disabled': btnDisabled ? 'true' : null,\n          'aria-keyshortcuts': shortcut || null\n        },\n        on: btnDisabled ? {} : {\n          click: handler\n        }\n      }, [h('div', {\n        attrs: {\n          'aria-hidden': 'true'\n        }\n      }, [content])]);\n    }; // Generate the date navigation buttons\n\n\n    var $nav = h('div', {\n      staticClass: 'b-calendar-nav d-flex',\n      attrs: {\n        id: navId,\n        role: 'group',\n        tabindex: noKeyNav ? '-1' : null,\n        'aria-hidden': disabled ? 'true' : null,\n        'aria-label': this.labelNav || null,\n        'aria-controls': gridId\n      }\n    }, [hideDecadeNav ? h() : makeNavBtn($prevDecadeIcon, this.labelPrevDecade, this.gotoPrevDecade, this.prevDecadeDisabled, 'Ctrl+Alt+PageDown'), makeNavBtn($prevYearIcon, this.labelPrevYear, this.gotoPrevYear, this.prevYearDisabled, 'Alt+PageDown'), makeNavBtn($prevMonthIcon, this.labelPrevMonth, this.gotoPrevMonth, this.prevMonthDisabled, 'PageDown'), makeNavBtn($thisMonthIcon, this.labelCurrentMonth, this.gotoCurrentMonth, this.thisMonthDisabled, 'Home'), makeNavBtn($nextMonthIcon, this.labelNextMonth, this.gotoNextMonth, this.nextMonthDisabled, 'PageUp'), makeNavBtn($nextYearIcon, this.labelNextYear, this.gotoNextYear, this.nextYearDisabled, 'Alt+PageUp'), hideDecadeNav ? h() : makeNavBtn($nextDecadeIcon, this.labelNextDecade, this.gotoNextDecade, this.nextDecadeDisabled, 'Ctrl+Alt+PageUp')]); // Caption for calendar grid\n\n    var $gridCaption = h('header', {\n      staticClass: 'b-calendar-grid-caption text-center font-weight-bold',\n      class: {\n        'text-muted': disabled\n      },\n      attrs: {\n        id: gridCaptionId,\n        'aria-live': isLive ? 'polite' : null,\n        'aria-atomic': isLive ? 'true' : null\n      },\n      key: 'grid-caption'\n    }, this.formatYearMonth(this.calendarFirstDay)); // Calendar weekday headings\n\n    var $gridWeekDays = h('div', {\n      staticClass: 'b-calendar-grid-weekdays row no-gutters border-bottom',\n      attrs: {\n        'aria-hidden': 'true'\n      }\n    }, this.calendarHeadings.map(function (d, idx) {\n      return h('small', {\n        staticClass: 'col text-truncate',\n        class: {\n          'text-muted': disabled\n        },\n        attrs: {\n          title: d.label === d.text ? null : d.label,\n          'aria-label': d.label\n        },\n        key: idx\n      }, d.text);\n    })); // Calendar day grid\n\n    var $gridBody = this.calendar.map(function (week) {\n      var $cells = week.map(function (day, dIndex) {\n        var _class;\n\n        var isSelected = day.ymd === selectedYMD;\n        var isActive = day.ymd === activeYMD;\n        var isToday = day.ymd === todayYMD;\n        var idCell = safeId(\"_cell-\".concat(day.ymd, \"_\")); // \"fake\" button\n\n        var $btn = h('span', {\n          staticClass: 'btn border-0 rounded-circle text-nowrap',\n          // Should we add some classes to signify if today/selected/etc?\n          class: (_class = {\n            // Give the fake button a focus ring\n            focus: isActive && _this6.gridHasFocus,\n            // Styling\n            disabled: day.isDisabled || disabled,\n            active: isSelected\n          }, _defineProperty(_class, _this6.computedVariant, isSelected), _defineProperty(_class, _this6.computedTodayVariant, isToday && highlightToday && !isSelected && day.isThisMonth), _defineProperty(_class, 'btn-outline-light', !(isToday && highlightToday) && !isSelected && !isActive), _defineProperty(_class, 'btn-light', !(isToday && highlightToday) && !isSelected && isActive), _defineProperty(_class, 'text-muted', !day.isThisMonth && !isSelected), _defineProperty(_class, 'text-dark', !(isToday && highlightToday) && !isSelected && !isActive && day.isThisMonth), _defineProperty(_class, 'font-weight-bold', (isSelected || day.isThisMonth) && !day.isDisabled), _class),\n          on: {\n            click: function click() {\n              return _this6.onClickDay(day);\n            }\n          }\n        }, day.day);\n        return h('div', // Cell with button\n        {\n          staticClass: 'col p-0',\n          class: day.isDisabled ? 'bg-light' : day.info.class || '',\n          attrs: {\n            id: idCell,\n            role: 'button',\n            'data-date': day.ymd,\n            // Primarily for testing purposes\n            // Only days in the month are presented as buttons to screen readers\n            'aria-hidden': day.isThisMonth ? null : 'true',\n            'aria-disabled': day.isDisabled || disabled ? 'true' : null,\n            'aria-label': [day.label, isSelected ? \"(\".concat(_this6.labelSelected, \")\") : null, isToday ? \"(\".concat(_this6.labelToday, \")\") : null].filter(_identity.identity).join(' '),\n            // NVDA doesn't convey `aria-selected`, but does `aria-current`,\n            // ChromeVox doesn't convey `aria-current`, but does `aria-selected`,\n            // so we set both attributes for robustness\n            'aria-selected': isSelected ? 'true' : null,\n            'aria-current': isSelected ? 'date' : null\n          },\n          key: dIndex\n        }, [$btn]);\n      }); // Return the week \"row\"\n      // We use the first day of the weeks YMD value as a\n      // key for efficient DOM patching / element re-use\n\n      return h('div', {\n        staticClass: 'row no-gutters',\n        key: week[0].ymd\n      }, $cells);\n    });\n    $gridBody = h('div', {\n      // A key is only required on the body if we add in transition support\n      staticClass: 'b-calendar-grid-body',\n      style: disabled ? {\n        pointerEvents: 'none'\n      } : {} // key: this.activeYMD.slice(0, -3)\n\n    }, $gridBody);\n    var $gridHelp = h('footer', {\n      staticClass: 'b-calendar-grid-help border-top small text-muted text-center bg-light',\n      attrs: {\n        id: gridHelpId\n      }\n    }, [h('div', {\n      staticClass: 'small'\n    }, this.labelHelp)]);\n    var $grid = h('div', {\n      staticClass: 'b-calendar-grid form-control h-auto text-center',\n      attrs: {\n        id: gridId,\n        role: 'application',\n        tabindex: noKeyNav ? '-1' : disabled ? null : '0',\n        'data-month': activeYMD.slice(0, -3),\n        // `YYYY-MM`, mainly for testing\n        'aria-roledescription': this.labelCalendar || null,\n        'aria-labelledby': gridCaptionId,\n        'aria-describedby': gridHelpId,\n        // `aria-readonly` is not considered valid on `role=\"application\"`\n        // https://www.w3.org/TR/wai-aria-1.1/#aria-readonly\n        // 'aria-readonly': this.readonly && !disabled ? 'true' : null,\n        'aria-disabled': disabled ? 'true' : null,\n        'aria-activedescendant': activeId\n      },\n      on: {\n        keydown: this.onKeydownGrid,\n        focus: this.setGridFocusFlag,\n        blur: this.setGridFocusFlag\n      },\n      ref: 'grid'\n    }, [$gridCaption, $gridWeekDays, $gridBody, $gridHelp]); // Optional bottom slot\n\n    var $slot = this.normalizeSlot();\n    $slot = $slot ? h('footer', {\n      staticClass: 'b-calendar-footer'\n    }, $slot) : h();\n    var $widget = h('div', {\n      staticClass: 'b-calendar-inner',\n      style: this.block ? {} : {\n        width: this.width\n      },\n      attrs: {\n        id: widgetId,\n        dir: isRTL ? 'rtl' : 'ltr',\n        lang: this.computedLocale || null,\n        role: 'group',\n        'aria-disabled': disabled ? 'true' : null,\n        // If datepicker controls an input, this will specify the ID of the input\n        'aria-controls': this.ariaControls || null,\n        // This should be a prop (so it can be changed to Date picker, etc, localized\n        'aria-roledescription': this.roleDescription || null,\n        'aria-describedby': [// Should the attr (if present) go last?\n        // Or should this attr be a prop?\n        this.bvAttrs['aria-describedby'], valueId, gridHelpId].filter(_identity.identity).join(' ')\n      },\n      on: {\n        keydown: this.onKeydownWrapper\n      }\n    }, [$header, $nav, $grid, $slot]); // Wrap in an outer div that can be styled\n\n    return h('div', {\n      staticClass: 'b-calendar',\n      class: {\n        'd-block': this.block\n      }\n    }, [$widget]);\n  }\n});\n\nexports.BCalendar = BCalendar;"},"sourceMaps":null,"error":null,"hash":"13d46b2feee03275ca42ae60ef91c1a9","cacheData":{"env":{}}}