{"id":"../../node_modules/echarts/lib/coord/geo/geoJSONLoader.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/node_modules/echarts/package.json","includedInParent":true,"mtime":1654768047284},{"name":"zrender/lib/core/util","loc":{"line":21,"column":20,"index":813},"parent":"/data/uibuilder/node_modules/echarts/lib/coord/geo/geoJSONLoader.js","resolved":"/data/uibuilder/node_modules/zrender/lib/core/util.js"},{"name":"./parseGeoJson","loc":{"line":25,"column":27,"index":891},"parent":"/data/uibuilder/node_modules/echarts/lib/coord/geo/geoJSONLoader.js","resolved":"/data/uibuilder/node_modules/echarts/lib/coord/geo/parseGeoJson.js"},{"name":"../../util/model","loc":{"line":27,"column":21,"index":932},"parent":"/data/uibuilder/node_modules/echarts/lib/coord/geo/geoJSONLoader.js","resolved":"/data/uibuilder/node_modules/echarts/lib/util/model.js"},{"name":"./fix/nanhai","loc":{"line":31,"column":24,"index":1013},"parent":"/data/uibuilder/node_modules/echarts/lib/coord/geo/geoJSONLoader.js","resolved":"/data/uibuilder/node_modules/echarts/lib/coord/geo/fix/nanhai.js"},{"name":"./fix/textCoord","loc":{"line":33,"column":27,"index":1058},"parent":"/data/uibuilder/node_modules/echarts/lib/coord/geo/geoJSONLoader.js","resolved":"/data/uibuilder/node_modules/echarts/lib/coord/geo/fix/textCoord.js"},{"name":"./fix/geoCoord","loc":{"line":35,"column":26,"index":1105},"parent":"/data/uibuilder/node_modules/echarts/lib/coord/geo/geoJSONLoader.js","resolved":"/data/uibuilder/node_modules/echarts/lib/coord/geo/fix/geoCoord.js"},{"name":"./fix/diaoyuIsland","loc":{"line":37,"column":30,"index":1155},"parent":"/data/uibuilder/node_modules/echarts/lib/coord/geo/geoJSONLoader.js","resolved":"/data/uibuilder/node_modules/echarts/lib/coord/geo/fix/diaoyuIsland.js"}],"generated":{"js":"\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar each = _util.each;\n\nvar parseGeoJson = require(\"./parseGeoJson\");\n\nvar _model = require(\"../../util/model\");\n\nvar makeInner = _model.makeInner;\n\nvar fixNanhai = require(\"./fix/nanhai\");\n\nvar fixTextCoord = require(\"./fix/textCoord\");\n\nvar fixGeoCoord = require(\"./fix/geoCoord\");\n\nvar fixDiaoyuIsland = require(\"./fix/diaoyuIsland\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// Built-in GEO fixer.\nvar inner = makeInner();\nvar _default = {\n  /**\n   * @param {string} mapName\n   * @param {Object} mapRecord {specialAreas, geoJSON}\n   * @param {string} nameProperty\n   * @return {Object} {regions, boundingRect}\n   */\n  load: function (mapName, mapRecord, nameProperty) {\n    var parsed = inner(mapRecord).parsed;\n\n    if (parsed) {\n      return parsed;\n    }\n\n    var specialAreas = mapRecord.specialAreas || {};\n    var geoJSON = mapRecord.geoJSON;\n    var regions; // https://jsperf.com/try-catch-performance-overhead\n\n    try {\n      regions = geoJSON ? parseGeoJson(geoJSON, nameProperty) : [];\n    } catch (e) {\n      throw new Error('Invalid geoJson format\\n' + e.message);\n    }\n\n    fixNanhai(mapName, regions);\n    each(regions, function (region) {\n      var regionName = region.name;\n      fixTextCoord(mapName, region);\n      fixGeoCoord(mapName, region);\n      fixDiaoyuIsland(mapName, region); // Some area like Alaska in USA map needs to be tansformed\n      // to look better\n\n      var specialArea = specialAreas[regionName];\n\n      if (specialArea) {\n        region.transformTo(specialArea.left, specialArea.top, specialArea.width, specialArea.height);\n      }\n    });\n    return inner(mapRecord).parsed = {\n      regions: regions,\n      boundingRect: getBoundingRect(regions)\n    };\n  }\n};\n\nfunction getBoundingRect(regions) {\n  var rect;\n\n  for (var i = 0; i < regions.length; i++) {\n    var regionRect = regions[i].getBoundingRect();\n    rect = rect || regionRect.clone();\n    rect.union(regionRect);\n  }\n\n  return rect;\n}\n\nmodule.exports = _default;"},"sourceMaps":null,"error":null,"hash":"c6225d7932b4c7b1d4f012deda1782f2","cacheData":{"env":{}}}