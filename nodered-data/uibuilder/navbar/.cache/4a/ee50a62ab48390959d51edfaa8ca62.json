{"id":"../node_modules/bootstrap-vue/esm/mixins/form-options.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../vue","loc":{"line":1,"column":20,"index":20},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-options.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../constants/props","loc":{"line":2,"column":57,"index":87},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-options.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../utils/get","loc":{"line":3,"column":20,"index":129},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-options.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/get.js"},{"name":"../utils/html","loc":{"line":4,"column":26,"index":171},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-options.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/html.js"},{"name":"../utils/inspect","loc":{"line":5,"column":52,"index":240},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-options.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../utils/object","loc":{"line":6,"column":21,"index":281},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-options.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../utils/props","loc":{"line":7,"column":48,"index":348},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-options.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"../utils/warn","loc":{"line":8,"column":21,"index":387},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-options.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/warn.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.formOptionsMixin = void 0;\n\nvar _vue = require(\"../vue\");\n\nvar _props = require(\"../constants/props\");\n\nvar _get = require(\"../utils/get\");\n\nvar _html = require(\"../utils/html\");\n\nvar _inspect = require(\"../utils/inspect\");\n\nvar _object = require(\"../utils/object\");\n\nvar _props2 = require(\"../utils/props\");\n\nvar _warn = require(\"../utils/warn\");\n\n// --- Constants ---\nvar OPTIONS_OBJECT_DEPRECATED_MSG = 'Setting prop \"options\" to an object is deprecated. Use the array format instead.'; // --- Props ---\n\nvar props = (0, _props2.makePropsConfigurable)({\n  disabledField: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'disabled'),\n  htmlField: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'html'),\n  options: (0, _props2.makeProp)(_props.PROP_TYPE_ARRAY_OBJECT, []),\n  textField: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'text'),\n  valueField: (0, _props2.makeProp)(_props.PROP_TYPE_STRING, 'value')\n}, 'formOptionControls'); // --- Mixin ---\n// @vue/component\n\nexports.props = props;\n\nvar formOptionsMixin = _vue.Vue.extend({\n  props: props,\n  computed: {\n    formOptions: function formOptions() {\n      return this.normalizeOptions(this.options);\n    }\n  },\n  methods: {\n    normalizeOption: function normalizeOption(option) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null; // When the option is an object, normalize it\n\n      if ((0, _inspect.isPlainObject)(option)) {\n        var value = (0, _get.get)(option, this.valueField);\n        var text = (0, _get.get)(option, this.textField);\n        return {\n          value: (0, _inspect.isUndefined)(value) ? key || text : value,\n          text: (0, _html.stripTags)(String((0, _inspect.isUndefined)(text) ? key : text)),\n          html: (0, _get.get)(option, this.htmlField),\n          disabled: Boolean((0, _get.get)(option, this.disabledField))\n        };\n      } // Otherwise create an `<option>` object from the given value\n\n\n      return {\n        value: key || option,\n        text: (0, _html.stripTags)(String(option)),\n        disabled: false\n      };\n    },\n    normalizeOptions: function normalizeOptions(options) {\n      var _this = this; // Normalize the given options array\n\n\n      if ((0, _inspect.isArray)(options)) {\n        return options.map(function (option) {\n          return _this.normalizeOption(option);\n        });\n      } else if ((0, _inspect.isPlainObject)(options)) {\n        // Deprecate the object options format\n        (0, _warn.warn)(OPTIONS_OBJECT_DEPRECATED_MSG, this.$options.name); // Normalize a `options` object to an array of options\n\n        return (0, _object.keys)(options).map(function (key) {\n          return _this.normalizeOption(options[key] || {}, key);\n        });\n      } // If not an array or object, return an empty array\n\n      /* istanbul ignore next */\n\n\n      return [];\n    }\n  }\n});\n\nexports.formOptionsMixin = formOptionsMixin;"},"sourceMaps":null,"error":null,"hash":"5546a10cf9f9d592ac9e31d0e40628c7","cacheData":{"env":{}}}