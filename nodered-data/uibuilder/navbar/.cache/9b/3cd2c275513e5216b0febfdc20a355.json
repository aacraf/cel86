{"id":"../node_modules/bootstrap-vue/esm/directives/scrollspy/scrollspy.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../constants/env","loc":{"line":1,"column":27,"index":27},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/scrollspy/scrollspy.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/env.js"},{"name":"../../utils/inspect","loc":{"line":2,"column":45,"index":95},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/scrollspy/scrollspy.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../utils/math","loc":{"line":3,"column":26,"index":144},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/scrollspy/scrollspy.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/math.js"},{"name":"../../utils/number","loc":{"line":4,"column":26,"index":190},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/scrollspy/scrollspy.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/number.js"},{"name":"../../utils/object","loc":{"line":5,"column":21,"index":233},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/scrollspy/scrollspy.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"./helpers/bv-scrollspy.class","loc":{"line":6,"column":28,"index":283},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/scrollspy/scrollspy.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/directives/scrollspy/helpers/bv-scrollspy.class.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VBScrollspy = void 0;\n\nvar _env = require(\"../../constants/env\");\n\nvar _inspect = require(\"../../utils/inspect\");\n\nvar _math = require(\"../../utils/math\");\n\nvar _number = require(\"../../utils/number\");\n\nvar _object = require(\"../../utils/object\");\n\nvar _bvScrollspy = require(\"./helpers/bv-scrollspy.class\");\n\n// Key we use to store our instance\nvar BV_SCROLLSPY = '__BV_ScrollSpy__'; // Pre-compiled regular expressions\n\nvar onlyDigitsRE = /^\\d+$/;\nvar offsetRE = /^(auto|position|offset)$/; // Build a ScrollSpy config based on bindings (if any)\n// Arguments and modifiers take precedence over passed value config object\n\n/* istanbul ignore next: not easy to test */\n\nvar parseBindings = function parseBindings(bindings)\n/* istanbul ignore next: not easy to test */\n{\n  var config = {}; // If argument, assume element ID\n\n  if (bindings.arg) {\n    // Element ID specified as arg\n    // We must prepend '#' to become a CSS selector\n    config.element = \"#\".concat(bindings.arg);\n  } // Process modifiers\n\n\n  (0, _object.keys)(bindings.modifiers).forEach(function (mod) {\n    if (onlyDigitsRE.test(mod)) {\n      // Offset value\n      config.offset = (0, _number.toInteger)(mod, 0);\n    } else if (offsetRE.test(mod)) {\n      // Offset method\n      config.method = mod;\n    }\n  }); // Process value\n\n  if ((0, _inspect.isString)(bindings.value)) {\n    // Value is a CSS ID or selector\n    config.element = bindings.value;\n  } else if ((0, _inspect.isNumber)(bindings.value)) {\n    // Value is offset\n    config.offset = (0, _math.mathRound)(bindings.value);\n  } else if ((0, _inspect.isObject)(bindings.value)) {\n    // Value is config object\n    // Filter the object based on our supported config options\n    (0, _object.keys)(bindings.value).filter(function (k) {\n      return !!_bvScrollspy.BVScrollSpy.DefaultType[k];\n    }).forEach(function (k) {\n      config[k] = bindings.value[k];\n    });\n  }\n\n  return config;\n}; // Add or update ScrollSpy on our element\n\n\nvar applyScrollspy = function applyScrollspy(el, bindings, vnode)\n/* istanbul ignore next: not easy to test */\n{\n  if (!_env.IS_BROWSER) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  var config = parseBindings(bindings);\n\n  if (el[BV_SCROLLSPY]) {\n    el[BV_SCROLLSPY].updateConfig(config, vnode.context.$root);\n  } else {\n    el[BV_SCROLLSPY] = new _bvScrollspy.BVScrollSpy(el, config, vnode.context.$root);\n  }\n}; // Remove ScrollSpy on our element\n\n/* istanbul ignore next: not easy to test */\n\n\nvar removeScrollspy = function removeScrollspy(el)\n/* istanbul ignore next: not easy to test */\n{\n  if (el[BV_SCROLLSPY]) {\n    el[BV_SCROLLSPY].dispose();\n    el[BV_SCROLLSPY] = null;\n    delete el[BV_SCROLLSPY];\n  }\n};\n/*\n * Export our directive\n */\n\n\nvar VBScrollspy = {\n  /* istanbul ignore next: not easy to test */\n  bind: function bind(el, bindings, vnode) {\n    applyScrollspy(el, bindings, vnode);\n  },\n\n  /* istanbul ignore next: not easy to test */\n  inserted: function inserted(el, bindings, vnode) {\n    applyScrollspy(el, bindings, vnode);\n  },\n\n  /* istanbul ignore next: not easy to test */\n  update: function update(el, bindings, vnode) {\n    if (bindings.value !== bindings.oldValue) {\n      applyScrollspy(el, bindings, vnode);\n    }\n  },\n\n  /* istanbul ignore next: not easy to test */\n  componentUpdated: function componentUpdated(el, bindings, vnode) {\n    if (bindings.value !== bindings.oldValue) {\n      applyScrollspy(el, bindings, vnode);\n    }\n  },\n\n  /* istanbul ignore next: not easy to test */\n  unbind: function unbind(el) {\n    removeScrollspy(el);\n  }\n};\nexports.VBScrollspy = VBScrollspy;"},"sourceMaps":null,"error":null,"hash":"9f45baab87f8248f69e77d08f52b8e0d","cacheData":{"env":{}}}