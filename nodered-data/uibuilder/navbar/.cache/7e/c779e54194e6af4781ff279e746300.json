{"id":"../node_modules/bootstrap-vue/esm/icons/helpers/make-icon.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../vue","loc":{"line":7,"column":31,"index":1121},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/icons/helpers/make-icon.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../utils/object","loc":{"line":8,"column":21,"index":1155},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/icons/helpers/make-icon.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../../utils/string","loc":{"line":9,"column":44,"index":1221},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/icons/helpers/make-icon.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/string.js"},{"name":"./icon-base","loc":{"line":10,"column":53,"index":1296},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/icons/helpers/make-icon.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/icons/helpers/icon-base.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeIcon = void 0;\n\nvar _vue = require(\"../../vue\");\n\nvar _object = require(\"../../utils/object\");\n\nvar _string = require(\"../../utils/string\");\n\nvar _iconBase = require(\"./icon-base\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n/**\n * Icon component generator function\n *\n * @param {string} icon name (minus the leading `BIcon`)\n * @param {string} raw `innerHTML` for SVG\n * @return {VueComponent}\n */\nvar makeIcon = function makeIcon(name, content) {\n  // For performance reason we pre-compute some values, so that\n  // they are not computed on each render of the icon component\n  var kebabName = (0, _string.kebabCase)(name);\n  var iconName = \"BIcon\".concat((0, _string.pascalCase)(name));\n  var iconNameClass = \"bi-\".concat(kebabName);\n  var iconTitle = kebabName.replace(/-/g, ' ');\n  var svgContent = (0, _string.trim)(content || '');\n  return /*#__PURE__*/_vue.Vue.extend({\n    name: iconName,\n    functional: true,\n    props: (0, _object.omit)(_iconBase.props, ['content']),\n    render: function render(h, _ref) {\n      var data = _ref.data,\n          props = _ref.props;\n      return h(_iconBase.BVIconBase, (0, _vue.mergeData)( // Defaults\n      {\n        props: {\n          title: iconTitle\n        },\n        attrs: {\n          'aria-label': iconTitle\n        }\n      }, // User data\n      data, // Required data\n      {\n        staticClass: iconNameClass,\n        props: _objectSpread(_objectSpread({}, props), {}, {\n          content: svgContent\n        })\n      }));\n    }\n  });\n};\n\nexports.makeIcon = makeIcon;"},"sourceMaps":null,"error":null,"hash":"da57e8424f0a0bdb96bb7024cc537267","cacheData":{"env":{}}}