{"id":"../node_modules/bootstrap-vue/esm/components/modal/helpers/modal-manager.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../../../vue","loc":{"line":5,"column":20,"index":135},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/modal/helpers/modal-manager.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../../../constants/env","loc":{"line":6,"column":27,"index":178},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/modal/helpers/modal-manager.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/env.js"},{"name":"../../../constants/events","loc":{"line":7,"column":47,"index":251},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/modal/helpers/modal-manager.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/events.js"},{"name":"../../../utils/dom","loc":{"line":8,"column":134,"index":414},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/modal/helpers/modal-manager.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/dom.js"},{"name":"../../../utils/inspect","loc":{"line":9,"column":23,"index":459},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/modal/helpers/modal-manager.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/inspect.js"},{"name":"../../../utils/number","loc":{"line":10,"column":35,"index":520},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/modal/helpers/modal-manager.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/number.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.modalManager = void 0;\n\nvar _vue = require(\"../../../vue\");\n\nvar _env = require(\"../../../constants/env\");\n\nvar _events = require(\"../../../constants/events\");\n\nvar _dom = require(\"../../../utils/dom\");\n\nvar _inspect = require(\"../../../utils/inspect\");\n\nvar _number = require(\"../../../utils/number\");\n\n/**\n * Private ModalManager helper\n * Handles controlling modal stacking zIndexes and body adjustments/classes\n */\n// --- Constants ---\n// Default modal backdrop z-index\nvar DEFAULT_ZINDEX = 1040; // Selectors for padding/margin adjustments\n\nvar SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';\nvar SELECTOR_STICKY_CONTENT = '.sticky-top';\nvar SELECTOR_NAVBAR_TOGGLER = '.navbar-toggler'; // --- Main component ---\n// @vue/component\n\nvar ModalManager = /*#__PURE__*/_vue.Vue.extend({\n  data: function data() {\n    return {\n      modals: [],\n      baseZIndex: null,\n      scrollbarWidth: null,\n      isBodyOverflowing: false\n    };\n  },\n  computed: {\n    modalCount: function modalCount() {\n      return this.modals.length;\n    },\n    modalsAreOpen: function modalsAreOpen() {\n      return this.modalCount > 0;\n    }\n  },\n  watch: {\n    modalCount: function modalCount(newCount, oldCount) {\n      if (_env.IS_BROWSER) {\n        this.getScrollbarWidth();\n\n        if (newCount > 0 && oldCount === 0) {\n          // Transitioning to modal(s) open\n          this.checkScrollbar();\n          this.setScrollbar();\n          (0, _dom.addClass)(document.body, 'modal-open');\n        } else if (newCount === 0 && oldCount > 0) {\n          // Transitioning to modal(s) closed\n          this.resetScrollbar();\n          (0, _dom.removeClass)(document.body, 'modal-open');\n        }\n\n        (0, _dom.setAttr)(document.body, 'data-modal-open-count', String(newCount));\n      }\n    },\n    modals: function modals(newValue) {\n      var _this = this;\n\n      this.checkScrollbar();\n      (0, _dom.requestAF)(function () {\n        _this.updateModals(newValue || []);\n      });\n    }\n  },\n  methods: {\n    // Public methods\n    registerModal: function registerModal(modal) {\n      var _this2 = this; // Register the modal if not already registered\n\n\n      if (modal && this.modals.indexOf(modal) === -1) {\n        // Add modal to modals array\n        this.modals.push(modal);\n        modal.$once(_events.HOOK_EVENT_NAME_BEFORE_DESTROY, function () {\n          _this2.unregisterModal(modal);\n        });\n      }\n    },\n    unregisterModal: function unregisterModal(modal) {\n      var index = this.modals.indexOf(modal);\n\n      if (index > -1) {\n        // Remove modal from modals array\n        this.modals.splice(index, 1); // Reset the modal's data\n\n        if (!(modal._isBeingDestroyed || modal._isDestroyed)) {\n          this.resetModal(modal);\n        }\n      }\n    },\n    getBaseZIndex: function getBaseZIndex() {\n      if ((0, _inspect.isNull)(this.baseZIndex) && _env.IS_BROWSER) {\n        // Create a temporary `div.modal-backdrop` to get computed z-index\n        var div = document.createElement('div');\n        (0, _dom.addClass)(div, 'modal-backdrop');\n        (0, _dom.addClass)(div, 'd-none');\n        (0, _dom.setStyle)(div, 'display', 'none');\n        document.body.appendChild(div);\n        this.baseZIndex = (0, _number.toInteger)((0, _dom.getCS)(div).zIndex, DEFAULT_ZINDEX);\n        document.body.removeChild(div);\n      }\n\n      return this.baseZIndex || DEFAULT_ZINDEX;\n    },\n    getScrollbarWidth: function getScrollbarWidth() {\n      if ((0, _inspect.isNull)(this.scrollbarWidth) && _env.IS_BROWSER) {\n        // Create a temporary `div.measure-scrollbar` to get computed z-index\n        var div = document.createElement('div');\n        (0, _dom.addClass)(div, 'modal-scrollbar-measure');\n        document.body.appendChild(div);\n        this.scrollbarWidth = (0, _dom.getBCR)(div).width - div.clientWidth;\n        document.body.removeChild(div);\n      }\n\n      return this.scrollbarWidth || 0;\n    },\n    // Private methods\n    updateModals: function updateModals(modals) {\n      var _this3 = this;\n\n      var baseZIndex = this.getBaseZIndex();\n      var scrollbarWidth = this.getScrollbarWidth();\n      modals.forEach(function (modal, index) {\n        // We update data values on each modal\n        modal.zIndex = baseZIndex + index;\n        modal.scrollbarWidth = scrollbarWidth;\n        modal.isTop = index === _this3.modals.length - 1;\n        modal.isBodyOverflowing = _this3.isBodyOverflowing;\n      });\n    },\n    resetModal: function resetModal(modal) {\n      if (modal) {\n        modal.zIndex = this.getBaseZIndex();\n        modal.isTop = true;\n        modal.isBodyOverflowing = false;\n      }\n    },\n    checkScrollbar: function checkScrollbar() {\n      // Determine if the body element is overflowing\n      var _getBCR = (0, _dom.getBCR)(document.body),\n          left = _getBCR.left,\n          right = _getBCR.right;\n\n      this.isBodyOverflowing = left + right < window.innerWidth;\n    },\n    setScrollbar: function setScrollbar() {\n      var body = document.body; // Storage place to cache changes to margins and padding\n      // Note: This assumes the following element types are not added to the\n      // document after the modal has opened.\n\n      body._paddingChangedForModal = body._paddingChangedForModal || [];\n      body._marginChangedForModal = body._marginChangedForModal || [];\n\n      if (this.isBodyOverflowing) {\n        var scrollbarWidth = this.scrollbarWidth; // Adjust fixed content padding\n\n        /* istanbul ignore next: difficult to test in JSDOM */\n\n        (0, _dom.selectAll)(SELECTOR_FIXED_CONTENT).forEach(function (el) {\n          var actualPadding = (0, _dom.getStyle)(el, 'paddingRight') || '';\n          (0, _dom.setAttr)(el, 'data-padding-right', actualPadding);\n          (0, _dom.setStyle)(el, 'paddingRight', \"\".concat((0, _number.toFloat)((0, _dom.getCS)(el).paddingRight, 0) + scrollbarWidth, \"px\"));\n\n          body._paddingChangedForModal.push(el);\n        }); // Adjust sticky content margin\n\n        /* istanbul ignore next: difficult to test in JSDOM */\n\n        (0, _dom.selectAll)(SELECTOR_STICKY_CONTENT).forEach(function (el)\n        /* istanbul ignore next */\n        {\n          var actualMargin = (0, _dom.getStyle)(el, 'marginRight') || '';\n          (0, _dom.setAttr)(el, 'data-margin-right', actualMargin);\n          (0, _dom.setStyle)(el, 'marginRight', \"\".concat((0, _number.toFloat)((0, _dom.getCS)(el).marginRight, 0) - scrollbarWidth, \"px\"));\n\n          body._marginChangedForModal.push(el);\n        }); // Adjust <b-navbar-toggler> margin\n\n        /* istanbul ignore next: difficult to test in JSDOM */\n\n        (0, _dom.selectAll)(SELECTOR_NAVBAR_TOGGLER).forEach(function (el)\n        /* istanbul ignore next */\n        {\n          var actualMargin = (0, _dom.getStyle)(el, 'marginRight') || '';\n          (0, _dom.setAttr)(el, 'data-margin-right', actualMargin);\n          (0, _dom.setStyle)(el, 'marginRight', \"\".concat((0, _number.toFloat)((0, _dom.getCS)(el).marginRight, 0) + scrollbarWidth, \"px\"));\n\n          body._marginChangedForModal.push(el);\n        }); // Adjust body padding\n\n        var actualPadding = (0, _dom.getStyle)(body, 'paddingRight') || '';\n        (0, _dom.setAttr)(body, 'data-padding-right', actualPadding);\n        (0, _dom.setStyle)(body, 'paddingRight', \"\".concat((0, _number.toFloat)((0, _dom.getCS)(body).paddingRight, 0) + scrollbarWidth, \"px\"));\n      }\n    },\n    resetScrollbar: function resetScrollbar() {\n      var body = document.body;\n\n      if (body._paddingChangedForModal) {\n        // Restore fixed content padding\n        body._paddingChangedForModal.forEach(function (el) {\n          /* istanbul ignore next: difficult to test in JSDOM */\n          if ((0, _dom.hasAttr)(el, 'data-padding-right')) {\n            (0, _dom.setStyle)(el, 'paddingRight', (0, _dom.getAttr)(el, 'data-padding-right') || '');\n            (0, _dom.removeAttr)(el, 'data-padding-right');\n          }\n        });\n      }\n\n      if (body._marginChangedForModal) {\n        // Restore sticky content and navbar-toggler margin\n        body._marginChangedForModal.forEach(function (el) {\n          /* istanbul ignore next: difficult to test in JSDOM */\n          if ((0, _dom.hasAttr)(el, 'data-margin-right')) {\n            (0, _dom.setStyle)(el, 'marginRight', (0, _dom.getAttr)(el, 'data-margin-right') || '');\n            (0, _dom.removeAttr)(el, 'data-margin-right');\n          }\n        });\n      }\n\n      body._paddingChangedForModal = null;\n      body._marginChangedForModal = null; // Restore body padding\n\n      if ((0, _dom.hasAttr)(body, 'data-padding-right')) {\n        (0, _dom.setStyle)(body, 'paddingRight', (0, _dom.getAttr)(body, 'data-padding-right') || '');\n        (0, _dom.removeAttr)(body, 'data-padding-right');\n      }\n    }\n  }\n}); // Create and export our modal manager instance\n\n\nvar modalManager = new ModalManager();\nexports.modalManager = modalManager;"},"sourceMaps":null,"error":null,"hash":"734f8158172bba8b78e9cfdc58b0734f","cacheData":{"env":{}}}