{"id":"components/Widgets/PlotlyGrafica.vue","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"moment","loc":{"line":7,"column":19,"index":35},"parent":"/data/uibuilder/navbar/src/components/Widgets/PlotlyGrafica.vue","resolved":"/data/uibuilder/node_modules/moment/moment.js"},{"name":"@vue/composition-api","loc":{"line":8,"column":32,"index":78},"parent":"/data/uibuilder/navbar/src/components/Widgets/PlotlyGrafica.vue","resolved":"/data/uibuilder/node_modules/@vue/composition-api/dist/vue-composition-api.mjs"},{"name":"vue-hot-reload-api","parent":"/data/uibuilder/navbar/src/components/Widgets/PlotlyGrafica.vue","resolved":"/data/uibuilder/navbar/node_modules/vue-hot-reload-api/dist/index.js"},{"name":"vue","parent":"/data/uibuilder/navbar/src/components/Widgets/PlotlyGrafica.vue","resolved":"/data/uibuilder/navbar/node_modules/vue/dist/vue.runtime.esm.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _compositionApi = require(\"@vue/composition-api\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\n//\n//\n//\nvar _default = (0, _compositionApi.defineComponent)({\n  props: {\n    SignalID: {\n      type: String,\n      required: true\n    },\n    live: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    timesteps: {\n      type: String,\n      required: false,\n      default: '2h'\n    },\n    stopLoading: {\n      type: Function,\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      data: [{\n        x: [],\n        y: [],\n        name: 'Tolerancia Superior',\n        line: {\n          color: '#ff0000',\n          width: 2\n        },\n        visible: 'legendonly'\n      }, {\n        x: [],\n        y: [],\n        name: 'Medicion',\n        line: {\n          color: '#247BA0',\n          width: 2\n        }\n      }, {\n        x: [],\n        y: [],\n        name: 'Modelo',\n        line: {\n          color: 'orange',\n          width: 2\n        },\n        visible: 'legendonly'\n      }, {\n        x: [],\n        y: [],\n        name: 'Tolerancia Inferior',\n        line: {\n          color: '#ff0000',\n          width: 2\n        },\n        visible: 'legendonly'\n      } // type: \"scatter\"\n      ],\n      layout: {\n        title: this.SignalID,\n        showlegend: true,\n        // xaxix: {\n        //     title: \"Tiempo\",\n        //     type: \"date\",\n        //     tickformat: \"%H:%M:%S\",\n        //     // tick0: \"0\",\n        //     dtick: \"1s\",\n        //     // tickangle: \"45\",\n        //     tickfont: {\n        //         size: 10\n        //     }\n        // },\n        xaxis: {// rangeselector: ,selectorOptions\n          // rangeslider: {}\n        },\n        annotations: [],\n        shapes: [],\n        is_loading: true\n      }\n    };\n  },\n  methods: {\n    updateChart: function updateChart(med) {\n      console.log(\"med\", med);\n      var newData = this.data[0];\n\n      if (med.timestamp != undefined) {\n        newData.x.push(med.FechaHora);\n        newData.y.push(med[this.SignalID]);\n        this.data[0] = newData;\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var fluxQuery = \"\\n            from(bucket: \\\"cel86\\\")\\n                |> range(start: -\".concat(this.timesteps, \")\\n                |> filter(fn: (r) => r[\\\"_measurement\\\"] == \\\"sensores\\\")\\n                |> filter(fn: (r) => r[\\\"molde\\\"] == \\\"MT201\\\")\\n                |> filter(fn: (r) => r[\\\"medicion\\\"] == \\\"\").concat(this.SignalID, \"\\\")\\n                |> pivot(rowKey:[\\\"_time\\\"], columnKey: [\\\"_field\\\"], valueColumn: \\\"_value\\\")\\n                |> drop(columns: [\\\"_start\\\", \\\"_stop\\\", \\\"_measurement\\\"])\\n            \");\n    uibuilder.send({\n      'topic': 'queryInflux',\n      'payload': this.SignalID,\n      'query': fluxQuery\n    });\n    uibuilder.onChange(\"msg\", function (newMsg) {\n      if (newMsg.topic == \"queryInflux\") {\n        var response = JSON.parse(newMsg.payload);\n        console.log(\"response\", response);\n        var forecastvalues = [];\n        var timestamp;\n        response.forEach(function (row) {\n          timestamp = (0, _moment.default)(row._time).format(\"YYYY-MM-DD HH:mm:ss\");\n\n          _this.data[0].x.push(timestamp);\n\n          _this.data[0].y.push(row.value_max);\n\n          _this.data[1].x.push(timestamp);\n\n          _this.data[1].y.push(row.value);\n\n          forecastvalues.push(parseFloat(row.forecast_20));\n\n          if (forecastvalues.length == 20) {\n            _this.data[2].x.push(timestamp);\n\n            _this.data[2].y.push(forecastvalues.shift());\n          }\n\n          _this.data[3].x.push(timestamp);\n\n          _this.data[3].y.push(row.value_min);\n\n          if (row.inyectada) {\n            _this.layout.annotations.push({\n              x: timestamp,\n              y: row.value,\n              xref: \"x\",\n              yref: \"y\",\n              arrowhead: 4,\n              ax: 0,\n              arrowsize: 1,\n              arrowwidth: 0.9,\n              arrowcolor: \"red\",\n              arrowside: \"end\"\n            });\n          }\n\n          if (row.anomalia && row.cel_state) {\n            _this.layout.shapes.push({\n              type: 'line',\n              x0: timestamp,\n              // y0: 0,\n              x1: timestamp,\n              y1: row.value,\n              opacity: 0.1,\n              line: {\n                color: 'red',\n                width: 0.5\n              }\n            });\n          }\n\n          if (!row.cel_state) {\n            _this.layout.shapes.push({\n              type: 'line',\n              x0: timestamp,\n              y0: 0,\n              x1: timestamp,\n              y1: row.value,\n              opacity: 0.1,\n              line: {\n                color: 'grey',\n                width: 0.5\n              }\n            });\n          } // if(!row.cel_state)\n          // {\n          //     this.data[0].line.color = 'black';\n          //     this.data[0].text = \"Maquina parada\"\n          // }\n\n        });\n\n        while (forecastvalues.length > 0) {\n          timestamp = (0, _moment.default)(timestamp).add(1, 'second').format(\"YYYY-MM-DD HH:mm:ss\");\n\n          _this.data[2].x.push(timestamp);\n\n          _this.data[2].y.push(forecastvalues.shift());\n        }\n\n        _this.stopLoading();\n      } //     this.live = true;\n      // }\n      // if (this.live) {\n      // this.updateChart(newMsg.payload.sensores.payload);\n      // }\n\n    });\n  }\n});\n\nexports.default = _default;\n        var $6155ab = exports.default || module.exports;\n      \n      if (typeof $6155ab === 'function') {\n        $6155ab = $6155ab.options;\n      }\n    \n        /* template */\n        Object.assign($6155ab, (function () {\n          var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"plotly\", {\n    attrs: {\n      data: _vm.data,\n      layout: _vm.layout,\n      \"display-mode-bar\": true,\n      displaylogo: false,\n    },\n  })\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n          return {\n            render: render,\n            staticRenderFns: staticRenderFns,\n            _compiled: true,\n            _scopeId: null,\n            functional: undefined\n          };\n        })());\n      \n    /* hot reload */\n    (function () {\n      if (module.hot) {\n        var api = require('vue-hot-reload-api');\n        api.install(require('vue'));\n        if (api.compatible) {\n          module.hot.accept();\n          if (!module.hot.data) {\n            api.createRecord('$6155ab', $6155ab);\n          } else {\n            api.reload('$6155ab', $6155ab);\n          }\n        }\n\n        \n      }\n    })();"},"sourceMaps":null,"error":null,"hash":"29810bbefc5e86a3bc433f9595f9eafe","cacheData":{"env":{}}}