{"id":"../node_modules/bootstrap-vue/esm/utils/css-escape.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"./string","loc":{"line":1,"column":25,"index":25},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/css-escape.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/string.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cssEscape = void 0;\n\nvar _string = require(\"./string\");\n\nvar escapeChar = function escapeChar(value) {\n  return '\\\\' + value;\n}; // The `cssEscape()` util is based on this `CSS.escape()` polyfill:\n// https://github.com/mathiasbynens/CSS.escape\n\n\nvar cssEscape = function cssEscape(value) {\n  value = (0, _string.toString)(value);\n  var length = value.length;\n  var firstCharCode = value.charCodeAt(0);\n  return value.split('').reduce(function (result, char, index) {\n    var charCode = value.charCodeAt(index); // If the character is NULL (U+0000), use (U+FFFD) as replacement\n\n    if (charCode === 0x0000) {\n      return result + \"\\uFFFD\";\n    } // If the character ...\n\n\n    if ( // ... is U+007F OR\n    charCode === 0x007f || // ... is in the range [\\1-\\1F] (U+0001 to U+001F) OR ...\n    charCode >= 0x0001 && charCode <= 0x001f || // ... is the first character and is in the range [0-9] (U+0030 to U+0039) OR ...\n    index === 0 && charCode >= 0x0030 && charCode <= 0x0039 || // ... is the second character and is in the range [0-9] (U+0030 to U+0039)\n    // and the first character is a `-` (U+002D) ...\n    index === 1 && charCode >= 0x0030 && charCode <= 0x0039 && firstCharCode === 0x002d) {\n      // ... https://drafts.csswg.org/cssom/#escape-a-character-as-code-point\n      return result + escapeChar(\"\".concat(charCode.toString(16), \" \"));\n    } // If the character ...\n\n\n    if ( // ... is the first character AND ...\n    index === 0 && // ... is a `-` (U+002D) AND ...\n    charCode === 0x002d && // ... there is no second character ...\n    length === 1) {\n      // ... use the escaped character\n      return result + escapeChar(char);\n    } // If the character ...\n\n\n    if ( // ... is greater than or equal to U+0080 OR ...\n    charCode >= 0x0080 || // ... is `-` (U+002D) OR ...\n    charCode === 0x002d || // ... is `_` (U+005F) OR ...\n    charCode === 0x005f || // ... is in the range [0-9] (U+0030 to U+0039) OR ...\n    charCode >= 0x0030 && charCode <= 0x0039 || // ... is in the range [A-Z] (U+0041 to U+005A) OR ...\n    charCode >= 0x0041 && charCode <= 0x005a || // ... is in the range [a-z] (U+0061 to U+007A) ...\n    charCode >= 0x0061 && charCode <= 0x007a) {\n      // ... use the character itself\n      return result + char;\n    } // Otherwise use the escaped character\n    // See: https://drafts.csswg.org/cssom/#escape-a-character\n\n\n    return result + escapeChar(char);\n  }, '');\n};\n\nexports.cssEscape = cssEscape;"},"sourceMaps":null,"error":null,"hash":"59b9b4ad10294c3e7e55049ef7b0071f","cacheData":{"env":{}}}