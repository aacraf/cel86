{"id":"../node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","dependencies":[{"name":"/data/uibuilder/navbar/package.json","includedInParent":true,"mtime":1654946937447},{"name":"/data/uibuilder/navbar/node_modules/bootstrap-vue/package.json","includedInParent":true,"mtime":1651564048996},{"name":"../vue","loc":{"line":9,"column":20,"index":1123},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/vue.js"},{"name":"../constants/props","loc":{"line":10,"column":78,"index":1211},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/props.js"},{"name":"../constants/slots","loc":{"line":11,"column":32,"index":1265},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/constants/slots.js"},{"name":"../utils/html","loc":{"line":12,"column":27,"index":1314},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/html.js"},{"name":"../utils/loose-equal","loc":{"line":13,"column":27,"index":1358},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/loose-equal.js"},{"name":"../utils/model","loc":{"line":14,"column":31,"index":1413},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/model.js"},{"name":"../utils/object","loc":{"line":15,"column":37,"index":1468},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/object.js"},{"name":"../utils/props","loc":{"line":16,"column":48,"index":1535},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/utils/props.js"},{"name":"../components/form-checkbox/form-checkbox","loc":{"line":17,"column":30,"index":1583},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-checkbox/form-checkbox.js"},{"name":"../components/form-radio/form-radio","loc":{"line":18,"column":27,"index":1655},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/components/form-radio/form-radio.js"},{"name":"./form-control","loc":{"line":19,"column":60,"index":1754},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-control.js"},{"name":"./form-custom","loc":{"line":20,"column":58,"index":1830},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-custom.js"},{"name":"./form-options","loc":{"line":21,"column":60,"index":1907},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-options.js"},{"name":"./form-size","loc":{"line":22,"column":54,"index":1979},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-size.js"},{"name":"./form-state","loc":{"line":23,"column":56,"index":2050},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-state.js"},{"name":"./id","loc":{"line":24,"column":42,"index":2108},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/id.js"},{"name":"./normalize-slot","loc":{"line":25,"column":35,"index":2151},"parent":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/form-radio-check-group.js","resolved":"/data/uibuilder/navbar/node_modules/bootstrap-vue/esm/mixins/normalize-slot.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.props = exports.formRadioCheckGroupMixin = exports.MODEL_PROP_NAME = exports.MODEL_EVENT_NAME = void 0;\n\nvar _vue = require(\"../vue\");\n\nvar _props = require(\"../constants/props\");\n\nvar _slots = require(\"../constants/slots\");\n\nvar _html = require(\"../utils/html\");\n\nvar _looseEqual = require(\"../utils/loose-equal\");\n\nvar _model = require(\"../utils/model\");\n\nvar _object = require(\"../utils/object\");\n\nvar _props2 = require(\"../utils/props\");\n\nvar _formCheckbox = require(\"../components/form-checkbox/form-checkbox\");\n\nvar _formRadio = require(\"../components/form-radio/form-radio\");\n\nvar _formControl = require(\"./form-control\");\n\nvar _formCustom = require(\"./form-custom\");\n\nvar _formOptions = require(\"./form-options\");\n\nvar _formSize = require(\"./form-size\");\n\nvar _formState = require(\"./form-state\");\n\nvar _id = require(\"./id\");\n\nvar _normalizeSlot = require(\"./normalize-slot\");\n\nvar _watch;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n// --- Constants ---\n// Attributes to pass down to checks/radios instead of applying them to the group\nvar PASS_DOWN_ATTRS = ['aria-describedby', 'aria-labelledby'];\n\nvar _makeModelMixin = (0, _model.makeModelMixin)('checked'),\n    modelMixin = _makeModelMixin.mixin,\n    modelProps = _makeModelMixin.props,\n    MODEL_PROP_NAME = _makeModelMixin.prop,\n    MODEL_EVENT_NAME = _makeModelMixin.event;\n\nexports.MODEL_EVENT_NAME = MODEL_EVENT_NAME;\nexports.MODEL_PROP_NAME = MODEL_PROP_NAME;\n// --- Props ---\nvar props = (0, _props2.makePropsConfigurable)((0, _object.sortKeys)(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _id.props), modelProps), _formControl.props), _formOptions.props), _formSize.props), _formState.props), _formCustom.props), {}, {\n  ariaInvalid: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN_STRING, false),\n  // Only applicable when rendered with button style\n  buttonVariant: (0, _props2.makeProp)(_props.PROP_TYPE_STRING),\n  // Render as button style\n  buttons: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  stacked: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false),\n  validated: (0, _props2.makeProp)(_props.PROP_TYPE_BOOLEAN, false)\n})), 'formRadioCheckGroups'); // --- Mixin ---\n// @vue/component\n\nexports.props = props;\n\nvar formRadioCheckGroupMixin = _vue.Vue.extend({\n  mixins: [_id.idMixin, modelMixin, _normalizeSlot.normalizeSlotMixin, _formControl.formControlMixin, _formOptions.formOptionsMixin, _formSize.formSizeMixin, _formState.formStateMixin, _formCustom.formCustomMixin],\n  inheritAttrs: false,\n  props: props,\n  data: function data() {\n    return {\n      localChecked: this[MODEL_PROP_NAME]\n    };\n  },\n  computed: {\n    inline: function inline() {\n      return !this.stacked;\n    },\n    groupName: function groupName() {\n      // Checks/Radios tied to the same model must have the same name,\n      // especially for ARIA accessibility\n      return this.name || this.safeId();\n    },\n    groupClasses: function groupClasses() {\n      var inline = this.inline,\n          size = this.size,\n          validated = this.validated;\n      var classes = {\n        'was-validated': validated\n      };\n\n      if (this.buttons) {\n        classes = [classes, 'btn-group-toggle', _defineProperty({\n          'btn-group': inline,\n          'btn-group-vertical': !inline\n        }, \"btn-group-\".concat(size), size)];\n      }\n\n      return classes;\n    }\n  },\n  watch: (_watch = {}, _defineProperty(_watch, MODEL_PROP_NAME, function (newValue) {\n    if (!(0, _looseEqual.looseEqual)(newValue, this.localChecked)) {\n      this.localChecked = newValue;\n    }\n  }), _defineProperty(_watch, \"localChecked\", function localChecked(newValue, oldValue) {\n    if (!(0, _looseEqual.looseEqual)(newValue, oldValue)) {\n      this.$emit(MODEL_EVENT_NAME, newValue);\n    }\n  }), _watch),\n  render: function render(h) {\n    var _this = this;\n\n    var isRadioGroup = this.isRadioGroup;\n    var attrs = (0, _object.pick)(this.$attrs, PASS_DOWN_ATTRS);\n    var optionComponent = isRadioGroup ? _formRadio.BFormRadio : _formCheckbox.BFormCheckbox;\n    var $inputs = this.formOptions.map(function (option, index) {\n      var key = \"BV_option_\".concat(index);\n      return h(optionComponent, {\n        props: {\n          // Individual radios or checks can be disabled in a group\n          disabled: option.disabled || false,\n          id: _this.safeId(key),\n          value: option.value // We don't need to include these, since the input's will know they are inside here\n          // form: this.form || null,\n          // name: this.groupName,\n          // required: Boolean(this.name && this.required)\n\n        },\n        attrs: attrs,\n        key: key\n      }, [h('span', {\n        domProps: (0, _html.htmlOrText)(option.html, option.text)\n      })]);\n    });\n    return h('div', {\n      class: [this.groupClasses, 'bv-no-focus-ring'],\n      attrs: _objectSpread(_objectSpread({}, (0, _object.omit)(this.$attrs, PASS_DOWN_ATTRS)), {}, {\n        'aria-invalid': this.computedAriaInvalid,\n        'aria-required': this.required ? 'true' : null,\n        id: this.safeId(),\n        role: isRadioGroup ? 'radiogroup' : 'group',\n        // Add `tabindex=\"-1\"` to allow group to be focused if needed by screen readers\n        tabindex: '-1'\n      })\n    }, [this.normalizeSlot(_slots.SLOT_NAME_FIRST), $inputs, this.normalizeSlot()]);\n  }\n});\n\nexports.formRadioCheckGroupMixin = formRadioCheckGroupMixin;"},"sourceMaps":null,"error":null,"hash":"2387a7610ea61ec1a91309b884211a8e","cacheData":{"env":{}}}